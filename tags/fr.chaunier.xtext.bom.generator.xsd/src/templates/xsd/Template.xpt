«IMPORT fr::chaunier::xtext::bom::bomDsl»

«EXTENSION fr::chaunier::xtext::bom::generator::ui::XsdImports»
«EXTENSION fr::chaunier::xtext::bom::generator::ui::XsdBeans»
«EXTENSION fr::chaunier::xtext::bom::generator::ui::DslUtils»
«EXTENSION templates::xsd::Extensions»


«DEFINE main FOR PackageDeclaration»
«FILE name+".xsd"-»
«setTheCurrentPackage()-»
<?xml version="1.0" encoding="UTF-8" ?>
<xsd:schema xmlns:«prefix»="«namespace»" 
attributeFormDefault="unqualified" 
elementFormDefault="unqualified" 
targetNamespace="«namespace»"
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
«addImportsHere()-»


«FOREACH  elements AS element-»
«EXPAND dump FOR element-»
«ENDFOREACH-»
</xsd:schema>  
«ENDFILE-»
«ENDDEFINE»

«DEFINE dump FOR AbstractElement-»
«ENDDEFINE»

«DEFINE dump FOR DataType-»
    <xsd:annotation>
      <xsd:documentation>datatype «name»</xsd:documentation>
    </xsd:annotation>
«ENDDEFINE»

«DEFINE dump FOR Enumeration-»
  	<xsd:simpleType name="«name»Enum">
    	<xsd:restriction base="xsd:string">
«FOREACH enumerationLiterals AS enumLiteral-»
«EXPAND enumLeteral FOR enumLiteral-»
«ENDFOREACH-»		
			<xsd:enumeration value="INCONNU_«enumerationLiterals.size+1»"/> 
«REM»
			<xsd:enumeration value="INCONNU_«enumerationLiterals.size+2»"/> 
			<xsd:enumeration value="INCONNU_«enumerationLiterals.size+3»"/> 
			<xsd:enumeration value="INCONNU_«enumerationLiterals.size+4»"/> 
			<xsd:enumeration value="INCONNU_«enumerationLiterals.size+5»"/> 
			<xsd:enumeration value="INCONNU_«enumerationLiterals.size+6»"/>
«ENDREM»			 
    	</xsd:restriction>
  	</xsd:simpleType>
  
«ENDDEFINE»


«DEFINE enumLeteral FOR EnumerationLiteral-»
			<xsd:enumeration value="«name»"/>
«ENDDEFINE»

«DEFINE dump FOR Entity-»
  <xsd:complexType name="«name()»Type">
«IF this.superType!=null»   
  	<xsd:complexContent>
  	<xsd:extension base="«getPrefix(superType)»:«superType.name()»Type">
 «ENDIF» 	
    <xsd:annotation>
      <xsd:documentation>«removeChar(description)»</xsd:documentation>
    </xsd:annotation>
       <xsd:sequence>
«FOREACH features AS feature-»
«EXPAND dump FOR feature-»
«ENDFOREACH»
       </xsd:sequence>
«IF this.superType!=null»   
  	</xsd:extension>
  	</xsd:complexContent>
 «ENDIF» 	
	</xsd:complexType>  
«ENDDEFINE»

«DEFINE dump FOR Feature-»
«ENDDEFINE»

«DEFINE dump FOR Attribute-»
«REM»
«registerType(this.type.referenced)-»
«ENDREM»
«IF constraint == null-»
          <xsd:element name="«name»" «EXPAND constraints::minMax FOR type» «EXPAND typeOfRef FOR type.referenced-»>
		    <xsd:annotation>
      			<xsd:documentation>«removeChar(this.description)»</xsd:documentation>
    		</xsd:annotation>
«ELSE-» 
«EXPAND constraints::const FOR constraint-»
«ENDIF-» 
          </xsd:element>
«ENDDEFINE»

«DEFINE typeOfRef FOR Type-»
«ENDDEFINE»

«DEFINE typeOfRef FOR Entity-»
 type="«getPrefix(this)»:«name()»Type" 
«ENDDEFINE»

«DEFINE typeOfRef FOR DataType-»
 type="xsd:string" 
«ENDDEFINE»

«DEFINE typeOfRef FOR Enumeration-»
 type="«getPrefix(this)»:«name()»Enum" 
«ENDDEFINE»

«DEFINE dump(String prefix) FOR Reference-»
«name»
«ENDDEFINE»

«REM»
«DEFINE const FOR Constraint-»
«ENDDEFINE»


«DEFINE const FOR BoolConstraint-»
          <xsd:element name="«((Attribute)eContainer()).name»" type="xsd:boolean" «EXPAND minMax FOR ((Attribute)eContainer()).type-»>
		    <xsd:annotation>
      			<xsd:documentation>«((Attribute)eContainer()).description»</xsd:documentation>
    		</xsd:annotation>
«ENDDEFINE»

«DEFINE const FOR StringConstraint-»
«IF constraintRef != null || constraintRef.minLen!=0 || constraintRef.maxLen != 0 || constraintRef.fixeLen != 0-» 
    	<xsd:element name="«((Attribute)eContainer()).name»" «EXPAND minMax FOR ((Attribute)eContainer()).type-»>
		    <xsd:annotation>
      			<xsd:documentation>«((Attribute)eContainer()).description»</xsd:documentation>
    		</xsd:annotation>
    			<xsd:simpleType>
    				<xsd:restriction base="xsd:string">
						«EXPAND stringConst FOR this»    				
    				</xsd:restriction>
    			</xsd:simpleType>
«ELSE-»    			
          <xsd:element name="«((Attribute)eContainer()).name»" type="xsd:string" «EXPAND minMax FOR ((Attribute)eContainer()).type-»>
«ENDIF-»          
«ENDDEFINE»

«DEFINE stringConst FOR StringConstraint-»
«IF constraintRef != null-»
					«IF constraintRef.minLen != 0» <xsd:minLength value= "«constraintRef.minLen»" />«ENDIF-»
					«IF constraintRef.maxLen != 0» <xsd:maxLength value= "«constraintRef.maxLen»" />«ENDIF-»
					«IF constraintRef.fixeLen != 0» <xsd:minLength value= "«constraintRef.fixeLen»"/> <xsd:maxLength value= "«constraintRef.fixeLen»"/> «ENDIF-»
«ENDIF»
«ENDDEFINE»
 
«DEFINE stringConst FOR IntegerConstraint-»
«IF constraintRef != null-»
					«IF constraintRef.minValue != 0» <xsd:minLength value= "«constraintRef.minValue»" />«ENDIF-»
					«IF constraintRef.maxValue != 0» <xsd:maxLength value= "«constraintRef.maxValue»" />«ENDIF-»
«ENDIF»
«ENDDEFINE»

«DEFINE stringConst FOR DecimalConstraint-»
«IF constraintRef != null-»
					«IF constraintRef.minValue != 0» <xsd:minLength value= "«constraintRef.minValue»" />«ENDIF-»
					«IF constraintRef.maxValue != 0» <xsd:maxLength value= "«constraintRef.maxValue»" />«ENDIF-»
«ENDIF»
«ENDDEFINE»

«DEFINE const FOR DateTimeConstraint-»
          <xsd:element name="«((Attribute)eContainer()).name»" type="xsd:datetime" «EXPAND minMax FOR ((Attribute)eContainer()).type-»>
«ENDDEFINE»

«DEFINE const FOR EnumerationConstraint-»
          <xsd:element name="«((Attribute)eContainer()).name»" type="xsd:string" «EXPAND minMax FOR ((Attribute)eContainer()).type-»>
«ENDDEFINE»

«DEFINE const FOR IntegerConstraint-»
«IF constraintRef != null-»
«IF constraintRef.minValue!=0 || constraintRef.minValue != 0-» 
    	<xsd:element name="«((Attribute)eContainer()).name»">
    			<xsd:simpleType>
    				<xsd:restriction base="xsd:integer" «EXPAND minMax FOR ((Attribute)eContainer()).type-»>
«EXPAND stringConst FOR this»    				
    				</xsd:restriction>
    			</xsd:simpleType>
«ELSE-»    			
          <xsd:element name="«((Attribute)eContainer()).name»" type="xsd:integer" >
«ENDIF»          
«ENDIF»          
«ENDDEFINE»

«DEFINE const FOR DecimalConstraint-»
«IF constraintRef != null-»
«IF constraintRef. minValue!=0 || constraintRef.minValue != 0-» 
    	<xsd:element name="«((Attribute)eContainer()).name»" «EXPAND minMax FOR ((Attribute)eContainer()).type-»>
    			<xsd:simpleType>
    				<xsd:restriction base="xsd:float" >
«EXPAND stringConst FOR this»    				
    				</xsd:restriction>
    			</xsd:simpleType>
«ELSE-»    			
          <xsd:element name="«((Attribute)eContainer()).name»" type="xsd:long" >
«ENDIF»  
«ENDIF»        
«ENDDEFINE»


«DEFINE minMax FOR TypeRef-»
«IF option»minOccurs="0"«ENDIF»
«IF multi-»maxOccurs="unbounded"«ENDIF-»
«ENDDEFINE»

«ENDREM»

