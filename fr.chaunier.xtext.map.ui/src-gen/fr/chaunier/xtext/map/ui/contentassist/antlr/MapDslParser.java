/*
* generated by Xtext
*/
package fr.chaunier.xtext.map.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.chaunier.xtext.map.services.MapDslGrammarAccess;

public class MapDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MapDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.chaunier.xtext.map.ui.contentassist.antlr.internal.InternalMapDslParser createParser() {
		fr.chaunier.xtext.map.ui.contentassist.antlr.internal.InternalMapDslParser result = new fr.chaunier.xtext.map.ui.contentassist.antlr.internal.InternalMapDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureMapAccess().getAlternatives(), "rule__FeatureMap__Alternatives");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getMappingModuleAccess().getGroup(), "rule__MappingModule__Group__0");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getMappingAccess().getGroup_8(), "rule__Mapping__Group_8__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0(), "rule__FeatureMap__Group_0__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_1(), "rule__FeatureMap__Group_1__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_2(), "rule__FeatureMap__Group_2__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_3(), "rule__FeatureMap__Group_3__0");
					put(grammarAccess.getModelAccess().getMappingModulesAssignment(), "rule__Model__MappingModulesAssignment");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getMappingModuleAccess().getNameAssignment_1(), "rule__MappingModule__NameAssignment_1");
					put(grammarAccess.getMappingModuleAccess().getImportsAssignment_3(), "rule__MappingModule__ImportsAssignment_3");
					put(grammarAccess.getMappingModuleAccess().getMappingsAssignment_4(), "rule__MappingModule__MappingsAssignment_4");
					put(grammarAccess.getMappingAccess().getNameAssignment_1(), "rule__Mapping__NameAssignment_1");
					put(grammarAccess.getMappingAccess().getLeftClassAssignment_3(), "rule__Mapping__LeftClassAssignment_3");
					put(grammarAccess.getMappingAccess().getRightClassAssignment_5(), "rule__Mapping__RightClassAssignment_5");
					put(grammarAccess.getMappingAccess().getDocumentationAssignment_6(), "rule__Mapping__DocumentationAssignment_6");
					put(grammarAccess.getMappingAccess().getMappedFeaturesAssignment_8_0(), "rule__Mapping__MappedFeaturesAssignment_8_0");
					put(grammarAccess.getFeatureMapAccess().getLeftFieldAssignment_0_1(), "rule__FeatureMap__LeftFieldAssignment_0_1");
					put(grammarAccess.getFeatureMapAccess().getRightFieldAssignment_0_3(), "rule__FeatureMap__RightFieldAssignment_0_3");
					put(grammarAccess.getFeatureMapAccess().getRuleAssignment_0_4(), "rule__FeatureMap__RuleAssignment_0_4");
					put(grammarAccess.getFeatureMapAccess().getSetLeftFieldAssignment_1_1(), "rule__FeatureMap__SetLeftFieldAssignment_1_1");
					put(grammarAccess.getFeatureMapAccess().getValLeftAssignment_1_3(), "rule__FeatureMap__ValLeftAssignment_1_3");
					put(grammarAccess.getFeatureMapAccess().getSetRightFieldAssignment_2_1(), "rule__FeatureMap__SetRightFieldAssignment_2_1");
					put(grammarAccess.getFeatureMapAccess().getValRightAssignment_2_3(), "rule__FeatureMap__ValRightAssignment_2_3");
					put(grammarAccess.getFeatureMapAccess().getIgnoreLeftFieldAssignment_3_1(), "rule__FeatureMap__IgnoreLeftFieldAssignment_3_1");
					put(grammarAccess.getFeatureMapAccess().getDocumentationAssignment_3_2(), "rule__FeatureMap__DocumentationAssignment_3_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.chaunier.xtext.map.ui.contentassist.antlr.internal.InternalMapDslParser typedParser = (fr.chaunier.xtext.map.ui.contentassist.antlr.internal.InternalMapDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MapDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MapDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
