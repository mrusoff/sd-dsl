grammar fr.chaunier.xtext.bom.BomDsl with org.eclipse.xtext.common.Terminals

//import "http://www.eclipse.org/emf/2002/Ecore" as ecore 

generate bomDsl "http://www.chaunier.fr/xtext/bom/BomDsl"

DomainModel:
	(elements+=AbstractElement)*;


AbstractElement:
	PackageDeclaration | Type | Import;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

PackageDeclaration:
//	(fileFormat=FileFormat
	'package' name=QualifiedName ('prefix' prefix=QualifiedName) ('namespace' namespace=STRING) '{'
		('format' format= 'XSD' | 'DTD' | 'FLAT' | 'CSV' | 'DB' )? ('delimiter' delimiter = STRING )?
		('lineSpec' lines+=STRING)* 
		(elements+=AbstractElement)*
	'}';

Type:
	( Entity | DataType | Enumeration )
	;  

DataType:
	'datatype' name=ID ;

Entity:
	entityType=EntityType? 'entity' name=ID ('extends' superType=[Entity|QualifiedName])? (description=STRING )? '{'
		(features+=Feature)*
	'}';

Feature:
	StructuralFeature (constraint=Constraint)?  (description=STRING )? //| Operation
	;

StructuralFeature:
	( Attribute | Reference ) ;
Attribute:
	name=ID ':' type=TypeRef  ;

Reference:
	'ref' name=ID ':' type=TypeRef ('opposite' opposite=[Reference])? ;

Enumeration:
    "enumeration" name= ID 
    "[" (enumerationLiterals += EnumerationLiteral)+ "]"
    ;

EnumerationLiteral:
    name=ID ("=" persistedValue=INT) ";" 
    ;

Operation:
	(visibility=Visibility)? 'op' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' ':' type=TypeRef;

Parameter:
	name=ID type=TypeRef ;

TypedElement:
	Feature | Parameter;

TypeRef:
	referenced=[Type|QualifiedName] (multi?='*')? (option?='?')?  ;

enum Visibility:
	public="public" | private="private" | protected="protected";

enum EntityType:
	public="abstract" ;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

	
Constraint :
   (BoolConstraint | StringConstraint | DateTimeConstraint | IntegerConstraint |
	 DecimalConstraint | EnumerationConstraint) 
	;

BoolConstraint:
    constraint="boolean" //dataType=[DataType]
    ;

StringConstraint:
    constraint="string" constraintRef=AllConstraint
    ("regexp" regularExpression=STRING)?

    ;

DateTimeConstraint:
    constraint="datetime"
//    accuracy=DateTimeAccuracy
    dataType=[DataType]
    (hasDefault?="default" defaultValue=STRING)?
    ;

//enum DateTimeAccuracy:
//    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
//    Second = "second" | Millisecond = "millisecond"
//    ;

IntegerConstraint:
    constraint="integer"  constraintRef=NumberConstraint
    ;

DecimalConstraint:
    constraint="decimal" constraintRef=NumberConstraint
    ;

enum EnumUsage:
	asString="as String" | asValue="as Value"  ;
	

EnumerationConstraint:
   'enum' (usage=EnumUsage) ("fixeLen" fixeLen=INT)?
    (hasDefault?="default" defaultValueAsString=ID)?
    ; 

NumberConstraint:	 
	(
	("minVal" minValue=INT)? 
	("maxVal" maxValue=INT)?
	(hasDefault?="default" defaultValue=STRING)? 
    (isFixed?="fixed" fixedValue=STRING)?
    ("minLen" minLen=INT)? 
    ("maxLen" maxLen=INT)? 
    ("fixeLen" fixeLen=INT)? 
    ("paddle" paddle=STRING)?
	(nullable?="nullable")?
	(derived?="derived" (writable?="writable")?)?
	(isXSDAtt?="xsd Att.")? 
	);
	
AllConstraint:	 
	(
	(hasDefault?="default" defaultValue=STRING)? 
    (isFixed?="fixed" fixedValue=STRING)?
    ("minLen" minLen=INT)? 
    ("maxLen" maxLen=INT)? 
    ("fixeLen" fixeLen=INT)? 
    ("paddle" paddle=STRING)?
	(nullable?="nullable")?
	(derived?="derived" (writable?="writable")?)?
	(isXSDAtt?="xsd Att.")? 
	)
;		
	
// Has conversion rule
//RealValue returns ecore::EDoubleObject: REAL ;

// Has conversion rule
//IntValue returns ecore::EBigInteger: BIGINT ;

// Has conversion rule

//DateValue returns ecore::EDate: DATE ;

// Terminals

