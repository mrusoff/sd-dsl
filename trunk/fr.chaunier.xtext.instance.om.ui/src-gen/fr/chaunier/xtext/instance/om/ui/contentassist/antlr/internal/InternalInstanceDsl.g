/*
* generated by Xtext
*/
grammar InternalInstanceDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.chaunier.xtext.instance.om.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.chaunier.xtext.instance.om.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.chaunier.xtext.instance.om.services.InstanceDslGrammarAccess;

}

@parser::members {
 
 	private InstanceDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(InstanceDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleFactory
entryRuleFactory 
:
{ before(grammarAccess.getFactoryRule()); }
	 ruleFactory
{ after(grammarAccess.getFactoryRule()); } 
	 EOF 
;

// Rule Factory
ruleFactory
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactoryAccess().getGroup()); }
(rule__Factory__Group__0)
{ after(grammarAccess.getFactoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard 
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
(rule__QualifiedNameWithWildCard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature
entryRuleFeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getGroup()); }
(rule__Feature__Group__0)
{ after(grammarAccess.getFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewObject
entryRuleNewObject 
:
{ before(grammarAccess.getNewObjectRule()); }
	 ruleNewObject
{ after(grammarAccess.getNewObjectRule()); } 
	 EOF 
;

// Rule NewObject
ruleNewObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewObjectAccess().getGroup()); }
(rule__NewObject__Group__0)
{ after(grammarAccess.getNewObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAccess().getValueAssignment()); }
(rule__Reference__ValueAssignment)
{ after(grammarAccess.getReferenceAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainment
entryRuleContainment 
:
{ before(grammarAccess.getContainmentRule()); }
	 ruleContainment
{ after(grammarAccess.getContainmentRule()); } 
	 EOF 
;

// Rule Containment
ruleContainment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainmentAccess().getValueAssignment()); }
(rule__Containment__ValueAssignment)
{ after(grammarAccess.getContainmentAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression 
:
{ before(grammarAccess.getTerminalExpressionRule()); }
	 ruleTerminalExpression
{ after(grammarAccess.getTerminalExpressionRule()); } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
(rule__TerminalExpression__Alternatives)
{ after(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThis
entryRuleThis 
:
{ before(grammarAccess.getThisRule()); }
	 ruleThis
{ after(grammarAccess.getThisRule()); } 
	 EOF 
;

// Rule This
ruleThis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThisAccess().getVariableAssignment()); }
(rule__This__VariableAssignment)
{ after(grammarAccess.getThisAccess().getVariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNew
entryRuleNew 
:
{ before(grammarAccess.getNewRule()); }
	 ruleNew
{ after(grammarAccess.getNewRule()); } 
	 EOF 
;

// Rule New
ruleNew
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewAccess().getGroup()); }
(rule__New__Group__0)
{ after(grammarAccess.getNewAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntero
entryRuleIntero 
:
{ before(grammarAccess.getInteroRule()); }
	 ruleIntero
{ after(grammarAccess.getInteroRule()); } 
	 EOF 
;

// Rule Intero
ruleIntero
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInteroAccess().getValueAssignment()); }
(rule__Intero__ValueAssignment)
{ after(grammarAccess.getInteroAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringa
entryRuleStringa 
:
{ before(grammarAccess.getStringaRule()); }
	 ruleStringa
{ after(grammarAccess.getStringaRule()); } 
	 EOF 
;

// Rule Stringa
ruleStringa
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringaAccess().getValueAssignment()); }
(rule__Stringa__ValueAssignment)
{ after(grammarAccess.getStringaAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullo
entryRuleNullo 
:
{ before(grammarAccess.getNulloRule()); }
	 ruleNullo
{ after(grammarAccess.getNulloRule()); } 
	 EOF 
;

// Rule Nullo
ruleNullo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNulloAccess().getValueAssignment()); }
(rule__Nullo__ValueAssignment)
{ after(grammarAccess.getNulloAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Feature__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getIsManyAssignment_1_0()); }
(rule__Feature__IsManyAssignment_1_0)
{ after(grammarAccess.getFeatureAccess().getIsManyAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getFeatureAccess().getEqualsSignKeyword_1_1()); }

	'=' 

{ after(grammarAccess.getFeatureAccess().getEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getTerminalExpressionParserRuleCall_0()); }
	ruleTerminalExpression
{ after(grammarAccess.getValueAccess().getTerminalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getReferenceParserRuleCall_1()); }
	ruleReference
{ after(grammarAccess.getValueAccess().getReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getContainmentParserRuleCall_2()); }
	ruleContainment
{ after(grammarAccess.getValueAccess().getContainmentParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getThisAssignment_0()); }
(rule__TerminalExpression__ThisAssignment_0)
{ after(grammarAccess.getTerminalExpressionAccess().getThisAssignment_0()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getNewAssignment_1()); }
(rule__TerminalExpression__NewAssignment_1)
{ after(grammarAccess.getTerminalExpressionAccess().getNewAssignment_1()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getIntAssignment_2()); }
(rule__TerminalExpression__IntAssignment_2)
{ after(grammarAccess.getTerminalExpressionAccess().getIntAssignment_2()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getStringAssignment_3()); }
(rule__TerminalExpression__StringAssignment_3)
{ after(grammarAccess.getTerminalExpressionAccess().getStringAssignment_3()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getNullAssignment_4()); }
(rule__TerminalExpression__NullAssignment_4)
{ after(grammarAccess.getTerminalExpressionAccess().getNullAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Factory__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factory__Group__0__Impl
	rule__Factory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getImportsAssignment_0()); }
(rule__Factory__ImportsAssignment_0)*
{ after(grammarAccess.getFactoryAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factory__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factory__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getRootAssignment_1()); }
(rule__Factory__RootAssignment_1)
{ after(grammarAccess.getFactoryAccess().getRootAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__0__Impl
	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Feature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getEFeatureAssignment_0()); }
(rule__Feature__EFeatureAssignment_0)
{ after(grammarAccess.getFeatureAccess().getEFeatureAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getAlternatives_1()); }
(rule__Feature__Alternatives_1)
{ after(grammarAccess.getFeatureAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getValueAssignment_2()); }
(rule__Feature__ValueAssignment_2)
{ after(grammarAccess.getFeatureAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NewObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewObject__Group__0__Impl
	rule__NewObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getEClassAssignment_0()); }
(rule__NewObject__EClassAssignment_0)
{ after(grammarAccess.getNewObjectAccess().getEClassAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewObject__Group__1__Impl
	rule__NewObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getNameAssignment_1()); }
(rule__NewObject__NameAssignment_1)?
{ after(grammarAccess.getNewObjectAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewObject__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewObject__Group__2__Impl
	rule__NewObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getNewObjectAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewObject__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewObject__Group__3__Impl
	rule__NewObject__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getFeaturesAssignment_3()); }
(rule__NewObject__FeaturesAssignment_3)*
{ after(grammarAccess.getNewObjectAccess().getFeaturesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewObject__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewObject__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getNewObjectAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__New__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__0__Impl
	rule__New__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getNewAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__New__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getTypeAssignment_1()); }
(rule__New__TypeAssignment_1)
{ after(grammarAccess.getNewAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Factory__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getFactoryAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__RootAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getRootNewObjectParserRuleCall_1_0()); }
	ruleNewObject{ after(grammarAccess.getFactoryAccess().getRootNewObjectParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildCard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__EFeatureAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getEFeatureStructuralFeatureCrossReference_0_0()); }
(
{ before(grammarAccess.getFeatureAccess().getEFeatureStructuralFeatureIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getFeatureAccess().getEFeatureStructuralFeatureIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getFeatureAccess().getEFeatureStructuralFeatureCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__IsManyAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getIsManyPlusSignEqualsSignKeyword_1_0_0()); }
(
{ before(grammarAccess.getFeatureAccess().getIsManyPlusSignEqualsSignKeyword_1_0_0()); }

	'+=' 

{ after(grammarAccess.getFeatureAccess().getIsManyPlusSignEqualsSignKeyword_1_0_0()); }
)

{ after(grammarAccess.getFeatureAccess().getIsManyPlusSignEqualsSignKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getFeatureAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__EClassAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getEClassEntityCrossReference_0_0()); }
(
{ before(grammarAccess.getNewObjectAccess().getEClassEntityIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getNewObjectAccess().getEClassEntityIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getNewObjectAccess().getEClassEntityCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNewObjectAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__FeaturesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewObjectAccess().getFeaturesFeatureParserRuleCall_3_0()); }
	ruleFeature{ after(grammarAccess.getNewObjectAccess().getFeaturesFeatureParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getValueEObjectCrossReference_0()); }
(
{ before(grammarAccess.getReferenceAccess().getValueEObjectIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getReferenceAccess().getValueEObjectIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getReferenceAccess().getValueEObjectCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Containment__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentAccess().getValueNewObjectParserRuleCall_0()); }
	ruleNewObject{ after(grammarAccess.getContainmentAccess().getValueNewObjectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__ThisAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getThisThisParserRuleCall_0_0()); }
	ruleThis{ after(grammarAccess.getTerminalExpressionAccess().getThisThisParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__NewAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getNewNewParserRuleCall_1_0()); }
	ruleNew{ after(grammarAccess.getTerminalExpressionAccess().getNewNewParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__IntAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getIntInteroParserRuleCall_2_0()); }
	ruleIntero{ after(grammarAccess.getTerminalExpressionAccess().getIntInteroParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__StringAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getStringStringaParserRuleCall_3_0()); }
	ruleStringa{ after(grammarAccess.getTerminalExpressionAccess().getStringStringaParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__NullAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getNullNulloParserRuleCall_4_0()); }
	ruleNullo{ after(grammarAccess.getTerminalExpressionAccess().getNullNulloParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__This__VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThisAccess().getVariableThisKeyword_0()); }
(
{ before(grammarAccess.getThisAccess().getVariableThisKeyword_0()); }

	'this' 

{ after(grammarAccess.getThisAccess().getVariableThisKeyword_0()); }
)

{ after(grammarAccess.getThisAccess().getVariableThisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__New__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getTypeEntityCrossReference_1_0()); }
(
{ before(grammarAccess.getNewAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNewAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getNewAccess().getTypeEntityCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Intero__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteroAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getInteroAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stringa__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringaAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringaAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Nullo__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNulloAccess().getValueNullKeyword_0()); }
(
{ before(grammarAccess.getNulloAccess().getValueNullKeyword_0()); }

	'null' 

{ after(grammarAccess.getNulloAccess().getValueNullKeyword_0()); }
)

{ after(grammarAccess.getNulloAccess().getValueNullKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


