

grammar fr.chaunier.xtext.omcst.om.OmcstDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate omcstDsl "http://www.chaunier.fr/xtext/omcst/om/OmcstDsl"

DomainModel:
	(elements+=AbstractElement)*
	;

AbstractElement:
	PackageDeclaration | Type | Import | XsdElement
	;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard
	;

XsdElement : 
	'element' xsdElement=[Entity]	
;

PackageDeclaration:
	'package' name=QualifiedName ('prefix' prefix=QualifiedName)? ('namespace' namespace=STRING)?
	("annotations" anno=Annotations)? 
   '{'
		(elements+=AbstractElement)*
	'}';

Type:
	( Entity | DataType | Enumeration )
	;  

DataType:
	'datatype' name=ID (constraint=Constraint)? 
	("annotations" anno=Annotations)?
	(description=STRING )? 
	;

Entity:
	(isAbstract?="abstract")? 'entity' name=ID ('extends' superType=[Entity|QualifiedName])?
	("annotations" anno=Annotations)? 
	(description=STRING )? '{'
		(features+=Feature)*
	'}';

Feature:
	StructuralFeature (constraint=Constraint)? 
	("annotations" anno=Annotations)?
	(description=STRING )? //| Operation
	;

StructuralFeature:
	( Attribute | Reference ) ;
	
Attribute:
	name=ID ':' type=TypeRef  ;

Reference:
	'ref' name=ID ':' type=TypeRef ('opposite' opposite=[Reference])? ;

Enumeration:
    "enumeration" name= ID 
    "[" (enumerationLiterals += EnumerationLiteral)+ "]"
    ;

EnumerationLiteral:
    name=ID ("=" persistedValue=BIGINT) ";" 
    ;

Operation:
	(visibility=Visibility)? 'op' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' ':' type=TypeRef;

Parameter:
	name=ID type=TypeRef ;

TypedElement:
	Feature | Parameter;

TypeRef:
	referenced=[Type|QualifiedName] (multi?='*')? (option?='?')?  ;

enum Visibility:
	public="public" | private="private" | protected="protected";

/*
enum EntityType:
	abstract="abstract" ;
*/
 
enum AttributeType:
	derived="derived" ;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

Annotations :
	('[' annotations+=Annotation ( "," annotations+=Annotation)* ']')?
;

Annotation :
		key=STRING ':' value=STRING
    ;

Constraint :
   (BoolConstraint | StringConstraint | DateTimeConstraint | DecimalConstraint | IntegerConstraint | EnumerationConstraint) 
	(nullable?="nullable")?
	(derived?="derived" )?
	(writable?="writable")?
	;

BoolConstraint:
    constraint="boolean" 
	("default" defaultValue=BoolVar)? 
    ("fixed" fixedValue=BoolVar)?
    ;

StringConstraint:
    constraint="string" 
	("default" defaultValue=STRING)? 
    ("fixed" fixedValue=STRING)?
    ("minLen" minLen=BIGINT)? 
    ("maxLen" maxLen=BIGINT)? 
    ("fixeLen" fixeLen=BIGINT)? 
    ("regex" regex=STRING)?
	(isId?="id")? 
    ;

DateTimeConstraint:
    constraint=("datetime"|"timestamp"|"date"|"time")
    ;

DecimalConstraint:
    constraint="decimal" 
	("default" defaultValue=NumberVar)? 
    ("fixed" fixedValue=NumberVar)?
	("minVal" minValue=NumberVar)? 
	("maxVal" maxValue=NumberVar)?
    ("precision" precision=BIGINT)? 
    ("scale" scale=BIGINT)? 
    ("fixeLen" fixeLen=BIGINT)? 
//    ("paddle" paddle=STRING)?
    ;

IntegerConstraint:
    constraint="integer" 
	("default" defaultValue=IntVar)? 
    ("fixed" fixedValue=IntVar)?
	("minVal" minValue=IntVar)? 
	("maxVal" maxValue=IntVar)?
    ("fixeLen" fixeLen=BIGINT)? 
	(isId?="id")? 
//    ("paddle" paddle=STRING)?
    ;

enum EnumUsage:
	asString="as String" | asValue="as Value"  ;
	

EnumerationConstraint:
   'enum' (usage=EnumUsage) 
   ("fixeLen" fixeLen=BIGINT)?
   ("default" defaultValueAsString=ID)?
    ; 

/*
NumberConstraint:	 
	(
	("default" defaultValue=TerminalExpression)? 
    ("fixed" fixedValue=TerminalExpression)?
	("minVal" minValue=TerminalNumber)? 
	("maxVal" maxValue=TerminalNumber)?
    ("fixeLen" fixeLen=BIGINT)? 
//    ("paddle" paddle=STRING)?
	(isId?="id")? 
	(nullable?="nullable")?
	(derived?="derived" )?
	(writable?="writable")?
	);
	
AllConstraint:	 
	(
	("default" defaultValue=STRING)? 
    ("fixed" fixedValue=STRING)?
    ("minLen" minLen=BIGINT)? 
    ("maxLen" maxLen=BIGINT)? 
    ("fixeLen" fixeLen=BIGINT)? 
    ("regex" regex=STRING)?
	(isId?="id")? 
	(nullable?="nullable")?
	(derived?="derived" )?
	(writable?="writable")?
	)
;

SimpleConstraint:	 
	(
	("default" defaultValue=TerminalExpression)? 
    ("fixed" fixedValue=TerminalExpression)?
	)
;
 */
TerminalNumber:
   int = IntVar |
   number = NumberVar 
;

TerminalExpression:
   int = IntVar |
   number = NumberVar |
   null = NullVar |
   bool = BoolVar |
   string = StringVar //| 
//   enumm = EnumVar  
;

IntVar : value = BIGINT;
NumberVar : value = NUMBER;
StringVar : value = STRING;
NullVar : value = 'null';
BoolVar : value = 'true' | 'false';


terminal BIGINT returns ecore::EBigInteger:
	('0'..'9')*;

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;

terminal INT returns ecore::EInt:
	'this one has been deactivated';
	
        