/*
* generated by Xtext
*/
grammar InternalBomDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.chaunier.xtext.bom.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.chaunier.xtext.bom.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.chaunier.xtext.bom.services.BomDslGrammarAccess;

}

@parser::members {
 
 	private BomDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BomDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomainModel
entryRuleDomainModel 
:
{ before(grammarAccess.getDomainModelRule()); }
	 ruleDomainModel
{ after(grammarAccess.getDomainModelRule()); } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainModelAccess().getElementsAssignment()); }
(rule__DomainModel__ElementsAssignment)*
{ after(grammarAccess.getDomainModelAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractElement
entryRuleAbstractElement 
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractElementAccess().getAlternatives()); }
(rule__AbstractElement__Alternatives)
{ after(grammarAccess.getAbstractElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration 
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
(rule__PackageDeclaration__Group__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataType
entryRuleDataType 
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeAccess().getGroup()); }
(rule__DataType__Group__0)
{ after(grammarAccess.getDataTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntity
entryRuleEntity 
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntityAccess().getGroup()); }
(rule__Entity__Group__0)
{ after(grammarAccess.getEntityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature
entryRuleFeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getGroup()); }
(rule__Feature__Group__0)
{ after(grammarAccess.getFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructuralFeature
entryRuleStructuralFeature 
:
{ before(grammarAccess.getStructuralFeatureRule()); }
	 ruleStructuralFeature
{ after(grammarAccess.getStructuralFeatureRule()); } 
	 EOF 
;

// Rule StructuralFeature
ruleStructuralFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructuralFeatureAccess().getAlternatives()); }
(rule__StructuralFeature__Alternatives)
{ after(grammarAccess.getStructuralFeatureAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAccess().getGroup()); }
(rule__Reference__Group__0)
{ after(grammarAccess.getReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTypeRef
entryRuleTypeRef 
:
{ before(grammarAccess.getTypeRefRule()); }
	 ruleTypeRef
{ after(grammarAccess.getTypeRefRule()); } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeRefAccess().getGroup()); }
(rule__TypeRef__Group__0)
{ after(grammarAccess.getTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard 
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
(rule__QualifiedNameWithWildCard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getAlternatives()); }
(rule__Constraint__Alternatives)
{ after(grammarAccess.getConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolConstraint
entryRuleBoolConstraint 
:
{ before(grammarAccess.getBoolConstraintRule()); }
	 ruleBoolConstraint
{ after(grammarAccess.getBoolConstraintRule()); } 
	 EOF 
;

// Rule BoolConstraint
ruleBoolConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolConstraintAccess().getGroup()); }
(rule__BoolConstraint__Group__0)
{ after(grammarAccess.getBoolConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringConstraint
entryRuleStringConstraint 
:
{ before(grammarAccess.getStringConstraintRule()); }
	 ruleStringConstraint
{ after(grammarAccess.getStringConstraintRule()); } 
	 EOF 
;

// Rule StringConstraint
ruleStringConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup()); }
(rule__StringConstraint__Group__0)
{ after(grammarAccess.getStringConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateTimeConstraint
entryRuleDateTimeConstraint 
:
{ before(grammarAccess.getDateTimeConstraintRule()); }
	 ruleDateTimeConstraint
{ after(grammarAccess.getDateTimeConstraintRule()); } 
	 EOF 
;

// Rule DateTimeConstraint
ruleDateTimeConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getGroup()); }
(rule__DateTimeConstraint__Group__0)
{ after(grammarAccess.getDateTimeConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerConstraint
entryRuleIntegerConstraint 
:
{ before(grammarAccess.getIntegerConstraintRule()); }
	 ruleIntegerConstraint
{ after(grammarAccess.getIntegerConstraintRule()); } 
	 EOF 
;

// Rule IntegerConstraint
ruleIntegerConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerConstraintAccess().getGroup()); }
(rule__IntegerConstraint__Group__0)
{ after(grammarAccess.getIntegerConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecimalConstraint
entryRuleDecimalConstraint 
:
{ before(grammarAccess.getDecimalConstraintRule()); }
	 ruleDecimalConstraint
{ after(grammarAccess.getDecimalConstraintRule()); } 
	 EOF 
;

// Rule DecimalConstraint
ruleDecimalConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalConstraintAccess().getGroup()); }
(rule__DecimalConstraint__Group__0)
{ after(grammarAccess.getDecimalConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeration
entryRuleEnumeration 
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationAccess().getGroup()); }
(rule__Enumeration__Group__0)
{ after(grammarAccess.getEnumerationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral 
:
{ before(grammarAccess.getEnumerationLiteralRule()); }
	 ruleEnumerationLiteral
{ after(grammarAccess.getEnumerationLiteralRule()); } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getGroup()); }
(rule__EnumerationLiteral__Group__0)
{ after(grammarAccess.getEnumerationLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationConstraint
entryRuleEnumerationConstraint 
:
{ before(grammarAccess.getEnumerationConstraintRule()); }
	 ruleEnumerationConstraint
{ after(grammarAccess.getEnumerationConstraintRule()); } 
	 EOF 
;

// Rule EnumerationConstraint
ruleEnumerationConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getGroup()); }
(rule__EnumerationConstraint__Group__0)
{ after(grammarAccess.getEnumerationConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}








// Rule EnumUsage
ruleEnumUsage
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumUsageAccess().getAlternatives()); }
(rule__EnumUsage__Alternatives)
{ after(grammarAccess.getEnumUsageAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AbstractElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0()); }
	rulePackageDeclaration
{ after(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1()); }
	ruleType
{ after(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2()); }
	ruleImport
{ after(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getEntityParserRuleCall_0()); }
	ruleEntity
{ after(grammarAccess.getTypeAccess().getEntityParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_1()); }
	ruleDataType
{ after(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_2()); }
	ruleEnumeration
{ after(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructuralFeature__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructuralFeatureAccess().getAttributeParserRuleCall_0()); }
	ruleAttribute
{ after(grammarAccess.getStructuralFeatureAccess().getAttributeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStructuralFeatureAccess().getReferenceParserRuleCall_1()); }
	ruleReference
{ after(grammarAccess.getStructuralFeatureAccess().getReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getBoolConstraintParserRuleCall_0()); }
	ruleBoolConstraint
{ after(grammarAccess.getConstraintAccess().getBoolConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getStringConstraintParserRuleCall_1()); }
	ruleStringConstraint
{ after(grammarAccess.getConstraintAccess().getStringConstraintParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getDateTimeConstraintParserRuleCall_2()); }
	ruleDateTimeConstraint
{ after(grammarAccess.getConstraintAccess().getDateTimeConstraintParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getIntegerConstraintParserRuleCall_3()); }
	ruleIntegerConstraint
{ after(grammarAccess.getConstraintAccess().getIntegerConstraintParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getDecimalConstraintParserRuleCall_4()); }
	ruleDecimalConstraint
{ after(grammarAccess.getConstraintAccess().getDecimalConstraintParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getEnumerationConstraintParserRuleCall_5()); }
	ruleEnumerationConstraint
{ after(grammarAccess.getConstraintAccess().getEnumerationConstraintParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getDefaultValueAssignment_1_1_0()); }
(rule__BoolConstraint__DefaultValueAssignment_1_1_0)
{ after(grammarAccess.getBoolConstraintAccess().getDefaultValueAssignment_1_1_0()); }
)

    |(
{ before(grammarAccess.getBoolConstraintAccess().getFalseKeyword_1_1_1()); }

	'false' 

{ after(grammarAccess.getBoolConstraintAccess().getFalseKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__EnumUsage__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0()); }
(	'as String' 
)
{ after(grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEnumUsageAccess().getAsBooleanEnumLiteralDeclaration_1()); }
(	'as bool String' 
)
{ after(grammarAccess.getEnumUsageAccess().getAsBooleanEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_2()); }
(	'as Value' 
)
{ after(grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getEnumUsageAccess().getAsBoolValueEnumLiteralDeclaration_3()); }
(	'as bool Value' 
)
{ after(grammarAccess.getEnumUsageAccess().getAsBoolValueEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackageDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__1__Impl
	rule__PackageDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
(rule__PackageDeclaration__NameAssignment_1)
{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__2__Impl
	rule__PackageDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup_2()); }
(rule__PackageDeclaration__Group_2__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__3__Impl
	rule__PackageDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup_3()); }
(rule__PackageDeclaration__Group_3__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__4__Impl
	rule__PackageDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__5__Impl
	rule__PackageDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_5()); }
(rule__PackageDeclaration__ElementsAssignment_5)*
{ after(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__PackageDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group_2__0__Impl
	rule__PackageDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPrefixKeyword_2_0()); }

	'prefix' 

{ after(grammarAccess.getPackageDeclarationAccess().getPrefixKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPrefixAssignment_2_1()); }
(rule__PackageDeclaration__PrefixAssignment_2_1)
{ after(grammarAccess.getPackageDeclarationAccess().getPrefixAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackageDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group_3__0__Impl
	rule__PackageDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNamespaceKeyword_3_0()); }

	'namespace' 

{ after(grammarAccess.getPackageDeclarationAccess().getNamespaceKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNamespaceAssignment_3_1()); }
(rule__PackageDeclaration__NamespaceAssignment_3_1)
{ after(grammarAccess.getPackageDeclarationAccess().getNamespaceAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }

	'datatype' 

{ after(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
(rule__DataType__NameAssignment_1)
{ after(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Entity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getEntityKeyword_0()); }

	'entity' 

{ after(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getNameAssignment_1()); }
(rule__Entity__NameAssignment_1)
{ after(grammarAccess.getEntityAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getGroup_2()); }
(rule__Entity__Group_2__0)?
{ after(grammarAccess.getEntityAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__3__Impl
	rule__Entity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getDescriptionAssignment_3()); }
(rule__Entity__DescriptionAssignment_3)?
{ after(grammarAccess.getEntityAccess().getDescriptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__4__Impl
	rule__Entity__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__5__Impl
	rule__Entity__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getFeaturesAssignment_5()); }
(rule__Entity__FeaturesAssignment_5)*
{ after(grammarAccess.getEntityAccess().getFeaturesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Entity__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group_2__0__Impl
	rule__Entity__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getExtendsKeyword_2_0()); }

	'extends' 

{ after(grammarAccess.getEntityAccess().getExtendsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1()); }
(rule__Entity__SuperTypeAssignment_2_1)
{ after(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Feature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getStructuralFeatureParserRuleCall_0()); }
	ruleStructuralFeature
{ after(grammarAccess.getFeatureAccess().getStructuralFeatureParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getConstraintAssignment_1()); }
(rule__Feature__ConstraintAssignment_1)?
{ after(grammarAccess.getFeatureAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getDescriptionAssignment_2()); }
(rule__Feature__DescriptionAssignment_2)?
{ after(grammarAccess.getFeatureAccess().getDescriptionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
(rule__Attribute__NameAssignment_0)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getAttributeAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeAssignment_2()); }
(rule__Attribute__TypeAssignment_2)
{ after(grammarAccess.getAttributeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Reference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getRefKeyword_0()); }

	'ref' 

{ after(grammarAccess.getReferenceAccess().getRefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__1__Impl
	rule__Reference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getNameAssignment_1()); }
(rule__Reference__NameAssignment_1)
{ after(grammarAccess.getReferenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__2__Impl
	rule__Reference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getReferenceAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__3__Impl
	rule__Reference__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getTypeAssignment_3()); }
(rule__Reference__TypeAssignment_3)
{ after(grammarAccess.getReferenceAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getGroup_4()); }
(rule__Reference__Group_4__0)?
{ after(grammarAccess.getReferenceAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Reference__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group_4__0__Impl
	rule__Reference__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getOppositeKeyword_4_0()); }

	'opposite' 

{ after(grammarAccess.getReferenceAccess().getOppositeKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getOppositeAssignment_4_1()); }
(rule__Reference__OppositeAssignment_4_1)
{ after(grammarAccess.getReferenceAccess().getOppositeAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
(rule__Parameter__NameAssignment_0)
{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
(rule__Parameter__TypeAssignment_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeRef__Group__0__Impl
	rule__TypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getReferencedAssignment_0()); }
(rule__TypeRef__ReferencedAssignment_0)
{ after(grammarAccess.getTypeRefAccess().getReferencedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeRef__Group__1__Impl
	rule__TypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getMultiAssignment_1()); }
(rule__TypeRef__MultiAssignment_1)?
{ after(grammarAccess.getTypeRefAccess().getMultiAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getOptionAssignment_2()); }
(rule__TypeRef__OptionAssignment_2)?
{ after(grammarAccess.getTypeRefAccess().getOptionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedNameWithWildCard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__0__Impl
	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolConstraint__Group__0__Impl
	rule__BoolConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getConstraintAssignment_0()); }
(rule__BoolConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getBoolConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getGroup_1()); }
(rule__BoolConstraint__Group_1__0)?
{ after(grammarAccess.getBoolConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolConstraint__Group_1__0__Impl
	rule__BoolConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getHasDefaultAssignment_1_0()); }
(rule__BoolConstraint__HasDefaultAssignment_1_0)
{ after(grammarAccess.getBoolConstraintAccess().getHasDefaultAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getAlternatives_1_1()); }
(rule__BoolConstraint__Alternatives_1_1)
{ after(grammarAccess.getBoolConstraintAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__0__Impl
	rule__StringConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintAssignment_0()); }
(rule__StringConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getStringConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__1__Impl
	rule__StringConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup_1()); }
(rule__StringConstraint__Group_1__0)?
{ after(grammarAccess.getStringConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__2__Impl
	rule__StringConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup_2()); }
(rule__StringConstraint__Group_2__0)?
{ after(grammarAccess.getStringConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__3__Impl
	rule__StringConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup_3()); }
(rule__StringConstraint__Group_3__0)?
{ after(grammarAccess.getStringConstraintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__4__Impl
	rule__StringConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup_4()); }
(rule__StringConstraint__Group_4__0)?
{ after(grammarAccess.getStringConstraintAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup_5()); }
(rule__StringConstraint__Group_5__0)?
{ after(grammarAccess.getStringConstraintAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__StringConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_1__0__Impl
	rule__StringConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getHasDefaultAssignment_1_0()); }
(rule__StringConstraint__HasDefaultAssignment_1_0)
{ after(grammarAccess.getStringConstraintAccess().getHasDefaultAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getDefaultValueAssignment_1_1()); }
(rule__StringConstraint__DefaultValueAssignment_1_1)
{ after(grammarAccess.getStringConstraintAccess().getDefaultValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_2__0__Impl
	rule__StringConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getMinLenKeyword_2_0()); }

	'minLen' 

{ after(grammarAccess.getStringConstraintAccess().getMinLenKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getMinLengthAssignment_2_1()); }
(rule__StringConstraint__MinLengthAssignment_2_1)
{ after(grammarAccess.getStringConstraintAccess().getMinLengthAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringConstraint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_3__0__Impl
	rule__StringConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getMaxLenKeyword_3_0()); }

	'maxLen' 

{ after(grammarAccess.getStringConstraintAccess().getMaxLenKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getMaxLengthAssignment_3_1()); }
(rule__StringConstraint__MaxLengthAssignment_3_1)
{ after(grammarAccess.getStringConstraintAccess().getMaxLengthAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringConstraint__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_4__0__Impl
	rule__StringConstraint__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getFixeLenKeyword_4_0()); }

	'fixeLen' 

{ after(grammarAccess.getStringConstraintAccess().getFixeLenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getFixeLengthAssignment_4_1()); }
(rule__StringConstraint__FixeLengthAssignment_4_1)
{ after(grammarAccess.getStringConstraintAccess().getFixeLengthAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringConstraint__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_5__0__Impl
	rule__StringConstraint__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getRegexpKeyword_5_0()); }

	'regexp' 

{ after(grammarAccess.getStringConstraintAccess().getRegexpKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getRegularExpressionAssignment_5_1()); }
(rule__StringConstraint__RegularExpressionAssignment_5_1)
{ after(grammarAccess.getStringConstraintAccess().getRegularExpressionAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateTimeConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group__0__Impl
	rule__DateTimeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getConstraintAssignment_0()); }
(rule__DateTimeConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getDateTimeConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateTimeConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group__1__Impl
	rule__DateTimeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDataTypeAssignment_1()); }
(rule__DateTimeConstraint__DataTypeAssignment_1)
{ after(grammarAccess.getDateTimeConstraintAccess().getDataTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateTimeConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getGroup_2()); }
(rule__DateTimeConstraint__Group_2__0)?
{ after(grammarAccess.getDateTimeConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DateTimeConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group_2__0__Impl
	rule__DateTimeConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getHasDefaultAssignment_2_0()); }
(rule__DateTimeConstraint__HasDefaultAssignment_2_0)
{ after(grammarAccess.getDateTimeConstraintAccess().getHasDefaultAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateTimeConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDefaultValueAssignment_2_1()); }
(rule__DateTimeConstraint__DefaultValueAssignment_2_1)
{ after(grammarAccess.getDateTimeConstraintAccess().getDefaultValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group__0__Impl
	rule__IntegerConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getConstraintAssignment_0()); }
(rule__IntegerConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getIntegerConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group__1__Impl
	rule__IntegerConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getGroup_1()); }
(rule__IntegerConstraint__Group_1__0)?
{ after(grammarAccess.getIntegerConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group__2__Impl
	rule__IntegerConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getGroup_2()); }
(rule__IntegerConstraint__Group_2__0)?
{ after(grammarAccess.getIntegerConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group__3__Impl
	rule__IntegerConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getGroup_3()); }
(rule__IntegerConstraint__Group_3__0)?
{ after(grammarAccess.getIntegerConstraintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group__4__Impl
	rule__IntegerConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getGroup_4()); }
(rule__IntegerConstraint__Group_4__0)?
{ after(grammarAccess.getIntegerConstraintAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group__5__Impl
	rule__IntegerConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getGroup_5()); }
(rule__IntegerConstraint__Group_5__0)?
{ after(grammarAccess.getIntegerConstraintAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getGroup_6()); }
(rule__IntegerConstraint__Group_6__0)?
{ after(grammarAccess.getIntegerConstraintAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IntegerConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_1__0__Impl
	rule__IntegerConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getHasDefaultAssignment_1_0()); }
(rule__IntegerConstraint__HasDefaultAssignment_1_0)
{ after(grammarAccess.getIntegerConstraintAccess().getHasDefaultAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getDefaultValueAssignment_1_1()); }
(rule__IntegerConstraint__DefaultValueAssignment_1_1)
{ after(grammarAccess.getIntegerConstraintAccess().getDefaultValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_2__0__Impl
	rule__IntegerConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMinValKeyword_2_0()); }

	'minVal' 

{ after(grammarAccess.getIntegerConstraintAccess().getMinValKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMinValueAssignment_2_1()); }
(rule__IntegerConstraint__MinValueAssignment_2_1)
{ after(grammarAccess.getIntegerConstraintAccess().getMinValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerConstraint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_3__0__Impl
	rule__IntegerConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMaxValKeyword_3_0()); }

	'maxVal' 

{ after(grammarAccess.getIntegerConstraintAccess().getMaxValKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMaxValueAssignment_3_1()); }
(rule__IntegerConstraint__MaxValueAssignment_3_1)
{ after(grammarAccess.getIntegerConstraintAccess().getMaxValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerConstraint__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_4__0__Impl
	rule__IntegerConstraint__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMaxLenKeyword_4_0()); }

	'maxLen' 

{ after(grammarAccess.getIntegerConstraintAccess().getMaxLenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMaxLenAssignment_4_1()); }
(rule__IntegerConstraint__MaxLenAssignment_4_1)
{ after(grammarAccess.getIntegerConstraintAccess().getMaxLenAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerConstraint__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_5__0__Impl
	rule__IntegerConstraint__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getFixeLenKeyword_5_0()); }

	'fixeLen' 

{ after(grammarAccess.getIntegerConstraintAccess().getFixeLenKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getFixeLenAssignment_5_1()); }
(rule__IntegerConstraint__FixeLenAssignment_5_1)
{ after(grammarAccess.getIntegerConstraintAccess().getFixeLenAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerConstraint__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_6__0__Impl
	rule__IntegerConstraint__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getPaddleKeyword_6_0()); }

	'paddle' 

{ after(grammarAccess.getIntegerConstraintAccess().getPaddleKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstraint__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerConstraint__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getPaddleAssignment_6_1()); }
(rule__IntegerConstraint__PaddleAssignment_6_1)
{ after(grammarAccess.getIntegerConstraintAccess().getPaddleAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DecimalConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__0__Impl
	rule__DecimalConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintAssignment_0()); }
(rule__DecimalConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getDecimalConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__1__Impl
	rule__DecimalConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getGroup_1()); }
(rule__DecimalConstraint__Group_1__0)?
{ after(grammarAccess.getDecimalConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__2__Impl
	rule__DecimalConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getGroup_2()); }
(rule__DecimalConstraint__Group_2__0)?
{ after(grammarAccess.getDecimalConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__3__Impl
	rule__DecimalConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getGroup_3()); }
(rule__DecimalConstraint__Group_3__0)?
{ after(grammarAccess.getDecimalConstraintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__4__Impl
	rule__DecimalConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getGroup_4()); }
(rule__DecimalConstraint__Group_4__0)?
{ after(grammarAccess.getDecimalConstraintAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getGroup_5()); }
(rule__DecimalConstraint__Group_5__0)?
{ after(grammarAccess.getDecimalConstraintAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DecimalConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_1__0__Impl
	rule__DecimalConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMinValKeyword_1_0()); }

	'minVal' 

{ after(grammarAccess.getDecimalConstraintAccess().getMinValKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMinValueAssignment_1_1()); }
(rule__DecimalConstraint__MinValueAssignment_1_1)
{ after(grammarAccess.getDecimalConstraintAccess().getMinValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DecimalConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_2__0__Impl
	rule__DecimalConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMaxValKeyword_2_0()); }

	'maxVal' 

{ after(grammarAccess.getDecimalConstraintAccess().getMaxValKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMaxValueAssignment_2_1()); }
(rule__DecimalConstraint__MaxValueAssignment_2_1)
{ after(grammarAccess.getDecimalConstraintAccess().getMaxValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DecimalConstraint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_3__0__Impl
	rule__DecimalConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMaxLenKeyword_3_0()); }

	'maxLen' 

{ after(grammarAccess.getDecimalConstraintAccess().getMaxLenKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMaxLenAssignment_3_1()); }
(rule__DecimalConstraint__MaxLenAssignment_3_1)
{ after(grammarAccess.getDecimalConstraintAccess().getMaxLenAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DecimalConstraint__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_4__0__Impl
	rule__DecimalConstraint__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getFixeLenKeyword_4_0()); }

	'fixeLen' 

{ after(grammarAccess.getDecimalConstraintAccess().getFixeLenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getFixeLenAssignment_4_1()); }
(rule__DecimalConstraint__FixeLenAssignment_4_1)
{ after(grammarAccess.getDecimalConstraintAccess().getFixeLenAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DecimalConstraint__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_5__0__Impl
	rule__DecimalConstraint__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getPaddleKeyword_5_0()); }

	'paddle' 

{ after(grammarAccess.getDecimalConstraintAccess().getPaddleKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getPaddleAssignment_5_1()); }
(rule__DecimalConstraint__PaddleAssignment_5_1)
{ after(grammarAccess.getDecimalConstraintAccess().getPaddleAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enumeration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }

	'enumeration' 

{ after(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
(rule__Enumeration__NameAssignment_1)
{ after(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEnumerationAccess().getEnumerationLiteralsAssignment_3()); }
(rule__Enumeration__EnumerationLiteralsAssignment_3)
{ after(grammarAccess.getEnumerationAccess().getEnumerationLiteralsAssignment_3()); }
)
(
{ before(grammarAccess.getEnumerationAccess().getEnumerationLiteralsAssignment_3()); }
(rule__Enumeration__EnumerationLiteralsAssignment_3)*
{ after(grammarAccess.getEnumerationAccess().getEnumerationLiteralsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteral__Group__0__Impl
	rule__EnumerationLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_0()); }
(rule__EnumerationLiteral__NameAssignment_0)
{ after(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteral__Group__1__Impl
	rule__EnumerationLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getGroup_1()); }
(rule__EnumerationLiteral__Group_1__0)
{ after(grammarAccess.getEnumerationLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getEnumerationLiteralAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumerationLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteral__Group_1__0__Impl
	rule__EnumerationLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getEnumerationLiteralAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteral__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getPersistedValueAssignment_1_1()); }
(rule__EnumerationLiteral__PersistedValueAssignment_1_1)
{ after(grammarAccess.getEnumerationLiteralAccess().getPersistedValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group__0__Impl
	rule__EnumerationConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumerationConstraintAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group__1__Impl
	rule__EnumerationConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getUsageAssignment_1()); }
(rule__EnumerationConstraint__UsageAssignment_1)
{ after(grammarAccess.getEnumerationConstraintAccess().getUsageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getGroup_2()); }
(rule__EnumerationConstraint__Group_2__0)?
{ after(grammarAccess.getEnumerationConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumerationConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group_2__0__Impl
	rule__EnumerationConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getHasDefaultAssignment_2_0()); }
(rule__EnumerationConstraint__HasDefaultAssignment_2_0)
{ after(grammarAccess.getEnumerationConstraintAccess().getHasDefaultAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringAssignment_2_1()); }
(rule__EnumerationConstraint__DefaultValueAsStringAssignment_2_1)
{ after(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DomainModel__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getElementsAbstractElementParserRuleCall_0()); }
	ruleAbstractElement{ after(grammarAccess.getDomainModelAccess().getElementsAbstractElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildCard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__PrefixAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPrefixQualifiedNameParserRuleCall_2_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageDeclarationAccess().getPrefixQualifiedNameParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NamespaceAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNamespaceSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getPackageDeclarationAccess().getNamespaceSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__ElementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_5_0()); }
	ruleAbstractElement{ after(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__SuperTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_2_1_0()); }
(
{ before(grammarAccess.getEntityAccess().getSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getEntityAccess().getSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__DescriptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getEntityAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__FeaturesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getFeaturesFeatureParserRuleCall_5_0()); }
	ruleFeature{ after(grammarAccess.getEntityAccess().getFeaturesFeatureParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getConstraintConstraintParserRuleCall_1_0()); }
	ruleConstraint{ after(grammarAccess.getFeatureAccess().getConstraintConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__DescriptionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getFeatureAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getAttributeAccess().getTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getTypeTypeRefParserRuleCall_3_0()); }
	ruleTypeRef{ after(grammarAccess.getReferenceAccess().getTypeTypeRefParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__OppositeAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getOppositeReferenceCrossReference_4_1_0()); }
(
{ before(grammarAccess.getReferenceAccess().getOppositeReferenceIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getReferenceAccess().getOppositeReferenceIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getReferenceAccess().getOppositeReferenceCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeRefParserRuleCall_1_0()); }
	ruleTypeRef{ after(grammarAccess.getParameterAccess().getTypeTypeRefParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__ReferencedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getReferencedTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getTypeRefAccess().getReferencedTypeQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getTypeRefAccess().getReferencedTypeQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getTypeRefAccess().getReferencedTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__MultiAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getMultiAsteriskKeyword_1_0()); }
(
{ before(grammarAccess.getTypeRefAccess().getMultiAsteriskKeyword_1_0()); }

	'*' 

{ after(grammarAccess.getTypeRefAccess().getMultiAsteriskKeyword_1_0()); }
)

{ after(grammarAccess.getTypeRefAccess().getMultiAsteriskKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__OptionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getOptionQuestionMarkKeyword_2_0()); }
(
{ before(grammarAccess.getTypeRefAccess().getOptionQuestionMarkKeyword_2_0()); }

	'?' 

{ after(grammarAccess.getTypeRefAccess().getOptionQuestionMarkKeyword_2_0()); }
)

{ after(grammarAccess.getTypeRefAccess().getOptionQuestionMarkKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0_0()); }
(
{ before(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0_0()); }

	'boolean' 

{ after(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0_0()); }
)

{ after(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__HasDefaultAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
(
{ before(grammarAccess.getBoolConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }

	'default' 

{ after(grammarAccess.getBoolConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
)

{ after(grammarAccess.getBoolConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__DefaultValueAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getDefaultValueTrueKeyword_1_1_0_0()); }
(
{ before(grammarAccess.getBoolConstraintAccess().getDefaultValueTrueKeyword_1_1_0_0()); }

	'true' 

{ after(grammarAccess.getBoolConstraintAccess().getDefaultValueTrueKeyword_1_1_0_0()); }
)

{ after(grammarAccess.getBoolConstraintAccess().getDefaultValueTrueKeyword_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }

	'string' 

{ after(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }
)

{ after(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__HasDefaultAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
(
{ before(grammarAccess.getStringConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }

	'default' 

{ after(grammarAccess.getStringConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
)

{ after(grammarAccess.getStringConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__DefaultValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__MinLengthAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getMinLengthINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getStringConstraintAccess().getMinLengthINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__MaxLengthAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getMaxLengthINTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getStringConstraintAccess().getMaxLengthINTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__FixeLengthAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getFixeLengthINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getStringConstraintAccess().getFixeLengthINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__RegularExpressionAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getRegularExpressionSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringConstraintAccess().getRegularExpressionSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }
(
{ before(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }

	'datetime' 

{ after(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }
)

{ after(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__DataTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__HasDefaultAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
(
{ before(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }

	'default' 

{ after(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
)

{ after(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__DefaultValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getDateTimeConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getConstraintIntegerKeyword_0_0()); }
(
{ before(grammarAccess.getIntegerConstraintAccess().getConstraintIntegerKeyword_0_0()); }

	'integer' 

{ after(grammarAccess.getIntegerConstraintAccess().getConstraintIntegerKeyword_0_0()); }
)

{ after(grammarAccess.getIntegerConstraintAccess().getConstraintIntegerKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__HasDefaultAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
(
{ before(grammarAccess.getIntegerConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }

	'default' 

{ after(grammarAccess.getIntegerConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
)

{ after(grammarAccess.getIntegerConstraintAccess().getHasDefaultDefaultKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__DefaultValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getDefaultValueINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getIntegerConstraintAccess().getDefaultValueINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__MinValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMinValueINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getIntegerConstraintAccess().getMinValueINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__MaxValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMaxValueINTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getIntegerConstraintAccess().getMaxValueINTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__MaxLenAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getMaxLenINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getIntegerConstraintAccess().getMaxLenINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__FixeLenAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getFixeLenINTTerminalRuleCall_5_1_0()); }
	RULE_INT{ after(grammarAccess.getIntegerConstraintAccess().getFixeLenINTTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstraint__PaddleAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerConstraintAccess().getPaddleSTRINGTerminalRuleCall_6_1_0()); }
	RULE_STRING{ after(grammarAccess.getIntegerConstraintAccess().getPaddleSTRINGTerminalRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }

	'decimal' 

{ after(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }
)

{ after(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__MinValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMinValueINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getDecimalConstraintAccess().getMinValueINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__MaxValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMaxValueINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getDecimalConstraintAccess().getMaxValueINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__MaxLenAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getMaxLenINTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getDecimalConstraintAccess().getMaxLenINTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__FixeLenAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getFixeLenINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getDecimalConstraintAccess().getFixeLenINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__PaddleAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getPaddleSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getDecimalConstraintAccess().getPaddleSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__EnumerationLiteralsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_0()); }
	ruleEnumerationLiteral{ after(grammarAccess.getEnumerationAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getEnumerationLiteralAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__PersistedValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getPersistedValueINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getEnumerationLiteralAccess().getPersistedValueINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__UsageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getUsageEnumUsageEnumRuleCall_1_0()); }
	ruleEnumUsage{ after(grammarAccess.getEnumerationConstraintAccess().getUsageEnumUsageEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__HasDefaultAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
(
{ before(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }

	'default' 

{ after(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
)

{ after(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__DefaultValueAsStringAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


