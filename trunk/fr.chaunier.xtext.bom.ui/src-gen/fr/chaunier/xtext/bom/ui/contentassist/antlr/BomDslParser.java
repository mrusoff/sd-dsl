/*
* generated by Xtext
*/
package fr.chaunier.xtext.bom.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.chaunier.xtext.bom.services.BomDslGrammarAccess;

public class BomDslParser extends AbstractContentAssistParser {
	
	@Inject
	private BomDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.chaunier.xtext.bom.ui.contentassist.antlr.internal.InternalBomDslParser createParser() {
		fr.chaunier.xtext.bom.ui.contentassist.antlr.internal.InternalBomDslParser result = new fr.chaunier.xtext.bom.ui.contentassist.antlr.internal.InternalBomDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getStructuralFeatureAccess().getAlternatives(), "rule__StructuralFeature__Alternatives");
					put(grammarAccess.getTypedElementAccess().getAlternatives(), "rule__TypedElement__Alternatives");
					put(grammarAccess.getConstraintAccess().getAlternatives(), "rule__Constraint__Alternatives");
					put(grammarAccess.getBoolConstraintAccess().getAlternatives_1_1(), "rule__BoolConstraint__Alternatives_1_1");
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getDateTimeAccuracyAccess().getAlternatives(), "rule__DateTimeAccuracy__Alternatives");
					put(grammarAccess.getEnumUsageAccess().getAlternatives(), "rule__EnumUsage__Alternatives");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup_2(), "rule__PackageDeclaration__Group_2__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup_3(), "rule__PackageDeclaration__Group_3__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup_4(), "rule__Reference__Group_4__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getTypeRefAccess().getGroup(), "rule__TypeRef__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getBoolConstraintAccess().getGroup(), "rule__BoolConstraint__Group__0");
					put(grammarAccess.getBoolConstraintAccess().getGroup_1(), "rule__BoolConstraint__Group_1__0");
					put(grammarAccess.getStringConstraintAccess().getGroup(), "rule__StringConstraint__Group__0");
					put(grammarAccess.getStringConstraintAccess().getGroup_1(), "rule__StringConstraint__Group_1__0");
					put(grammarAccess.getStringConstraintAccess().getGroup_2(), "rule__StringConstraint__Group_2__0");
					put(grammarAccess.getStringConstraintAccess().getGroup_3(), "rule__StringConstraint__Group_3__0");
					put(grammarAccess.getStringConstraintAccess().getGroup_4(), "rule__StringConstraint__Group_4__0");
					put(grammarAccess.getStringConstraintAccess().getGroup_5(), "rule__StringConstraint__Group_5__0");
					put(grammarAccess.getDateTimeConstraintAccess().getGroup(), "rule__DateTimeConstraint__Group__0");
					put(grammarAccess.getDateTimeConstraintAccess().getGroup_2(), "rule__DateTimeConstraint__Group_2__0");
					put(grammarAccess.getIntegerConstraintAccess().getGroup(), "rule__IntegerConstraint__Group__0");
					put(grammarAccess.getIntegerConstraintAccess().getGroup_1(), "rule__IntegerConstraint__Group_1__0");
					put(grammarAccess.getIntegerConstraintAccess().getGroup_2(), "rule__IntegerConstraint__Group_2__0");
					put(grammarAccess.getIntegerConstraintAccess().getGroup_3(), "rule__IntegerConstraint__Group_3__0");
					put(grammarAccess.getIntegerConstraintAccess().getGroup_4(), "rule__IntegerConstraint__Group_4__0");
					put(grammarAccess.getIntegerConstraintAccess().getGroup_5(), "rule__IntegerConstraint__Group_5__0");
					put(grammarAccess.getIntegerConstraintAccess().getGroup_6(), "rule__IntegerConstraint__Group_6__0");
					put(grammarAccess.getDecimalConstraintAccess().getGroup(), "rule__DecimalConstraint__Group__0");
					put(grammarAccess.getDecimalConstraintAccess().getGroup_1(), "rule__DecimalConstraint__Group_1__0");
					put(grammarAccess.getDecimalConstraintAccess().getGroup_2(), "rule__DecimalConstraint__Group_2__0");
					put(grammarAccess.getDecimalConstraintAccess().getGroup_3(), "rule__DecimalConstraint__Group_3__0");
					put(grammarAccess.getDecimalConstraintAccess().getGroup_4(), "rule__DecimalConstraint__Group_4__0");
					put(grammarAccess.getDecimalConstraintAccess().getGroup_5(), "rule__DecimalConstraint__Group_5__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationLiteralAccess().getGroup(), "rule__EnumerationLiteral__Group__0");
					put(grammarAccess.getEnumerationLiteralAccess().getGroup_1(), "rule__EnumerationLiteral__Group_1__0");
					put(grammarAccess.getEnumerationConstraintAccess().getGroup(), "rule__EnumerationConstraint__Group__0");
					put(grammarAccess.getEnumerationConstraintAccess().getGroup_2(), "rule__EnumerationConstraint__Group_2__0");
					put(grammarAccess.getDomainModelAccess().getElementsAssignment(), "rule__DomainModel__ElementsAssignment");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getPrefixAssignment_2_1(), "rule__PackageDeclaration__PrefixAssignment_2_1");
					put(grammarAccess.getPackageDeclarationAccess().getNamespaceAssignment_3_1(), "rule__PackageDeclaration__NamespaceAssignment_3_1");
					put(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_5(), "rule__PackageDeclaration__ElementsAssignment_5");
					put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1(), "rule__Entity__SuperTypeAssignment_2_1");
					put(grammarAccess.getEntityAccess().getDescriptionAssignment_3(), "rule__Entity__DescriptionAssignment_3");
					put(grammarAccess.getEntityAccess().getFeaturesAssignment_5(), "rule__Entity__FeaturesAssignment_5");
					put(grammarAccess.getFeatureAccess().getConstraintAssignment_1(), "rule__Feature__ConstraintAssignment_1");
					put(grammarAccess.getFeatureAccess().getDescriptionAssignment_2(), "rule__Feature__DescriptionAssignment_2");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getReferenceAccess().getNameAssignment_1(), "rule__Reference__NameAssignment_1");
					put(grammarAccess.getReferenceAccess().getTypeAssignment_3(), "rule__Reference__TypeAssignment_3");
					put(grammarAccess.getReferenceAccess().getOppositeAssignment_4_1(), "rule__Reference__OppositeAssignment_4_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1(), "rule__Parameter__TypeAssignment_1");
					put(grammarAccess.getTypeRefAccess().getReferencedAssignment_0(), "rule__TypeRef__ReferencedAssignment_0");
					put(grammarAccess.getTypeRefAccess().getMultiAssignment_1(), "rule__TypeRef__MultiAssignment_1");
					put(grammarAccess.getTypeRefAccess().getOptionAssignment_2(), "rule__TypeRef__OptionAssignment_2");
					put(grammarAccess.getBoolConstraintAccess().getConstraintAssignment_0(), "rule__BoolConstraint__ConstraintAssignment_0");
					put(grammarAccess.getBoolConstraintAccess().getHasDefaultAssignment_1_0(), "rule__BoolConstraint__HasDefaultAssignment_1_0");
					put(grammarAccess.getBoolConstraintAccess().getDefaultValueAssignment_1_1_0(), "rule__BoolConstraint__DefaultValueAssignment_1_1_0");
					put(grammarAccess.getStringConstraintAccess().getConstraintAssignment_0(), "rule__StringConstraint__ConstraintAssignment_0");
					put(grammarAccess.getStringConstraintAccess().getHasDefaultAssignment_1_0(), "rule__StringConstraint__HasDefaultAssignment_1_0");
					put(grammarAccess.getStringConstraintAccess().getDefaultValueAssignment_1_1(), "rule__StringConstraint__DefaultValueAssignment_1_1");
					put(grammarAccess.getStringConstraintAccess().getMinLengthAssignment_2_1(), "rule__StringConstraint__MinLengthAssignment_2_1");
					put(grammarAccess.getStringConstraintAccess().getMaxLengthAssignment_3_1(), "rule__StringConstraint__MaxLengthAssignment_3_1");
					put(grammarAccess.getStringConstraintAccess().getFixeLengthAssignment_4_1(), "rule__StringConstraint__FixeLengthAssignment_4_1");
					put(grammarAccess.getStringConstraintAccess().getRegularExpressionAssignment_5_1(), "rule__StringConstraint__RegularExpressionAssignment_5_1");
					put(grammarAccess.getDateTimeConstraintAccess().getConstraintAssignment_0(), "rule__DateTimeConstraint__ConstraintAssignment_0");
					put(grammarAccess.getDateTimeConstraintAccess().getDataTypeAssignment_1(), "rule__DateTimeConstraint__DataTypeAssignment_1");
					put(grammarAccess.getDateTimeConstraintAccess().getHasDefaultAssignment_2_0(), "rule__DateTimeConstraint__HasDefaultAssignment_2_0");
					put(grammarAccess.getDateTimeConstraintAccess().getDefaultValueAssignment_2_1(), "rule__DateTimeConstraint__DefaultValueAssignment_2_1");
					put(grammarAccess.getIntegerConstraintAccess().getConstraintAssignment_0(), "rule__IntegerConstraint__ConstraintAssignment_0");
					put(grammarAccess.getIntegerConstraintAccess().getHasDefaultAssignment_1_0(), "rule__IntegerConstraint__HasDefaultAssignment_1_0");
					put(grammarAccess.getIntegerConstraintAccess().getDefaultValueAssignment_1_1(), "rule__IntegerConstraint__DefaultValueAssignment_1_1");
					put(grammarAccess.getIntegerConstraintAccess().getMinValueAssignment_2_1(), "rule__IntegerConstraint__MinValueAssignment_2_1");
					put(grammarAccess.getIntegerConstraintAccess().getMaxValueAssignment_3_1(), "rule__IntegerConstraint__MaxValueAssignment_3_1");
					put(grammarAccess.getIntegerConstraintAccess().getMaxLenAssignment_4_1(), "rule__IntegerConstraint__MaxLenAssignment_4_1");
					put(grammarAccess.getIntegerConstraintAccess().getFixeLenAssignment_5_1(), "rule__IntegerConstraint__FixeLenAssignment_5_1");
					put(grammarAccess.getIntegerConstraintAccess().getPaddleAssignment_6_1(), "rule__IntegerConstraint__PaddleAssignment_6_1");
					put(grammarAccess.getDecimalConstraintAccess().getConstraintAssignment_0(), "rule__DecimalConstraint__ConstraintAssignment_0");
					put(grammarAccess.getDecimalConstraintAccess().getMinValueAssignment_1_1(), "rule__DecimalConstraint__MinValueAssignment_1_1");
					put(grammarAccess.getDecimalConstraintAccess().getMaxValueAssignment_2_1(), "rule__DecimalConstraint__MaxValueAssignment_2_1");
					put(grammarAccess.getDecimalConstraintAccess().getMaxLenAssignment_3_1(), "rule__DecimalConstraint__MaxLenAssignment_3_1");
					put(grammarAccess.getDecimalConstraintAccess().getFixeLenAssignment_4_1(), "rule__DecimalConstraint__FixeLenAssignment_4_1");
					put(grammarAccess.getDecimalConstraintAccess().getPaddleAssignment_5_1(), "rule__DecimalConstraint__PaddleAssignment_5_1");
					put(grammarAccess.getEnumerationAccess().getNameAssignment_1(), "rule__Enumeration__NameAssignment_1");
					put(grammarAccess.getEnumerationAccess().getEnumerationLiteralsAssignment_3(), "rule__Enumeration__EnumerationLiteralsAssignment_3");
					put(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_0(), "rule__EnumerationLiteral__NameAssignment_0");
					put(grammarAccess.getEnumerationLiteralAccess().getPersistedValueAssignment_1_1(), "rule__EnumerationLiteral__PersistedValueAssignment_1_1");
					put(grammarAccess.getEnumerationConstraintAccess().getUsageAssignment_1(), "rule__EnumerationConstraint__UsageAssignment_1");
					put(grammarAccess.getEnumerationConstraintAccess().getHasDefaultAssignment_2_0(), "rule__EnumerationConstraint__HasDefaultAssignment_2_0");
					put(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringAssignment_2_1(), "rule__EnumerationConstraint__DefaultValueAsStringAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.chaunier.xtext.bom.ui.contentassist.antlr.internal.InternalBomDslParser typedParser = (fr.chaunier.xtext.bom.ui.contentassist.antlr.internal.InternalBomDslParser) parser;
			typedParser.entryRuleDomainModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BomDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BomDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
