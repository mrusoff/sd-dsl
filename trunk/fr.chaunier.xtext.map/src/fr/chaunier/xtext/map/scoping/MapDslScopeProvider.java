/*
 * generated by Xtext
 */
package fr.chaunier.xtext.map.scoping;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import fr.chaunier.xtext.bom.bomDsl.Entity;
import fr.chaunier.xtext.bom.bomDsl.Feature;
import fr.chaunier.xtext.map.mapDsl.FeatureMap;
import fr.chaunier.xtext.map.mapDsl.Mapping;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class MapDslScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_FeatureMap_leftField(FeatureMap featureMap, EReference ref) {
//		System.out.println("Lfamp "+ featureMap);
//		System.out.println("Lref " +ref);
		Mapping mapping = (Mapping)featureMap.eContainer() ;
		EList<Feature> features = new BasicEList<Feature>() ;
		features.addAll(mapping.getLeftClass().getFeatures()) ;
		features.addAll(mapping.getLeftClass().getSuperType().getFeatures());
		System.out.println("ELeftClass " + mapping.getLeftClass().getName() + " " + features.size());
		return Scopes.scopeFor(features);
	}
	
	public IScope scope_FeatureMap_rightField(FeatureMap featureMap, EReference ref) {
//		System.out.println("Rfamp "+ featureMap);
//		System.out.println("Rref " +ref);
		Mapping mapping = (Mapping)featureMap.eContainer() ;
		EList<Feature> features = new BasicEList<Feature>() ;
		features.addAll(mapping.getRightClass().getFeatures()) ;
		features.addAll(mapping.getRightClass().getSuperType().getFeatures());
		System.out.println("ERightClass " + mapping.getRightClass().getName() + " " +features.size());
		return Scopes.scopeFor(features);
	}

	public IScope scope_FeatureMap_setLeftField(FeatureMap featureMap, EReference ref) {
//		System.out.println("Rfamp "+ featureMap);
//		System.out.println("Rref " +ref);
		Mapping mapping = (Mapping)featureMap.eContainer() ;
		EList<Feature> features = new BasicEList<Feature>() ;
		features.addAll( mapping.getLeftClass().getFeatures()) ;
//		EList<Feature> features = mapping.getLeftClass().getFeatures() ;
		features.addAll(mapping.getLeftClass().getSuperType().getFeatures());
		System.out.println("SELeftClass " +features.size());
		return Scopes.scopeFor(features);
	}
	public IScope scope_FeatureMap_setRightField(FeatureMap featureMap, EReference ref) {
//		System.out.println("Rfamp "+ featureMap);
//		System.out.println("Rref " +ref);
		Mapping mapping = (Mapping)featureMap.eContainer() ;
		EList<Feature> features = new BasicEList<Feature>() ;
		features.addAll(mapping.getRightClass().getFeatures()) ;
		features.addAll(mapping.getRightClass().getSuperType().getFeatures());
		System.out.println("SERightClass " +features.size());
		return Scopes.scopeFor(features);
	}

	
	public IScope scope_FeatureMap_ignoreLeftField(FeatureMap featureMap, EReference ref) {
//		System.out.println("Rfamp "+ featureMap);
//		System.out.println("Rref " +ref);
		Mapping mapping = (Mapping)featureMap.eContainer() ;
		EList<Feature> features = new BasicEList<Feature>() ;
		features.addAll(mapping.getLeftClass().getFeatures()) ;
		features.addAll(mapping.getLeftClass().getSuperType().getFeatures());
		System.out.println("ILeftClass " +features.size());
		return Scopes.scopeFor(features);
	}
	
	static EList<Feature> getAllInheritedFeatures(EList<Feature> features,Entity entity) {
//		EList<Feature> features = new BasicEList<Feature>() ;
		if (entity.getSuperType() !=null) {
			features.addAll(entity.getSuperType().getFeatures());
			getAllInheritedFeatures(features,entity.getSuperType());
		}
			
		return null ;	
	}
	
}
