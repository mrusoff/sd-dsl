/*
* generated by Xtext
*/

package fr.chaunier.xtext.map.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MapDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDocumentationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_2_0 = (RuleCall)cDocumentationAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Assignment cFuctionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFuctionsFuctionParserRuleCall_5_0 = (RuleCall)cFuctionsAssignment_5.eContents().get(0);
		private final Assignment cMappingModulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMappingModulesMappingModuleParserRuleCall_6_0 = (RuleCall)cMappingModulesAssignment_6.eContents().get(0);
		private final Assignment cRootsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRootsRootModuleParserRuleCall_7_0 = (RuleCall)cRootsAssignment_7.eContents().get(0);
		
		//Model:
		//	"model" name=ID documentation=STRING? imports+=Import* rules+=Rule* fuctions+=Fuction* mappingModules+=MappingModule*
		//	roots=RootModule;
		public ParserRule getRule() { return rule; }

		//"model" name=ID documentation=STRING? imports+=Import* rules+=Rule* fuctions+=Fuction* mappingModules+=MappingModule*
		//roots=RootModule
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//documentation=STRING?
		public Assignment getDocumentationAssignment_2() { return cDocumentationAssignment_2; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_2_0() { return cDocumentationSTRINGTerminalRuleCall_2_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0() { return cRulesRuleParserRuleCall_4_0; }

		//fuctions+=Fuction*
		public Assignment getFuctionsAssignment_5() { return cFuctionsAssignment_5; }

		//Fuction
		public RuleCall getFuctionsFuctionParserRuleCall_5_0() { return cFuctionsFuctionParserRuleCall_5_0; }

		//mappingModules+=MappingModule*
		public Assignment getMappingModulesAssignment_6() { return cMappingModulesAssignment_6; }

		//MappingModule
		public RuleCall getMappingModulesMappingModuleParserRuleCall_6_0() { return cMappingModulesMappingModuleParserRuleCall_6_0; }

		//roots=RootModule
		public Assignment getRootsAssignment_7() { return cRootsAssignment_7; }

		//RootModule
		public RuleCall getRootsRootModuleParserRuleCall_7_0() { return cRootsRootModuleParserRuleCall_7_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class RootModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRootRefMappingModuleCrossReference_1_0 = (CrossReference)cRootRefAssignment_1.eContents().get(0);
		private final RuleCall cRootRefMappingModuleIDTerminalRuleCall_1_0_1 = (RuleCall)cRootRefMappingModuleCrossReference_1_0.eContents().get(1);
		private final Assignment cDocumentationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_2_0 = (RuleCall)cDocumentationAssignment_2.eContents().get(0);
		
		//RootModule:
		//	"root" rootRef=[MappingModule] documentation=STRING?;
		public ParserRule getRule() { return rule; }

		//"root" rootRef=[MappingModule] documentation=STRING?
		public Group getGroup() { return cGroup; }

		//"root"
		public Keyword getRootKeyword_0() { return cRootKeyword_0; }

		//rootRef=[MappingModule]
		public Assignment getRootRefAssignment_1() { return cRootRefAssignment_1; }

		//[MappingModule]
		public CrossReference getRootRefMappingModuleCrossReference_1_0() { return cRootRefMappingModuleCrossReference_1_0; }

		//ID
		public RuleCall getRootRefMappingModuleIDTerminalRuleCall_1_0_1() { return cRootRefMappingModuleIDTerminalRuleCall_1_0_1; }

		//documentation=STRING?
		public Assignment getDocumentationAssignment_2() { return cDocumentationAssignment_2; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_2_0() { return cDocumentationSTRINGTerminalRuleCall_2_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOpKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperationSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cOperationAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cArgsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		
		////(documentation=STRING)?
		//Rule:
		//	"define rule" name=ID ("op" operation=STRING)? ("args" args+=STRING*)?;
		public ParserRule getRule() { return rule; }

		//"define rule" name=ID ("op" operation=STRING)? ("args" args+=STRING*)?
		public Group getGroup() { return cGroup; }

		//"define rule"
		public Keyword getDefineRuleKeyword_0() { return cDefineRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("op" operation=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"op"
		public Keyword getOpKeyword_2_0() { return cOpKeyword_2_0; }

		//operation=STRING
		public Assignment getOperationAssignment_2_1() { return cOperationAssignment_2_1; }

		//STRING
		public RuleCall getOperationSTRINGTerminalRuleCall_2_1_0() { return cOperationSTRINGTerminalRuleCall_2_1_0; }

		//("args" args+=STRING*)?
		public Group getGroup_3() { return cGroup_3; }

		//"args"
		public Keyword getArgsKeyword_3_0() { return cArgsKeyword_3_0; }

		//args+=STRING*
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//STRING
		public RuleCall getArgsSTRINGTerminalRuleCall_3_1_0() { return cArgsSTRINGTerminalRuleCall_3_1_0; }
	}

	public class FuctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fuction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineFonctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInFuctionInParserRuleCall_2_0 = (RuleCall)cInAssignment_2.eContents().get(0);
		private final Assignment cOutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutFuctionOutParserRuleCall_3_0 = (RuleCall)cOutAssignment_3.eContents().get(0);
		private final Assignment cDocumentationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_4_0 = (RuleCall)cDocumentationAssignment_4.eContents().get(0);
		
		//Fuction:
		//	"define fonction" name=ID in+=FuctionIn* out+=FuctionOut* documentation=STRING?;
		public ParserRule getRule() { return rule; }

		//"define fonction" name=ID in+=FuctionIn* out+=FuctionOut* documentation=STRING?
		public Group getGroup() { return cGroup; }

		//"define fonction"
		public Keyword getDefineFonctionKeyword_0() { return cDefineFonctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//in+=FuctionIn*
		public Assignment getInAssignment_2() { return cInAssignment_2; }

		//FuctionIn
		public RuleCall getInFuctionInParserRuleCall_2_0() { return cInFuctionInParserRuleCall_2_0; }

		//out+=FuctionOut*
		public Assignment getOutAssignment_3() { return cOutAssignment_3; }

		//FuctionOut
		public RuleCall getOutFuctionOutParserRuleCall_3_0() { return cOutFuctionOutParserRuleCall_3_0; }

		//documentation=STRING?
		public Assignment getDocumentationAssignment_4() { return cDocumentationAssignment_4; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_4_0() { return cDocumentationSTRINGTerminalRuleCall_4_0; }
	}

	public class FuctionInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuctionIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInEntityEntityCrossReference_1_0 = (CrossReference)cInEntityAssignment_1.eContents().get(0);
		private final RuleCall cInEntityEntityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cInEntityEntityCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInAttributeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cInAttributeAttributeCrossReference_3_0_0 = (CrossReference)cInAttributeAssignment_3_0.eContents().get(0);
		private final RuleCall cInAttributeAttributeIDTerminalRuleCall_3_0_0_1 = (RuleCall)cInAttributeAttributeCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Action cNestedInTransformationParameterTargetAction_3_1_0 = (Action)cGroup_3_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cInRefAttributeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cInRefAttributeAttributeCrossReference_3_1_2_0 = (CrossReference)cInRefAttributeAssignment_3_1_2.eContents().get(0);
		private final RuleCall cInRefAttributeAttributeIDTerminalRuleCall_3_1_2_0_1 = (RuleCall)cInRefAttributeAttributeCrossReference_3_1_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FuctionIn:
		//	"in" inEntity=[mm::Entity|QualifiedName] "[" (inAttribute=[mm::Attribute]
		//	({NestedInTransformationParameter.target=current} "." inRefAttribute=[mm::Attribute])*)? "]";
		public ParserRule getRule() { return rule; }

		//"in" inEntity=[mm::Entity|QualifiedName] "[" (inAttribute=[mm::Attribute]
		//({NestedInTransformationParameter.target=current} "." inRefAttribute=[mm::Attribute])*)? "]"
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//inEntity=[mm::Entity|QualifiedName]
		public Assignment getInEntityAssignment_1() { return cInEntityAssignment_1; }

		//[mm::Entity|QualifiedName]
		public CrossReference getInEntityEntityCrossReference_1_0() { return cInEntityEntityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getInEntityEntityQualifiedNameParserRuleCall_1_0_1() { return cInEntityEntityQualifiedNameParserRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(inAttribute=[mm::Attribute] ({NestedInTransformationParameter.target=current} "." inRefAttribute=[mm::Attribute])*)?
		public Group getGroup_3() { return cGroup_3; }

		//inAttribute=[mm::Attribute]
		public Assignment getInAttributeAssignment_3_0() { return cInAttributeAssignment_3_0; }

		//[mm::Attribute]
		public CrossReference getInAttributeAttributeCrossReference_3_0_0() { return cInAttributeAttributeCrossReference_3_0_0; }

		//ID
		public RuleCall getInAttributeAttributeIDTerminalRuleCall_3_0_0_1() { return cInAttributeAttributeIDTerminalRuleCall_3_0_0_1; }

		//({NestedInTransformationParameter.target=current} "." inRefAttribute=[mm::Attribute])*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//{NestedInTransformationParameter.target=current}
		public Action getNestedInTransformationParameterTargetAction_3_1_0() { return cNestedInTransformationParameterTargetAction_3_1_0; }

		//"."
		public Keyword getFullStopKeyword_3_1_1() { return cFullStopKeyword_3_1_1; }

		//inRefAttribute=[mm::Attribute]
		public Assignment getInRefAttributeAssignment_3_1_2() { return cInRefAttributeAssignment_3_1_2; }

		//[mm::Attribute]
		public CrossReference getInRefAttributeAttributeCrossReference_3_1_2_0() { return cInRefAttributeAttributeCrossReference_3_1_2_0; }

		//ID
		public RuleCall getInRefAttributeAttributeIDTerminalRuleCall_3_1_2_0_1() { return cInRefAttributeAttributeIDTerminalRuleCall_3_1_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class FuctionOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuctionOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOutEntityEntityCrossReference_1_0 = (CrossReference)cOutEntityAssignment_1.eContents().get(0);
		private final RuleCall cOutEntityEntityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cOutEntityEntityCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOutAttributeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cOutAttributeAttributeCrossReference_3_0_0 = (CrossReference)cOutAttributeAssignment_3_0.eContents().get(0);
		private final RuleCall cOutAttributeAttributeIDTerminalRuleCall_3_0_0_1 = (RuleCall)cOutAttributeAttributeCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Action cNestedOutTransformationParameterTargetAction_3_1_0 = (Action)cGroup_3_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cOutRefAttributeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cOutRefAttributeAttributeCrossReference_3_1_2_0 = (CrossReference)cOutRefAttributeAssignment_3_1_2.eContents().get(0);
		private final RuleCall cOutRefAttributeAttributeIDTerminalRuleCall_3_1_2_0_1 = (RuleCall)cOutRefAttributeAttributeCrossReference_3_1_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FuctionOut:
		//	"out" outEntity=[mm::Entity|QualifiedName] "[" (outAttribute=[mm::Attribute]
		//	({NestedOutTransformationParameter.target=current} "." outRefAttribute=[mm::Attribute])*)? "]";
		public ParserRule getRule() { return rule; }

		//"out" outEntity=[mm::Entity|QualifiedName] "[" (outAttribute=[mm::Attribute]
		//({NestedOutTransformationParameter.target=current} "." outRefAttribute=[mm::Attribute])*)? "]"
		public Group getGroup() { return cGroup; }

		//"out"
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }

		//outEntity=[mm::Entity|QualifiedName]
		public Assignment getOutEntityAssignment_1() { return cOutEntityAssignment_1; }

		//[mm::Entity|QualifiedName]
		public CrossReference getOutEntityEntityCrossReference_1_0() { return cOutEntityEntityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getOutEntityEntityQualifiedNameParserRuleCall_1_0_1() { return cOutEntityEntityQualifiedNameParserRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(outAttribute=[mm::Attribute] ({NestedOutTransformationParameter.target=current} "." outRefAttribute=[mm::Attribute])*)?
		public Group getGroup_3() { return cGroup_3; }

		//outAttribute=[mm::Attribute]
		public Assignment getOutAttributeAssignment_3_0() { return cOutAttributeAssignment_3_0; }

		//[mm::Attribute]
		public CrossReference getOutAttributeAttributeCrossReference_3_0_0() { return cOutAttributeAttributeCrossReference_3_0_0; }

		//ID
		public RuleCall getOutAttributeAttributeIDTerminalRuleCall_3_0_0_1() { return cOutAttributeAttributeIDTerminalRuleCall_3_0_0_1; }

		//({NestedOutTransformationParameter.target=current} "." outRefAttribute=[mm::Attribute])*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//{NestedOutTransformationParameter.target=current}
		public Action getNestedOutTransformationParameterTargetAction_3_1_0() { return cNestedOutTransformationParameterTargetAction_3_1_0; }

		//"."
		public Keyword getFullStopKeyword_3_1_1() { return cFullStopKeyword_3_1_1; }

		//outRefAttribute=[mm::Attribute]
		public Assignment getOutRefAttributeAssignment_3_1_2() { return cOutRefAttributeAssignment_3_1_2; }

		//[mm::Attribute]
		public CrossReference getOutRefAttributeAttributeCrossReference_3_1_2_0() { return cOutRefAttributeAttributeCrossReference_3_1_2_0; }

		//ID
		public RuleCall getOutRefAttributeAttributeIDTerminalRuleCall_3_1_2_0_1() { return cOutRefAttributeAttributeIDTerminalRuleCall_3_1_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class MappingModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSourceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntitySourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntitySourceEntityCrossReference_3_0 = (CrossReference)cEntitySourceAssignment_3.eContents().get(0);
		private final RuleCall cEntitySourceEntityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cEntitySourceEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cTargetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEntityTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEntityTargetEntityCrossReference_5_0 = (CrossReference)cEntityTargetAssignment_5.eContents().get(0);
		private final RuleCall cEntityTargetEntityQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cEntityTargetEntityCrossReference_5_0.eContents().get(1);
		private final Assignment cDocumentationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_6_0 = (RuleCall)cDocumentationAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cMappedFeaturesAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cMappedFeaturesFeatureMapParserRuleCall_8_0_0 = (RuleCall)cMappedFeaturesAssignment_8_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//MappingModule:
		//	"module" name=ID "source" entitySource=[mm::Entity|QualifiedName] "target" entityTarget=[mm::Entity|QualifiedName]
		//	documentation=STRING? "{" (mappedFeatures+=FeatureMap ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID "source" entitySource=[mm::Entity|QualifiedName] "target" entityTarget=[mm::Entity|QualifiedName]
		//documentation=STRING? "{" (mappedFeatures+=FeatureMap ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"source"
		public Keyword getSourceKeyword_2() { return cSourceKeyword_2; }

		//entitySource=[mm::Entity|QualifiedName]
		public Assignment getEntitySourceAssignment_3() { return cEntitySourceAssignment_3; }

		//[mm::Entity|QualifiedName]
		public CrossReference getEntitySourceEntityCrossReference_3_0() { return cEntitySourceEntityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getEntitySourceEntityQualifiedNameParserRuleCall_3_0_1() { return cEntitySourceEntityQualifiedNameParserRuleCall_3_0_1; }

		//"target"
		public Keyword getTargetKeyword_4() { return cTargetKeyword_4; }

		//entityTarget=[mm::Entity|QualifiedName]
		public Assignment getEntityTargetAssignment_5() { return cEntityTargetAssignment_5; }

		//[mm::Entity|QualifiedName]
		public CrossReference getEntityTargetEntityCrossReference_5_0() { return cEntityTargetEntityCrossReference_5_0; }

		//QualifiedName
		public RuleCall getEntityTargetEntityQualifiedNameParserRuleCall_5_0_1() { return cEntityTargetEntityQualifiedNameParserRuleCall_5_0_1; }

		//documentation=STRING?
		public Assignment getDocumentationAssignment_6() { return cDocumentationAssignment_6; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_6_0() { return cDocumentationSTRINGTerminalRuleCall_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//(mappedFeatures+=FeatureMap ";"?)*
		public Group getGroup_8() { return cGroup_8; }

		//mappedFeatures+=FeatureMap
		public Assignment getMappedFeaturesAssignment_8_0() { return cMappedFeaturesAssignment_8_0; }

		//FeatureMap
		public RuleCall getMappedFeaturesFeatureMapParserRuleCall_8_0_0() { return cMappedFeaturesFeatureMapParserRuleCall_8_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class FeatureMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cFuctionKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cFuctionMapAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final CrossReference cFuctionMapFuctionCrossReference_0_0_1_0 = (CrossReference)cFuctionMapAssignment_0_0_1.eContents().get(0);
		private final RuleCall cFuctionMapFuctionIDTerminalRuleCall_0_0_1_0_1 = (RuleCall)cFuctionMapFuctionCrossReference_0_0_1_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cMapAtributeKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cAttributeSourceAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cAttributeSourceAttributeCrossReference_0_1_1_0 = (CrossReference)cAttributeSourceAssignment_0_1_1.eContents().get(0);
		private final RuleCall cAttributeSourceAttributeIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cAttributeSourceAttributeCrossReference_0_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cAttributeTargetAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final CrossReference cAttributeTargetAttributeCrossReference_0_1_3_0 = (CrossReference)cAttributeTargetAssignment_0_1_3.eContents().get(0);
		private final RuleCall cAttributeTargetAttributeIDTerminalRuleCall_0_1_3_0_1 = (RuleCall)cAttributeTargetAttributeCrossReference_0_1_3_0.eContents().get(1);
		private final Group cGroup_0_1_4 = (Group)cGroup_0_1.eContents().get(4);
		private final Action cNestedTransformationParameterTargetAction_0_1_4_0 = (Action)cGroup_0_1_4.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1_4_1 = (Keyword)cGroup_0_1_4.eContents().get(1);
		private final Assignment cRefAttributeAssignment_0_1_4_2 = (Assignment)cGroup_0_1_4.eContents().get(2);
		private final CrossReference cRefAttributeAttributeCrossReference_0_1_4_2_0 = (CrossReference)cRefAttributeAssignment_0_1_4_2.eContents().get(0);
		private final RuleCall cRefAttributeAttributeIDTerminalRuleCall_0_1_4_2_0_1 = (RuleCall)cRefAttributeAttributeCrossReference_0_1_4_2_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cMapModuleKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cWithModuleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cWithModuleMappingModuleCrossReference_0_2_1_0 = (CrossReference)cWithModuleAssignment_0_2_1.eContents().get(0);
		private final RuleCall cWithModuleMappingModuleIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cWithModuleMappingModuleCrossReference_0_2_1_0.eContents().get(1);
		private final Assignment cAttributeSourcesAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final CrossReference cAttributeSourcesAttributeCrossReference_0_2_2_0 = (CrossReference)cAttributeSourcesAssignment_0_2_2.eContents().get(0);
		private final RuleCall cAttributeSourcesAttributeIDTerminalRuleCall_0_2_2_0_1 = (RuleCall)cAttributeSourcesAttributeCrossReference_0_2_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Assignment cAttributeTargetAssignment_0_2_4 = (Assignment)cGroup_0_2.eContents().get(4);
		private final CrossReference cAttributeTargetAttributeCrossReference_0_2_4_0 = (CrossReference)cAttributeTargetAssignment_0_2_4.eContents().get(0);
		private final RuleCall cAttributeTargetAttributeIDTerminalRuleCall_0_2_4_0_1 = (RuleCall)cAttributeTargetAttributeCrossReference_0_2_4_0.eContents().get(1);
		private final Group cGroup_0_2_5 = (Group)cGroup_0_2.eContents().get(5);
		private final Action cNestedTransformationParameterTargetAction_0_2_5_0 = (Action)cGroup_0_2_5.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2_5_1 = (Keyword)cGroup_0_2_5.eContents().get(1);
		private final Assignment cRefAttributeAssignment_0_2_5_2 = (Assignment)cGroup_0_2_5.eContents().get(2);
		private final CrossReference cRefAttributeAttributeCrossReference_0_2_5_2_0 = (CrossReference)cRefAttributeAssignment_0_2_5_2.eContents().get(0);
		private final RuleCall cRefAttributeAttributeIDTerminalRuleCall_0_2_5_2_0_1 = (RuleCall)cRefAttributeAttributeCrossReference_0_2_5_2_0.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Keyword cSetKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cAttributeSourceAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final CrossReference cAttributeSourceAttributeCrossReference_0_3_1_0 = (CrossReference)cAttributeSourceAssignment_0_3_1.eContents().get(0);
		private final RuleCall cAttributeSourceAttributeIDTerminalRuleCall_0_3_1_0_1 = (RuleCall)cAttributeSourceAttributeCrossReference_0_3_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Assignment cExprAssignment_0_3_3 = (Assignment)cGroup_0_3.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_0_3_3_0 = (RuleCall)cExprAssignment_0_3_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Keyword cSetKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cAttributeTargetAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final CrossReference cAttributeTargetAttributeCrossReference_0_4_1_0 = (CrossReference)cAttributeTargetAssignment_0_4_1.eContents().get(0);
		private final RuleCall cAttributeTargetAttributeIDTerminalRuleCall_0_4_1_0_1 = (RuleCall)cAttributeTargetAttributeCrossReference_0_4_1_0.eContents().get(1);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Action cNestedTransformationParameterTargetAction_0_4_2_0 = (Action)cGroup_0_4_2.eContents().get(0);
		private final Keyword cFullStopKeyword_0_4_2_1 = (Keyword)cGroup_0_4_2.eContents().get(1);
		private final Assignment cRefAttributeAssignment_0_4_2_2 = (Assignment)cGroup_0_4_2.eContents().get(2);
		private final CrossReference cRefAttributeAttributeCrossReference_0_4_2_2_0 = (CrossReference)cRefAttributeAssignment_0_4_2_2.eContents().get(0);
		private final RuleCall cRefAttributeAttributeIDTerminalRuleCall_0_4_2_2_0_1 = (RuleCall)cRefAttributeAttributeCrossReference_0_4_2_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_4_3 = (Keyword)cGroup_0_4.eContents().get(3);
		private final Assignment cExprAssignment_0_4_4 = (Assignment)cGroup_0_4.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_0_4_4_0 = (RuleCall)cExprAssignment_0_4_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final Keyword cIgnoreKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cAttributeSourceAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final CrossReference cAttributeSourceAttributeCrossReference_0_5_1_0 = (CrossReference)cAttributeSourceAssignment_0_5_1.eContents().get(0);
		private final RuleCall cAttributeSourceAttributeIDTerminalRuleCall_0_5_1_0_1 = (RuleCall)cAttributeSourceAttributeCrossReference_0_5_1_0.eContents().get(1);
		private final Group cGroup_0_6 = (Group)cAlternatives_0.eContents().get(6);
		private final Keyword cIgnoreKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cAttributeTargetAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final CrossReference cAttributeTargetAttributeCrossReference_0_6_1_0 = (CrossReference)cAttributeTargetAssignment_0_6_1.eContents().get(0);
		private final RuleCall cAttributeTargetAttributeIDTerminalRuleCall_0_6_1_0_1 = (RuleCall)cAttributeTargetAttributeCrossReference_0_6_1_0.eContents().get(1);
		private final Group cGroup_0_6_2 = (Group)cGroup_0_6.eContents().get(2);
		private final Action cNestedTransformationParameterTargetAction_0_6_2_0 = (Action)cGroup_0_6_2.eContents().get(0);
		private final Keyword cFullStopKeyword_0_6_2_1 = (Keyword)cGroup_0_6_2.eContents().get(1);
		private final Assignment cRefAttributeAssignment_0_6_2_2 = (Assignment)cGroup_0_6_2.eContents().get(2);
		private final CrossReference cRefAttributeAttributeCrossReference_0_6_2_2_0 = (CrossReference)cRefAttributeAssignment_0_6_2_2.eContents().get(0);
		private final RuleCall cRefAttributeAttributeIDTerminalRuleCall_0_6_2_2_0_1 = (RuleCall)cRefAttributeAttributeCrossReference_0_6_2_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRuleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRuleRuleCrossReference_1_1_0 = (CrossReference)cRuleAssignment_1_1.eContents().get(0);
		private final RuleCall cRuleRuleIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRuleRuleCrossReference_1_1_0.eContents().get(1);
		private final Assignment cDocumentationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_2_0 = (RuleCall)cDocumentationAssignment_2.eContents().get(0);
		
		//FeatureMap:
		//	("fuction" fuctionMap=[Fuction] //	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*
		//	//	( 'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
		//	//			(( 'whith' withModule=[MappingModule]) | ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*) ('default' default=STRING)?		
		//	//	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute]  )*		
		//
		//	//	|  'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
		//	//		({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*  ('whith' withModule=[MappingModule])? 
		//	//	| 'call module' module=[MappingModule] 
		//	| "map atribute" attributeSource=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "map module"
		//	withModule=[MappingModule] attributeSources+=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "set <-"
		//	attributeSource=[mm::Attribute] "=" expr=Expression | "set ->" attributeTarget=[mm::Attribute]
		//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* "=" expr=Expression | "ignore <-"
		//	attributeSource=[mm::Attribute] | "ignore ->" attributeTarget=[mm::Attribute]
		//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*) ("rule" rule=[Rule])?
		//	documentation=STRING?;
		public ParserRule getRule() { return rule; }

		//("fuction" fuctionMap=[Fuction] //	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*
		////	( 'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
		////			(( 'whith' withModule=[MappingModule]) | ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*) ('default' default=STRING)?		
		////	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute]  )*		
		////	|  'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
		////		({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*  ('whith' withModule=[MappingModule])? 
		////	| 'call module' module=[MappingModule] 
		//| "map atribute" attributeSource=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "map module"
		//withModule=[MappingModule] attributeSources+=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "set <-"
		//attributeSource=[mm::Attribute] "=" expr=Expression | "set ->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* "=" expr=Expression | "ignore <-"
		//attributeSource=[mm::Attribute] | "ignore ->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*) ("rule" rule=[Rule])?
		//documentation=STRING?
		public Group getGroup() { return cGroup; }

		//"fuction" fuctionMap=[Fuction] //	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*
		////	( 'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
		////			(( 'whith' withModule=[MappingModule]) | ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*) ('default' default=STRING)?		
		////	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute]  )*		
		////	|  'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
		////		({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*  ('whith' withModule=[MappingModule])? 
		////	| 'call module' module=[MappingModule] 
		//| "map atribute" attributeSource=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "map module"
		//withModule=[MappingModule] attributeSources+=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "set <-"
		//attributeSource=[mm::Attribute] "=" expr=Expression | "set ->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* "=" expr=Expression | "ignore <-"
		//attributeSource=[mm::Attribute] | "ignore ->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"fuction" fuctionMap=[Fuction]
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"fuction"
		public Keyword getFuctionKeyword_0_0_0() { return cFuctionKeyword_0_0_0; }

		//fuctionMap=[Fuction]
		public Assignment getFuctionMapAssignment_0_0_1() { return cFuctionMapAssignment_0_0_1; }

		//[Fuction]
		public CrossReference getFuctionMapFuctionCrossReference_0_0_1_0() { return cFuctionMapFuctionCrossReference_0_0_1_0; }

		//ID
		public RuleCall getFuctionMapFuctionIDTerminalRuleCall_0_0_1_0_1() { return cFuctionMapFuctionIDTerminalRuleCall_0_0_1_0_1; }

		//"map atribute" attributeSource=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"map atribute"
		public Keyword getMapAtributeKeyword_0_1_0() { return cMapAtributeKeyword_0_1_0; }

		//attributeSource=[mm::Attribute]
		public Assignment getAttributeSourceAssignment_0_1_1() { return cAttributeSourceAssignment_0_1_1; }

		//[mm::Attribute]
		public CrossReference getAttributeSourceAttributeCrossReference_0_1_1_0() { return cAttributeSourceAttributeCrossReference_0_1_1_0; }

		//ID
		public RuleCall getAttributeSourceAttributeIDTerminalRuleCall_0_1_1_0_1() { return cAttributeSourceAttributeIDTerminalRuleCall_0_1_1_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1_2() { return cHyphenMinusGreaterThanSignKeyword_0_1_2; }

		//attributeTarget=[mm::Attribute]
		public Assignment getAttributeTargetAssignment_0_1_3() { return cAttributeTargetAssignment_0_1_3; }

		//[mm::Attribute]
		public CrossReference getAttributeTargetAttributeCrossReference_0_1_3_0() { return cAttributeTargetAttributeCrossReference_0_1_3_0; }

		//ID
		public RuleCall getAttributeTargetAttributeIDTerminalRuleCall_0_1_3_0_1() { return cAttributeTargetAttributeIDTerminalRuleCall_0_1_3_0_1; }

		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*
		public Group getGroup_0_1_4() { return cGroup_0_1_4; }

		//{NestedTransformationParameter.target=current}
		public Action getNestedTransformationParameterTargetAction_0_1_4_0() { return cNestedTransformationParameterTargetAction_0_1_4_0; }

		//"."
		public Keyword getFullStopKeyword_0_1_4_1() { return cFullStopKeyword_0_1_4_1; }

		//refAttribute=[mm::Attribute]
		public Assignment getRefAttributeAssignment_0_1_4_2() { return cRefAttributeAssignment_0_1_4_2; }

		//[mm::Attribute]
		public CrossReference getRefAttributeAttributeCrossReference_0_1_4_2_0() { return cRefAttributeAttributeCrossReference_0_1_4_2_0; }

		//ID
		public RuleCall getRefAttributeAttributeIDTerminalRuleCall_0_1_4_2_0_1() { return cRefAttributeAttributeIDTerminalRuleCall_0_1_4_2_0_1; }

		//"map module" withModule=[MappingModule] attributeSources+=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"map module"
		public Keyword getMapModuleKeyword_0_2_0() { return cMapModuleKeyword_0_2_0; }

		//withModule=[MappingModule]
		public Assignment getWithModuleAssignment_0_2_1() { return cWithModuleAssignment_0_2_1; }

		//[MappingModule]
		public CrossReference getWithModuleMappingModuleCrossReference_0_2_1_0() { return cWithModuleMappingModuleCrossReference_0_2_1_0; }

		//ID
		public RuleCall getWithModuleMappingModuleIDTerminalRuleCall_0_2_1_0_1() { return cWithModuleMappingModuleIDTerminalRuleCall_0_2_1_0_1; }

		//attributeSources+=[mm::Attribute]
		public Assignment getAttributeSourcesAssignment_0_2_2() { return cAttributeSourcesAssignment_0_2_2; }

		//[mm::Attribute]
		public CrossReference getAttributeSourcesAttributeCrossReference_0_2_2_0() { return cAttributeSourcesAttributeCrossReference_0_2_2_0; }

		//ID
		public RuleCall getAttributeSourcesAttributeIDTerminalRuleCall_0_2_2_0_1() { return cAttributeSourcesAttributeIDTerminalRuleCall_0_2_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_2_3() { return cHyphenMinusGreaterThanSignKeyword_0_2_3; }

		//attributeTarget=[mm::Attribute]
		public Assignment getAttributeTargetAssignment_0_2_4() { return cAttributeTargetAssignment_0_2_4; }

		//[mm::Attribute]
		public CrossReference getAttributeTargetAttributeCrossReference_0_2_4_0() { return cAttributeTargetAttributeCrossReference_0_2_4_0; }

		//ID
		public RuleCall getAttributeTargetAttributeIDTerminalRuleCall_0_2_4_0_1() { return cAttributeTargetAttributeIDTerminalRuleCall_0_2_4_0_1; }

		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*
		public Group getGroup_0_2_5() { return cGroup_0_2_5; }

		//{NestedTransformationParameter.target=current}
		public Action getNestedTransformationParameterTargetAction_0_2_5_0() { return cNestedTransformationParameterTargetAction_0_2_5_0; }

		//"."
		public Keyword getFullStopKeyword_0_2_5_1() { return cFullStopKeyword_0_2_5_1; }

		//refAttribute=[mm::Attribute]
		public Assignment getRefAttributeAssignment_0_2_5_2() { return cRefAttributeAssignment_0_2_5_2; }

		//[mm::Attribute]
		public CrossReference getRefAttributeAttributeCrossReference_0_2_5_2_0() { return cRefAttributeAttributeCrossReference_0_2_5_2_0; }

		//ID
		public RuleCall getRefAttributeAttributeIDTerminalRuleCall_0_2_5_2_0_1() { return cRefAttributeAttributeIDTerminalRuleCall_0_2_5_2_0_1; }

		//"set <-" attributeSource=[mm::Attribute] "=" expr=Expression
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"set <-"
		public Keyword getSetKeyword_0_3_0() { return cSetKeyword_0_3_0; }

		//attributeSource=[mm::Attribute]
		public Assignment getAttributeSourceAssignment_0_3_1() { return cAttributeSourceAssignment_0_3_1; }

		//[mm::Attribute]
		public CrossReference getAttributeSourceAttributeCrossReference_0_3_1_0() { return cAttributeSourceAttributeCrossReference_0_3_1_0; }

		//ID
		public RuleCall getAttributeSourceAttributeIDTerminalRuleCall_0_3_1_0_1() { return cAttributeSourceAttributeIDTerminalRuleCall_0_3_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_3_2() { return cEqualsSignKeyword_0_3_2; }

		//expr=Expression
		public Assignment getExprAssignment_0_3_3() { return cExprAssignment_0_3_3; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_3_3_0() { return cExprExpressionParserRuleCall_0_3_3_0; }

		//"set ->" attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} "."
		//refAttribute=[mm::Attribute])* "=" expr=Expression
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"set ->"
		public Keyword getSetKeyword_0_4_0() { return cSetKeyword_0_4_0; }

		//attributeTarget=[mm::Attribute]
		public Assignment getAttributeTargetAssignment_0_4_1() { return cAttributeTargetAssignment_0_4_1; }

		//[mm::Attribute]
		public CrossReference getAttributeTargetAttributeCrossReference_0_4_1_0() { return cAttributeTargetAttributeCrossReference_0_4_1_0; }

		//ID
		public RuleCall getAttributeTargetAttributeIDTerminalRuleCall_0_4_1_0_1() { return cAttributeTargetAttributeIDTerminalRuleCall_0_4_1_0_1; }

		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }

		//{NestedTransformationParameter.target=current}
		public Action getNestedTransformationParameterTargetAction_0_4_2_0() { return cNestedTransformationParameterTargetAction_0_4_2_0; }

		//"."
		public Keyword getFullStopKeyword_0_4_2_1() { return cFullStopKeyword_0_4_2_1; }

		//refAttribute=[mm::Attribute]
		public Assignment getRefAttributeAssignment_0_4_2_2() { return cRefAttributeAssignment_0_4_2_2; }

		//[mm::Attribute]
		public CrossReference getRefAttributeAttributeCrossReference_0_4_2_2_0() { return cRefAttributeAttributeCrossReference_0_4_2_2_0; }

		//ID
		public RuleCall getRefAttributeAttributeIDTerminalRuleCall_0_4_2_2_0_1() { return cRefAttributeAttributeIDTerminalRuleCall_0_4_2_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_4_3() { return cEqualsSignKeyword_0_4_3; }

		//expr=Expression
		public Assignment getExprAssignment_0_4_4() { return cExprAssignment_0_4_4; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_4_4_0() { return cExprExpressionParserRuleCall_0_4_4_0; }

		//"ignore <-" attributeSource=[mm::Attribute]
		public Group getGroup_0_5() { return cGroup_0_5; }

		//"ignore <-"
		public Keyword getIgnoreKeyword_0_5_0() { return cIgnoreKeyword_0_5_0; }

		//attributeSource=[mm::Attribute]
		public Assignment getAttributeSourceAssignment_0_5_1() { return cAttributeSourceAssignment_0_5_1; }

		//[mm::Attribute]
		public CrossReference getAttributeSourceAttributeCrossReference_0_5_1_0() { return cAttributeSourceAttributeCrossReference_0_5_1_0; }

		//ID
		public RuleCall getAttributeSourceAttributeIDTerminalRuleCall_0_5_1_0_1() { return cAttributeSourceAttributeIDTerminalRuleCall_0_5_1_0_1; }

		//"ignore ->" attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} "."
		//refAttribute=[mm::Attribute])*
		public Group getGroup_0_6() { return cGroup_0_6; }

		//"ignore ->"
		public Keyword getIgnoreKeyword_0_6_0() { return cIgnoreKeyword_0_6_0; }

		//attributeTarget=[mm::Attribute]
		public Assignment getAttributeTargetAssignment_0_6_1() { return cAttributeTargetAssignment_0_6_1; }

		//[mm::Attribute]
		public CrossReference getAttributeTargetAttributeCrossReference_0_6_1_0() { return cAttributeTargetAttributeCrossReference_0_6_1_0; }

		//ID
		public RuleCall getAttributeTargetAttributeIDTerminalRuleCall_0_6_1_0_1() { return cAttributeTargetAttributeIDTerminalRuleCall_0_6_1_0_1; }

		//({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*
		public Group getGroup_0_6_2() { return cGroup_0_6_2; }

		//{NestedTransformationParameter.target=current}
		public Action getNestedTransformationParameterTargetAction_0_6_2_0() { return cNestedTransformationParameterTargetAction_0_6_2_0; }

		//"."
		public Keyword getFullStopKeyword_0_6_2_1() { return cFullStopKeyword_0_6_2_1; }

		//refAttribute=[mm::Attribute]
		public Assignment getRefAttributeAssignment_0_6_2_2() { return cRefAttributeAssignment_0_6_2_2; }

		//[mm::Attribute]
		public CrossReference getRefAttributeAttributeCrossReference_0_6_2_2_0() { return cRefAttributeAttributeCrossReference_0_6_2_2_0; }

		//ID
		public RuleCall getRefAttributeAttributeIDTerminalRuleCall_0_6_2_2_0_1() { return cRefAttributeAttributeIDTerminalRuleCall_0_6_2_2_0_1; }

		//("rule" rule=[Rule])?
		public Group getGroup_1() { return cGroup_1; }

		//"rule"
		public Keyword getRuleKeyword_1_0() { return cRuleKeyword_1_0; }

		//rule=[Rule]
		public Assignment getRuleAssignment_1_1() { return cRuleAssignment_1_1; }

		//[Rule]
		public CrossReference getRuleRuleCrossReference_1_1_0() { return cRuleRuleCrossReference_1_1_0; }

		//ID
		public RuleCall getRuleRuleIDTerminalRuleCall_1_1_0_1() { return cRuleRuleIDTerminalRuleCall_1_1_0_1; }

		//documentation=STRING?
		public Assignment getDocumentationAssignment_2() { return cDocumentationAssignment_2; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_2_0() { return cDocumentationSTRINGTerminalRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_1_0 = (RuleCall)cIntValueAssignment_1.eContents().get(0);
		
		//Expression:
		//	value=STRING | intValue=INT;
		public ParserRule getRule() { return rule; }

		//value=STRING | intValue=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//intValue=INT
		public Assignment getIntValueAssignment_1() { return cIntValueAssignment_1; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_1_0() { return cIntValueINTTerminalRuleCall_1_0; }
	}
	
	
	private ModelElements pModel;
	private ImportElements pImport;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private QualifiedNameElements pQualifiedName;
	private RootModuleElements pRootModule;
	private RuleElements pRule;
	private FuctionElements pFuction;
	private FuctionInElements pFuctionIn;
	private FuctionOutElements pFuctionOut;
	private MappingModuleElements pMappingModule;
	private FeatureMapElements pFeatureMap;
	private ExpressionElements pExpression;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MapDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"model" name=ID documentation=STRING? imports+=Import* rules+=Rule* fuctions+=Fuction* mappingModules+=MappingModule*
	//	roots=RootModule;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//RootModule:
	//	"root" rootRef=[MappingModule] documentation=STRING?;
	public RootModuleElements getRootModuleAccess() {
		return (pRootModule != null) ? pRootModule : (pRootModule = new RootModuleElements());
	}
	
	public ParserRule getRootModuleRule() {
		return getRootModuleAccess().getRule();
	}

	////(documentation=STRING)?
	//Rule:
	//	"define rule" name=ID ("op" operation=STRING)? ("args" args+=STRING*)?;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Fuction:
	//	"define fonction" name=ID in+=FuctionIn* out+=FuctionOut* documentation=STRING?;
	public FuctionElements getFuctionAccess() {
		return (pFuction != null) ? pFuction : (pFuction = new FuctionElements());
	}
	
	public ParserRule getFuctionRule() {
		return getFuctionAccess().getRule();
	}

	//FuctionIn:
	//	"in" inEntity=[mm::Entity|QualifiedName] "[" (inAttribute=[mm::Attribute]
	//	({NestedInTransformationParameter.target=current} "." inRefAttribute=[mm::Attribute])*)? "]";
	public FuctionInElements getFuctionInAccess() {
		return (pFuctionIn != null) ? pFuctionIn : (pFuctionIn = new FuctionInElements());
	}
	
	public ParserRule getFuctionInRule() {
		return getFuctionInAccess().getRule();
	}

	//FuctionOut:
	//	"out" outEntity=[mm::Entity|QualifiedName] "[" (outAttribute=[mm::Attribute]
	//	({NestedOutTransformationParameter.target=current} "." outRefAttribute=[mm::Attribute])*)? "]";
	public FuctionOutElements getFuctionOutAccess() {
		return (pFuctionOut != null) ? pFuctionOut : (pFuctionOut = new FuctionOutElements());
	}
	
	public ParserRule getFuctionOutRule() {
		return getFuctionOutAccess().getRule();
	}

	//MappingModule:
	//	"module" name=ID "source" entitySource=[mm::Entity|QualifiedName] "target" entityTarget=[mm::Entity|QualifiedName]
	//	documentation=STRING? "{" (mappedFeatures+=FeatureMap ";"?)* "}";
	public MappingModuleElements getMappingModuleAccess() {
		return (pMappingModule != null) ? pMappingModule : (pMappingModule = new MappingModuleElements());
	}
	
	public ParserRule getMappingModuleRule() {
		return getMappingModuleAccess().getRule();
	}

	//FeatureMap:
	//	("fuction" fuctionMap=[Fuction] //	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*
	//	//	( 'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
	//	//			(( 'whith' withModule=[MappingModule]) | ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*) ('default' default=STRING)?		
	//	//	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute]  )*		
	//
	//	//	|  'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
	//	//		({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*  ('whith' withModule=[MappingModule])? 
	//	//	| 'call module' module=[MappingModule] 
	//	| "map atribute" attributeSource=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
	//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "map module"
	//	withModule=[MappingModule] attributeSources+=[mm::Attribute] "->" attributeTarget=[mm::Attribute]
	//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* | "set <-"
	//	attributeSource=[mm::Attribute] "=" expr=Expression | "set ->" attributeTarget=[mm::Attribute]
	//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])* "=" expr=Expression | "ignore <-"
	//	attributeSource=[mm::Attribute] | "ignore ->" attributeTarget=[mm::Attribute]
	//	({NestedTransformationParameter.target=current} "." refAttribute=[mm::Attribute])*) ("rule" rule=[Rule])?
	//	documentation=STRING?;
	public FeatureMapElements getFeatureMapAccess() {
		return (pFeatureMap != null) ? pFeatureMap : (pFeatureMap = new FeatureMapElements());
	}
	
	public ParserRule getFeatureMapRule() {
		return getFeatureMapAccess().getRule();
	}

	//Expression:
	//	value=STRING | intValue=INT;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
