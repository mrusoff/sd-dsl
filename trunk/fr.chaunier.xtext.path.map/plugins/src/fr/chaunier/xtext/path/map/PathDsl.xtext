grammar fr.chaunier.xtext.path.map.PathDsl with org.eclipse.xtext.common.Terminals

generate pathDsl "http://www.chaunier.fr/xtext/path/map/PathDsl"

import  "platform:/resource/fr.chaunier.xtext.omc/src-gen/fr/chaunier/xtext/omc/OmcDsl.ecore" as mm 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore 

ModelMap :
	('[' spec =  FileSpecModel ']')? 
	imports+=Import*
	rules+=RuleDef*
	mapping += MapEntity*
;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

/*
MapEntity: 
	MapRootEntity | MapChildEntity
	;
 */
 
MapEntity: 
	'mapping' name=QualifiedName 'Entity source' entityFrom=[mm::Entity|QualifiedName]  'Entity target' entityTo=[mm::Entity|QualifiedName] '('  
	actions+=Action*
')'	
;

/*
MapChildEntity:
	'mapping' ('Entity source' entityFrom=[mm::Entity|QualifiedName])?  ('Entity target' entityTo=[mm::Entity|QualifiedName])? '('  
	actions+=Action*
')'	
;
 */

CallMapEntity: 
'use mapping' mapping=[MapEntity|QualifiedName] ('whith map' featurePath = FeaturePath)?    
;

/*
SetMapEntity: 
'context' featurePath=FeaturePath     
;
 */
 
Action : 
	FunctionDef | RuleDef | FeatureSet | FeaturePath  | CallMapEntity | Document /* | MapChildEntity*/ /*| SetMapEntity */ 
; 

Document:
	'doc' document=STRING
;

RuleDef:
	'define rule' name=ID ('operation' operation=STRING)? (description=STRING )?  
;

enum InOut:
	in="In" | out="Out" ;

FunctionDef: 
	'fonction' name=ID ('rule' rule=[RuleDef])? (description=STRING )? '{'
		params+=FunctionParam* 
	'}'
;

FunctionParam: 
	in=InOut path=PathTail
;


//FeatureAll :
//	FeatureSet | FeaturePath  
//;

FeaturePath :
	from=FeaturePathFrom to=FeaturePathTo (forEach?='for each')?  ('rule' rule=[RuleDef])?  (description=STRING )? 
;

FeatureSet :
	'set' in=InOut path=PathTail '=' value = TerminalExpression (description=STRING )?
;

FeaturePathFrom :
	'from' path=PathTail   
;

FeaturePathTo :
	'to' path=PathTail 
;

PathHead:
	entity=[mm::Entity] tail=PathTail;

PathTail:
	'.' feature=[mm::StructuralFeature] (tail=PathTail)?;


PathElement:	// convenience super type
	PathHead | PathTail | FeaturePathFrom | FeaturePathTo | FeatureSet 
	;

// ----------------- secp file part (temporary)


FileSpecModel:
	mapping=[MapEntity|QualifiedName] 
	("source path" sourcePath=STRING)? 
	("target path" targetPath=STRING)? 
	specLines += SpecLine*
	  
;	

SpecLine :
	SpecInfo | SpecVersion 
;

SpecInfo : 
	'info' title=STRING label=STRING   	 
;

SpecVersion : 
	'version' version=STRING ('comment' comment=STRING)?   	 
;


// types

TerminalExpression:
   int = IntVar |
   number = NumberVar |
   null = NullVar |
   bool = BoolVar |
   string = StringVar //| 
//   enumm = EnumVar  
;

IntVar : value = BIGINT;
NumberVar : value = NUMBER;
StringVar : value = STRING;
NullVar : value = 'null';
BoolVar : value = 'true' | 'false';

terminal BIGINT returns ecore::EBigInteger:
	('0'..'9')*;

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;
	
terminal DATE returns ecore::EDate : ('0'..'1') '0'..'9' '.' '0'..'3' '0'..'9' '.'  '0'..'9' '0'..'9' '0'..'9' '0'..'9';

terminal INT returns ecore::EInt:
	'this one has been deactivated';

