/*
* generated by Xtext
*/
package fr.chaunier.xtext.archi.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.chaunier.xtext.archi.services.AdslDslGrammarAccess;

public class AdslDslParser extends AbstractContentAssistParser {
	
	@Inject
	private AdslDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.chaunier.xtext.archi.ui.contentassist.antlr.internal.InternalAdslDslParser createParser() {
		fr.chaunier.xtext.archi.ui.contentassist.antlr.internal.InternalAdslDslParser result = new fr.chaunier.xtext.archi.ui.contentassist.antlr.internal.InternalAdslDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSystemAccess().getAlternatives_4(), "rule__System__Alternatives_4");
					put(grammarAccess.getPortAccess().getAlternatives(), "rule__Port__Alternatives");
					put(grammarAccess.getMessageInteractionAccess().getAlternatives(), "rule__MessageInteraction__Alternatives");
					put(grammarAccess.getArchiModelAccess().getGroup(), "rule__ArchiModel__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
					put(grammarAccess.getUsingAccess().getGroup(), "rule__Using__Group__0");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getProvidedPortAccess().getGroup(), "rule__ProvidedPort__Group__0");
					put(grammarAccess.getRequiredPortAccess().getGroup(), "rule__RequiredPort__Group__0");
					put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
					put(grammarAccess.getOnewayInteractionAccess().getGroup(), "rule__OnewayInteraction__Group__0");
					put(grammarAccess.getRequestReplyInteractionAccess().getGroup(), "rule__RequestReplyInteraction__Group__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getMessageAccess().getGroup_1(), "rule__Message__Group_1__0");
					put(grammarAccess.getMessageParameterAccess().getGroup(), "rule__MessageParameter__Group__0");
					put(grammarAccess.getArchiModelAccess().getImportsAssignment_0(), "rule__ArchiModel__ImportsAssignment_0");
					put(grammarAccess.getArchiModelAccess().getElementsAssignment_1(), "rule__ArchiModel__ElementsAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
					put(grammarAccess.getSystemAccess().getUsingsAssignment_3(), "rule__System__UsingsAssignment_3");
					put(grammarAccess.getSystemAccess().getSubSystemsAssignment_4_0(), "rule__System__SubSystemsAssignment_4_0");
					put(grammarAccess.getSystemAccess().getComponentsAssignment_4_1(), "rule__System__ComponentsAssignment_4_1");
					put(grammarAccess.getSystemAccess().getInterfacesAssignment_4_2(), "rule__System__InterfacesAssignment_4_2");
					put(grammarAccess.getUsingAccess().getSystemAssignment_1(), "rule__Using__SystemAssignment_1");
					put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
					put(grammarAccess.getComponentAccess().getPortsAssignment_3(), "rule__Component__PortsAssignment_3");
					put(grammarAccess.getProvidedPortAccess().getIsMandatoryAssignment_1(), "rule__ProvidedPort__IsMandatoryAssignment_1");
					put(grammarAccess.getProvidedPortAccess().getIsToManyAssignment_2(), "rule__ProvidedPort__IsToManyAssignment_2");
					put(grammarAccess.getProvidedPortAccess().getNameAssignment_3(), "rule__ProvidedPort__NameAssignment_3");
					put(grammarAccess.getProvidedPortAccess().getInterfaceAssignment_5(), "rule__ProvidedPort__InterfaceAssignment_5");
					put(grammarAccess.getRequiredPortAccess().getIsMandatoryAssignment_1(), "rule__RequiredPort__IsMandatoryAssignment_1");
					put(grammarAccess.getRequiredPortAccess().getIsToManyAssignment_2(), "rule__RequiredPort__IsToManyAssignment_2");
					put(grammarAccess.getRequiredPortAccess().getNameAssignment_3(), "rule__RequiredPort__NameAssignment_3");
					put(grammarAccess.getRequiredPortAccess().getInterfaceAssignment_5(), "rule__RequiredPort__InterfaceAssignment_5");
					put(grammarAccess.getInterfaceAccess().getNameAssignment_1(), "rule__Interface__NameAssignment_1");
					put(grammarAccess.getInterfaceAccess().getInteractionsAssignment_3(), "rule__Interface__InteractionsAssignment_3");
					put(grammarAccess.getOnewayInteractionAccess().getNameAssignment_1(), "rule__OnewayInteraction__NameAssignment_1");
					put(grammarAccess.getOnewayInteractionAccess().getMessageAssignment_3(), "rule__OnewayInteraction__MessageAssignment_3");
					put(grammarAccess.getRequestReplyInteractionAccess().getNameAssignment_1(), "rule__RequestReplyInteraction__NameAssignment_1");
					put(grammarAccess.getRequestReplyInteractionAccess().getRequestAssignment_5(), "rule__RequestReplyInteraction__RequestAssignment_5");
					put(grammarAccess.getRequestReplyInteractionAccess().getReplyAssignment_8(), "rule__RequestReplyInteraction__ReplyAssignment_8");
					put(grammarAccess.getMessageAccess().getParametersAssignment_1_0(), "rule__Message__ParametersAssignment_1_0");
					put(grammarAccess.getMessageParameterAccess().getNameAssignment_0(), "rule__MessageParameter__NameAssignment_0");
					put(grammarAccess.getMessageParameterAccess().getTyperefAssignment_2(), "rule__MessageParameter__TyperefAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.chaunier.xtext.archi.ui.contentassist.antlr.internal.InternalAdslDslParser typedParser = (fr.chaunier.xtext.archi.ui.contentassist.antlr.internal.InternalAdslDslParser) parser;
			typedParser.entryRuleArchiModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AdslDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AdslDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
