/*
* generated by Xtext
*/
grammar InternalCstDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.chaunier.xtext.constraint.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.chaunier.xtext.constraint.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.chaunier.xtext.constraint.services.CstDslGrammarAccess;

}

@parser::members {

 	private CstDslGrammarAccess grammarAccess;
 	
    public InternalCstDslParser(TokenStream input, CstDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DomainModelConstraint";	
   	}
   	
   	@Override
   	protected CstDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainModelConstraint
entryRuleDomainModelConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainModelConstraintRule()); }
	 iv_ruleDomainModelConstraint=ruleDomainModelConstraint 
	 { $current=$iv_ruleDomainModelConstraint.current; } 
	 EOF 
;

// Rule DomainModelConstraint
ruleDomainModelConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDomainModelConstraintAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainModelConstraintRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainModelConstraintAccess().getElementsAbstractElementConstraintParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleAbstractElementConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainModelConstraintRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"AbstractElementConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRuleFileSpecification
entryRuleFileSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileSpecificationRule()); }
	 iv_ruleFileSpecification=ruleFileSpecification 
	 { $current=$iv_ruleFileSpecification.current; } 
	 EOF 
;

// Rule FileSpecification
ruleFileSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_format_0_0=	'XSD' 
    {
        newLeafNode(lv_format_0_0, grammarAccess.getFileSpecificationAccess().getFormatXSDKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileSpecificationRule());
	        }
       		setWithLastConsumed($current, "format", lv_format_0_0, "XSD");
	    }

)
)
    |	otherlv_1='DTD' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFileSpecificationAccess().getDTDKeyword_1());
    }

    |	otherlv_2='FLAT' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFileSpecificationAccess().getFLATKeyword_2());
    }

    |(	otherlv_3='CSV' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFileSpecificationAccess().getCSVKeyword_3_0());
    }
	otherlv_4='delimiter' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFileSpecificationAccess().getDelimiterKeyword_3_1());
    }
(
(
		lv_delimiter_5_0=RULE_STRING
		{
			newLeafNode(lv_delimiter_5_0, grammarAccess.getFileSpecificationAccess().getDelimiterSTRINGTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"delimiter",
        		lv_delimiter_5_0, 
        		"STRING");
	    }

)
))
    |	otherlv_6='DB' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFileSpecificationAccess().getDBKeyword_4());
    }
)
;





// Entry rule entryRuleFreeSpecification
entryRuleFreeSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFreeSpecificationRule()); }
	 iv_ruleFreeSpecification=ruleFreeSpecification 
	 { $current=$iv_ruleFreeSpecification.current; } 
	 EOF 
;

// Rule FreeSpecification
ruleFreeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='line' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFreeSpecificationAccess().getLineKeyword_0());
    }
(
(
		lv_lines_1_0=RULE_STRING
		{
			newLeafNode(lv_lines_1_0, grammarAccess.getFreeSpecificationAccess().getLinesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFreeSpecificationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"lines",
        		lv_lines_1_0, 
        		"STRING");
	    }

)
)*)
;





// Entry rule entryRuleAbstractElementConstraint
entryRuleAbstractElementConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementConstraintRule()); }
	 iv_ruleAbstractElementConstraint=ruleAbstractElementConstraint 
	 { $current=$iv_ruleAbstractElementConstraint.current; } 
	 EOF 
;

// Rule AbstractElementConstraint
ruleAbstractElementConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractElementConstraintAccess().getPackageConstraintParserRuleCall_0()); 
    }
    this_PackageConstraint_0=rulePackageConstraint
    { 
        $current = $this_PackageConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractElementConstraintAccess().getDataTypeConstraintParserRuleCall_1()); 
    }
    this_DataTypeConstraint_1=ruleDataTypeConstraint
    { 
        $current = $this_DataTypeConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractElementConstraintAccess().getEntityConstraintParserRuleCall_2()); 
    }
    this_EntityConstraint_2=ruleEntityConstraint
    { 
        $current = $this_EntityConstraint_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildCard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildCard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard 
	 { $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRulePackageConstraint
entryRulePackageConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageConstraintRule()); }
	 iv_rulePackageConstraint=rulePackageConstraint 
	 { $current=$iv_rulePackageConstraint.current; } 
	 EOF 
;

// Rule PackageConstraint
rulePackageConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageConstraintAccess().getPackageKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackageConstraintRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPackageConstraintAccess().getPackageDeclarationPackageDeclarationCrossReference_1_0()); 
	}

)
)(	otherlv_2='prefix' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageConstraintAccess().getPrefixKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageConstraintAccess().getPrefixQualifiedNameParserRuleCall_2_1_0()); 
	    }
		lv_prefix_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageConstraintRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='namespace' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPackageConstraintAccess().getNamespaceKeyword_3_0());
    }
(
(
		lv_namespace_5_0=RULE_STRING
		{
			newLeafNode(lv_namespace_5_0, grammarAccess.getPackageConstraintAccess().getNamespaceSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackageConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namespace",
        		lv_namespace_5_0, 
        		"STRING");
	    }

)
))	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPackageConstraintAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageConstraintAccess().getTypesTypeConstraintParserRuleCall_5_0()); 
	    }
		lv_types_7_0=ruleTypeConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageConstraintRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_7_0, 
        		"TypeConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPackageConstraintAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTypeConstraint
entryRuleTypeConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeConstraintRule()); }
	 iv_ruleTypeConstraint=ruleTypeConstraint 
	 { $current=$iv_ruleTypeConstraint.current; } 
	 EOF 
;

// Rule TypeConstraint
ruleTypeConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeConstraintAccess().getEntityConstraintParserRuleCall_0()); 
    }
    this_EntityConstraint_0=ruleEntityConstraint
    { 
        $current = $this_EntityConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeConstraintAccess().getDataTypeConstraintParserRuleCall_1()); 
    }
    this_DataTypeConstraint_1=ruleDataTypeConstraint
    { 
        $current = $this_DataTypeConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDataTypeConstraint
entryRuleDataTypeConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeConstraintRule()); }
	 iv_ruleDataTypeConstraint=ruleDataTypeConstraint 
	 { $current=$iv_ruleDataTypeConstraint.current; } 
	 EOF 
;

// Rule DataTypeConstraint
ruleDataTypeConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='datatype' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataTypeConstraintAccess().getDatatypeKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeConstraintRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDataTypeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeConstraintAccess().getConstraintConstraintParserRuleCall_2_0()); 
	    }
		lv_constraint_2_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeConstraintRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_2_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_description_3_0=RULE_STRING
		{
			newLeafNode(lv_description_3_0, grammarAccess.getDataTypeConstraintAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"STRING");
	    }

)
)?)
;





// Entry rule entryRuleEntityConstraint
entryRuleEntityConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityConstraintRule()); }
	 iv_ruleEntityConstraint=ruleEntityConstraint 
	 { $current=$iv_ruleEntityConstraint.current; } 
	 EOF 
;

// Rule EntityConstraint
ruleEntityConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='entity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntityConstraintAccess().getEntityKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityConstraintRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEntityConstraintAccess().getEntityEntityCrossReference_1_0()); 
	}

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getEntityConstraintAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEntityConstraintAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityConstraintAccess().getFeaturesFeatureConstraintParserRuleCall_4_0()); 
	    }
		lv_features_4_0=ruleFeatureConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityConstraintRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"FeatureConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEntityConstraintAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFeatureConstraint
entryRuleFeatureConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureConstraintRule()); }
	 iv_ruleFeatureConstraint=ruleFeatureConstraint 
	 { $current=$iv_ruleFeatureConstraint.current; } 
	 EOF 
;

// Rule FeatureConstraint
ruleFeatureConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureConstraintAccess().getAttributeConstraintParserRuleCall_0()); 
    }
    this_AttributeConstraint_0=ruleAttributeConstraint
    { 
        $current = $this_AttributeConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureConstraintAccess().getConstraintConstraintParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureConstraintRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getFeatureConstraintAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)?)
;





// Entry rule entryRuleAttributeConstraint
entryRuleAttributeConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeConstraintRule()); }
	 iv_ruleAttributeConstraint=ruleAttributeConstraint 
	 { $current=$iv_ruleAttributeConstraint.current; } 
	 EOF 
;

// Rule AttributeConstraint
ruleAttributeConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeConstraintRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAttributeConstraintAccess().getAttributeAttributeCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getBoolConstraintParserRuleCall_0()); 
    }
    this_BoolConstraint_0=ruleBoolConstraint
    { 
        $current = $this_BoolConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getStringConstraintParserRuleCall_1()); 
    }
    this_StringConstraint_1=ruleStringConstraint
    { 
        $current = $this_StringConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getDateTimeConstraintParserRuleCall_2()); 
    }
    this_DateTimeConstraint_2=ruleDateTimeConstraint
    { 
        $current = $this_DateTimeConstraint_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getDecimalConstraintParserRuleCall_3()); 
    }
    this_DecimalConstraint_3=ruleDecimalConstraint
    { 
        $current = $this_DecimalConstraint_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getEnumerationConstraintParserRuleCall_4()); 
    }
    this_EnumerationConstraint_4=ruleEnumerationConstraint
    { 
        $current = $this_EnumerationConstraint_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBoolConstraint
entryRuleBoolConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolConstraintRule()); }
	 iv_ruleBoolConstraint=ruleBoolConstraint 
	 { $current=$iv_ruleBoolConstraint.current; } 
	 EOF 
;

// Rule BoolConstraint
ruleBoolConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_constraint_0_0=	'boolean' 
    {
        newLeafNode(lv_constraint_0_0, grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolConstraintRule());
	        }
       		setWithLastConsumed($current, "constraint", lv_constraint_0_0, "boolean");
	    }

)
)
;





// Entry rule entryRuleStringConstraint
entryRuleStringConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstraintRule()); }
	 iv_ruleStringConstraint=ruleStringConstraint 
	 { $current=$iv_ruleStringConstraint.current; } 
	 EOF 
;

// Rule StringConstraint
ruleStringConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_constraint_0_0=	'string' 
    {
        newLeafNode(lv_constraint_0_0, grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstraintRule());
	        }
       		setWithLastConsumed($current, "constraint", lv_constraint_0_0, "string");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringConstraintAccess().getConstraintRefAllConstraintParserRuleCall_1_0()); 
	    }
		lv_constraintRef_1_0=ruleAllConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringConstraintRule());
	        }
       		set(
       			$current, 
       			"constraintRef",
        		lv_constraintRef_1_0, 
        		"AllConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='regexp' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStringConstraintAccess().getRegexpKeyword_2_0());
    }
(
(
		lv_regularExpression_3_0=RULE_STRING
		{
			newLeafNode(lv_regularExpression_3_0, grammarAccess.getStringConstraintAccess().getRegularExpressionSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"regularExpression",
        		lv_regularExpression_3_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleDateTimeConstraint
entryRuleDateTimeConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateTimeConstraintRule()); }
	 iv_ruleDateTimeConstraint=ruleDateTimeConstraint 
	 { $current=$iv_ruleDateTimeConstraint.current; } 
	 EOF 
;

// Rule DateTimeConstraint
ruleDateTimeConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_constraint_0_0=	'datetime' 
    {
        newLeafNode(lv_constraint_0_0, grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTimeConstraintRule());
	        }
       		setWithLastConsumed($current, "constraint", lv_constraint_0_0, "datetime");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTimeConstraintRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); 
	}

)
)((
(
		lv_hasDefault_2_0=	'default' 
    {
        newLeafNode(lv_hasDefault_2_0, grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTimeConstraintRule());
	        }
       		setWithLastConsumed($current, "hasDefault", true, "default");
	    }

)
)(
(
		lv_defaultValue_3_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_3_0, grammarAccess.getDateTimeConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTimeConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_3_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleDecimalConstraint
entryRuleDecimalConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalConstraintRule()); }
	 iv_ruleDecimalConstraint=ruleDecimalConstraint 
	 { $current=$iv_ruleDecimalConstraint.current; } 
	 EOF 
;

// Rule DecimalConstraint
ruleDecimalConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_constraint_0_0=	'decimal' 
    {
        newLeafNode(lv_constraint_0_0, grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecimalConstraintRule());
	        }
       		setWithLastConsumed($current, "constraint", lv_constraint_0_0, "decimal");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDecimalConstraintAccess().getConstraintRefNumberConstraintParserRuleCall_1_0()); 
	    }
		lv_constraintRef_1_0=ruleNumberConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecimalConstraintRule());
	        }
       		set(
       			$current, 
       			"constraintRef",
        		lv_constraintRef_1_0, 
        		"NumberConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumerationConstraint
entryRuleEnumerationConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationConstraintRule()); }
	 iv_ruleEnumerationConstraint=ruleEnumerationConstraint 
	 { $current=$iv_ruleEnumerationConstraint.current; } 
	 EOF 
;

// Rule EnumerationConstraint
ruleEnumerationConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerationConstraintAccess().getEnumKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationConstraintAccess().getUsageEnumUsageEnumRuleCall_1_0()); 
	    }
		lv_usage_1_0=ruleEnumUsage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationConstraintRule());
	        }
       		set(
       			$current, 
       			"usage",
        		lv_usage_1_0, 
        		"EnumUsage");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='fixeLen' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumerationConstraintAccess().getFixeLenKeyword_2_0());
    }
(
(
		lv_fixeLen_3_0=RULE_INT
		{
			newLeafNode(lv_fixeLen_3_0, grammarAccess.getEnumerationConstraintAccess().getFixeLenINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fixeLen",
        		lv_fixeLen_3_0, 
        		"INT");
	    }

)
))?((
(
		lv_hasDefault_4_0=	'default' 
    {
        newLeafNode(lv_hasDefault_4_0, grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationConstraintRule());
	        }
       		setWithLastConsumed($current, "hasDefault", true, "default");
	    }

)
)(
(
		lv_defaultValueAsString_5_0=RULE_ID
		{
			newLeafNode(lv_defaultValueAsString_5_0, grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValueAsString",
        		lv_defaultValueAsString_5_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRuleNumberConstraint
entryRuleNumberConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberConstraintRule()); }
	 iv_ruleNumberConstraint=ruleNumberConstraint 
	 { $current=$iv_ruleNumberConstraint.current; } 
	 EOF 
;

// Rule NumberConstraint
ruleNumberConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_hasDefault_0_0=	'default' 
    {
        newLeafNode(lv_hasDefault_0_0, grammarAccess.getNumberConstraintAccess().getHasDefaultDefaultKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed($current, "hasDefault", true, "default");
	    }

)
)(
(
		lv_defaultValue_1_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_1_0, grammarAccess.getNumberConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_1_0, 
        		"STRING");
	    }

)
))?((
(
		lv_isFixed_2_0=	'fixed' 
    {
        newLeafNode(lv_isFixed_2_0, grammarAccess.getNumberConstraintAccess().getIsFixedFixedKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed($current, "isFixed", true, "fixed");
	    }

)
)(
(
		lv_fixedValue_3_0=RULE_STRING
		{
			newLeafNode(lv_fixedValue_3_0, grammarAccess.getNumberConstraintAccess().getFixedValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fixedValue",
        		lv_fixedValue_3_0, 
        		"STRING");
	    }

)
))?(	otherlv_4='minVal' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNumberConstraintAccess().getMinValKeyword_2_0());
    }
(
(
		lv_minValue_5_0=RULE_INT
		{
			newLeafNode(lv_minValue_5_0, grammarAccess.getNumberConstraintAccess().getMinValueINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minValue",
        		lv_minValue_5_0, 
        		"INT");
	    }

)
))?(	otherlv_6='maxVal' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNumberConstraintAccess().getMaxValKeyword_3_0());
    }
(
(
		lv_maxValue_7_0=RULE_INT
		{
			newLeafNode(lv_maxValue_7_0, grammarAccess.getNumberConstraintAccess().getMaxValueINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxValue",
        		lv_maxValue_7_0, 
        		"INT");
	    }

)
))?(	otherlv_8='minLen' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNumberConstraintAccess().getMinLenKeyword_4_0());
    }
(
(
		lv_minLen_9_0=RULE_INT
		{
			newLeafNode(lv_minLen_9_0, grammarAccess.getNumberConstraintAccess().getMinLenINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minLen",
        		lv_minLen_9_0, 
        		"INT");
	    }

)
))?(	otherlv_10='maxLen' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNumberConstraintAccess().getMaxLenKeyword_5_0());
    }
(
(
		lv_maxLen_11_0=RULE_INT
		{
			newLeafNode(lv_maxLen_11_0, grammarAccess.getNumberConstraintAccess().getMaxLenINTTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxLen",
        		lv_maxLen_11_0, 
        		"INT");
	    }

)
))?(	otherlv_12='fixeLen' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getNumberConstraintAccess().getFixeLenKeyword_6_0());
    }
(
(
		lv_fixeLen_13_0=RULE_INT
		{
			newLeafNode(lv_fixeLen_13_0, grammarAccess.getNumberConstraintAccess().getFixeLenINTTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fixeLen",
        		lv_fixeLen_13_0, 
        		"INT");
	    }

)
))?(	otherlv_14='paddle' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getNumberConstraintAccess().getPaddleKeyword_7_0());
    }
(
(
		lv_paddle_15_0=RULE_STRING
		{
			newLeafNode(lv_paddle_15_0, grammarAccess.getNumberConstraintAccess().getPaddleSTRINGTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"paddle",
        		lv_paddle_15_0, 
        		"STRING");
	    }

)
))?(
(
		lv_isId_16_0=	'id' 
    {
        newLeafNode(lv_isId_16_0, grammarAccess.getNumberConstraintAccess().getIsIdIdKeyword_8_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed($current, "isId", true, "id");
	    }

)
)?(
(
		lv_nullable_17_0=	'nullable' 
    {
        newLeafNode(lv_nullable_17_0, grammarAccess.getNumberConstraintAccess().getNullableNullableKeyword_9_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed($current, "nullable", true, "nullable");
	    }

)
)?((
(
		lv_derived_18_0=	'derived' 
    {
        newLeafNode(lv_derived_18_0, grammarAccess.getNumberConstraintAccess().getDerivedDerivedKeyword_10_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed($current, "derived", true, "derived");
	    }

)
)(
(
		lv_writable_19_0=	'writable' 
    {
        newLeafNode(lv_writable_19_0, grammarAccess.getNumberConstraintAccess().getWritableWritableKeyword_10_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed($current, "writable", true, "writable");
	    }

)
)?)?(
(
		lv_isXSDAtt_20_0=	'xsdA.' 
    {
        newLeafNode(lv_isXSDAtt_20_0, grammarAccess.getNumberConstraintAccess().getIsXSDAttXsdAKeyword_11_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberConstraintRule());
	        }
       		setWithLastConsumed($current, "isXSDAtt", true, "xsdA.");
	    }

)
)?)
;





// Entry rule entryRuleAllConstraint
entryRuleAllConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAllConstraintRule()); }
	 iv_ruleAllConstraint=ruleAllConstraint 
	 { $current=$iv_ruleAllConstraint.current; } 
	 EOF 
;

// Rule AllConstraint
ruleAllConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_hasDefault_0_0=	'default' 
    {
        newLeafNode(lv_hasDefault_0_0, grammarAccess.getAllConstraintAccess().getHasDefaultDefaultKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed($current, "hasDefault", true, "default");
	    }

)
)(
(
		lv_defaultValue_1_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_1_0, grammarAccess.getAllConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_1_0, 
        		"STRING");
	    }

)
))?((
(
		lv_isFixed_2_0=	'fixed' 
    {
        newLeafNode(lv_isFixed_2_0, grammarAccess.getAllConstraintAccess().getIsFixedFixedKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed($current, "isFixed", true, "fixed");
	    }

)
)(
(
		lv_fixedValue_3_0=RULE_STRING
		{
			newLeafNode(lv_fixedValue_3_0, grammarAccess.getAllConstraintAccess().getFixedValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fixedValue",
        		lv_fixedValue_3_0, 
        		"STRING");
	    }

)
))?(	otherlv_4='minLen' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAllConstraintAccess().getMinLenKeyword_2_0());
    }
(
(
		lv_minLen_5_0=RULE_INT
		{
			newLeafNode(lv_minLen_5_0, grammarAccess.getAllConstraintAccess().getMinLenINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minLen",
        		lv_minLen_5_0, 
        		"INT");
	    }

)
))?(	otherlv_6='maxLen' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAllConstraintAccess().getMaxLenKeyword_3_0());
    }
(
(
		lv_maxLen_7_0=RULE_INT
		{
			newLeafNode(lv_maxLen_7_0, grammarAccess.getAllConstraintAccess().getMaxLenINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxLen",
        		lv_maxLen_7_0, 
        		"INT");
	    }

)
))?(	otherlv_8='fixeLen' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAllConstraintAccess().getFixeLenKeyword_4_0());
    }
(
(
		lv_fixeLen_9_0=RULE_INT
		{
			newLeafNode(lv_fixeLen_9_0, grammarAccess.getAllConstraintAccess().getFixeLenINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fixeLen",
        		lv_fixeLen_9_0, 
        		"INT");
	    }

)
))?(	otherlv_10='paddle' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAllConstraintAccess().getPaddleKeyword_5_0());
    }
(
(
		lv_paddle_11_0=RULE_STRING
		{
			newLeafNode(lv_paddle_11_0, grammarAccess.getAllConstraintAccess().getPaddleSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"paddle",
        		lv_paddle_11_0, 
        		"STRING");
	    }

)
))?(
(
		lv_isId_12_0=	'id' 
    {
        newLeafNode(lv_isId_12_0, grammarAccess.getAllConstraintAccess().getIsIdIdKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed($current, "isId", true, "id");
	    }

)
)?(
(
		lv_nullable_13_0=	'nullable' 
    {
        newLeafNode(lv_nullable_13_0, grammarAccess.getAllConstraintAccess().getNullableNullableKeyword_7_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed($current, "nullable", true, "nullable");
	    }

)
)?((
(
		lv_derived_14_0=	'derived' 
    {
        newLeafNode(lv_derived_14_0, grammarAccess.getAllConstraintAccess().getDerivedDerivedKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed($current, "derived", true, "derived");
	    }

)
)(
(
		lv_writable_15_0=	'writable' 
    {
        newLeafNode(lv_writable_15_0, grammarAccess.getAllConstraintAccess().getWritableWritableKeyword_8_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed($current, "writable", true, "writable");
	    }

)
)?)?(
(
		lv_isXSDAtt_16_0=	'xsdA.' 
    {
        newLeafNode(lv_isXSDAtt_16_0, grammarAccess.getAllConstraintAccess().getIsXSDAttXsdAKeyword_9_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllConstraintRule());
	        }
       		setWithLastConsumed($current, "isXSDAtt", true, "xsdA.");
	    }

)
)?)
;





// Rule EnumUsage
ruleEnumUsage returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='as String' 
	{
        $current = grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='as Value' 
	{
        $current = grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


