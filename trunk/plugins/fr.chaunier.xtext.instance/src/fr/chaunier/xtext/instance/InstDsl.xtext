grammar fr.chaunier.xtext.instance.InstDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore 
import  "platform:/resource/fr.chaunier.xtext.omc/src-gen/fr/chaunier/xtext/omc/OmcDsl.ecore" as mm 

generate instDsl "http://www.chaunier.fr/xtext/instance/InstDsl"

Factory :
	(imports+=Import)*
//	(annotations+=Annotation)*
	root=NewObject;

	
Import :
	'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

Feature:
	eFeature=[mm::StructuralFeature] (isMany?="+=" | "=") value=Value
;
	
NewObject:
	eClass=[mm::Entity] (name=ID)? "{"
		(features+=Feature)*
	"}";
	
Value:
	TerminalExpression | Reference | Containment
;

Reference:
	value = [ecore::EObject]
;
	
Containment:
	value = NewObject
;

//enum Type:
//	void | integer | real | boolean | string;
/*
Attribute:
	(EnumAttribute | StringAttribute | IntegerAttribute  | BooleanAttribute | DateAttribute | NullAttribute)
;

EnumAttribute:
	 ":" value = [mm::EnumerationLiteral]
;

IntegerAttribute :
	value=BIGINT
;

StringAttribute :
	value=STRING
;

DateAttribute:
	 value=DATE
;

NullAttribute:
	value = "NULL"
;

BooleanAttribute:
	 value?="true" |  "false" {BooleanAttribute}
;	

PrimitiveType:
	IntType | BoolType | FloatType | EnumType | StringType; 
	
EnumType:
	 enumRef=[ecore::EEnumLiteral];
	
IntType:
	 {IntType} "int";
	
BoolType:
	{BoolType} "bool";

FloatType:
	{FloatType} "float";

StringType:
	{StringType} "string";
 */	

 

TerminalExpression:
//   this = This |
//   variable = Variable |
//   new = New |
//   cast = Cast |
//   original = Original |
   int = IntVar |
   number = NumberVar |
   null = NullVar |
   bool = BoolVar |
   string = StringVar //| 
//   enumm = EnumVar  
;

IntVar : value = BIGINT;
NumberVar : value = NUMBER;
StringVar : value = STRING;
NullVar : value = 'null';
BoolVar : value = 'true' | 'false';
//EnumVar : value = [mm::EnumerationLiteral];
//New: 'new' type=[mm::Entity];


terminal BIGINT returns ecore::EBigInteger:
	('0'..'9')*;

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;
	
terminal DATE returns ecore::EDate : ('0'..'1') '0'..'9' '.' '0'..'3' '0'..'9' '.'  '0'..'9' '0'..'9' '0'..'9' '0'..'9';

terminal INT returns ecore::EInt:
	'this one has been deactivated';
