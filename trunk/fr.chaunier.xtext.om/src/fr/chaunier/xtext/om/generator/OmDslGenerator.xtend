/*
 * generated by Xtext
 */
package fr.chaunier.xtext.om.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import fr.chaunier.xtext.om.omDsl.*
import com.google.inject.Inject
import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*

class OmDslGenerator implements IGenerator {

  @Inject extension GeneratorExtensions generatorExtensions
	
  override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    for(entity: resource.allContentsIterable.filter(typeof(Entity))) {
      fsa.generateFile(entity.fileName, entity.compile)
      fsa.generateFile(entity.xmlFileName, entity.compileXml)
    }
  }


  def body(Entity e, ImportManager importManager) '''
    public class «e.name» «e.superTypeClause(importManager)»{
      «FOR f:e.features.filter(typeof(Attribute))»
        «feature(f, importManager)»
      «ENDFOR»
    }
  '''

  def superTypeClause(Entity e, ImportManager importManager) {
    if(e.superType != null)
        'extends ' + e.superType.shortName(importManager) + " "
    else ""
  }

  def dispatch feature(Attribute a, ImportManager importManager) '''

    private «a.type.referenced.shortName(importManager)» «a.name»;

    public «a.type.referenced.shortName(importManager)» get«a.name.toFirstUpper»() {
      return «a.name»;
    }

    public void set«a.name.toFirstUpper»(«a.type.referenced.shortName(importManager)» «a.name») {
      this.«a.name» = «a.name»;
    }
  '''

 
  def compile(Entity e) '''
    «val importManager = new ImportManager(true)»
    «// first evaluate the body in order to collect the used types for the import section 
    val body = body(e, importManager)»
    «IF !(e.packageName.isNullOrEmpty)»
      package «e.packageName»;

    «ENDIF»
    «FOR i:importManager.imports»
      import «i»;
    «ENDFOR»

    «body»
  '''

  def compileXml (Entity e) {
  '''<?xml version="1.0"?>
<«e.name»«IF e.superType!=null» super="«e.superType.name»"«ENDIF»>
    «FOR p:e.features.filter(typeof(Attribute))»
    <«p.name» type="«p.type.referenced.name»"/>
    «ENDFOR»
</«e.name»>
    '''
  }

}
