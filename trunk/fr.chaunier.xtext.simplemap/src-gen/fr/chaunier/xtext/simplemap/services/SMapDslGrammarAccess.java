/*
* generated by Xtext
*/

package fr.chaunier.xtext.simplemap.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SMapDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cMappingModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMappingModulesMappingModuleParserRuleCall_0 = (RuleCall)cMappingModulesAssignment.eContents().get(0);
		
		//Model: //	(imports+=Import)* // allow imports
		//	mappingModules+=MappingModule*;
		public ParserRule getRule() { return rule; }

		////	(imports+=Import)* // allow imports
		//mappingModules+=MappingModule*
		public Assignment getMappingModulesAssignment() { return cMappingModulesAssignment; }

		//MappingModule
		public RuleCall getMappingModulesMappingModuleParserRuleCall_0() { return cMappingModulesMappingModuleParserRuleCall_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////Import :
		////	'import' importedNamespace=QualifiedNameWithWildCard;
		//QualifiedNameWithWildCard returns ecore::EString:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class MappingModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMappedFeaturesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMappedFeaturesFeatureMapParserRuleCall_3_0_0 = (RuleCall)cMappedFeaturesAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MappingModule:
		//	"module" name=QualifiedName "{" (mappedFeatures+=FeatureMap ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//"module" name=QualifiedName "{" (mappedFeatures+=FeatureMap ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(mappedFeatures+=FeatureMap ";"?)*
		public Group getGroup_3() { return cGroup_3; }

		//mappedFeatures+=FeatureMap
		public Assignment getMappedFeaturesAssignment_3_0() { return cMappedFeaturesAssignment_3_0; }

		//FeatureMap
		public RuleCall getMappedFeaturesFeatureMapParserRuleCall_3_0_0() { return cMappedFeaturesFeatureMapParserRuleCall_3_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FeatureMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMap");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMapKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLeftFieldAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cLeftFieldAttributeCrossReference_0_1_0 = (CrossReference)cLeftFieldAssignment_0_1.eContents().get(0);
		private final RuleCall cLeftFieldAttributeQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cLeftFieldAttributeCrossReference_0_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRightFieldAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cRightFieldAttributeCrossReference_0_3_0 = (CrossReference)cRightFieldAssignment_0_3.eContents().get(0);
		private final RuleCall cRightFieldAttributeQualifiedNameParserRuleCall_0_3_0_1 = (RuleCall)cRightFieldAttributeCrossReference_0_3_0.eContents().get(1);
		private final Assignment cRuleAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRuleSTRINGTerminalRuleCall_0_4_0 = (RuleCall)cRuleAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSetLeftKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSetLeftFieldAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSetLeftFieldAttributeCrossReference_1_1_0 = (CrossReference)cSetLeftFieldAssignment_1_1.eContents().get(0);
		private final RuleCall cSetLeftFieldAttributeQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cSetLeftFieldAttributeCrossReference_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValLeftAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValLeftSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cValLeftAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSetRightKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSetRightFieldAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSetRightFieldAttributeCrossReference_2_1_0 = (CrossReference)cSetRightFieldAssignment_2_1.eContents().get(0);
		private final RuleCall cSetRightFieldAttributeQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSetRightFieldAttributeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cValRightSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cValRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIgnoreLeftKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIgnoreLeftFieldAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cIgnoreLeftFieldAttributeCrossReference_3_1_0 = (CrossReference)cIgnoreLeftFieldAssignment_3_1.eContents().get(0);
		private final RuleCall cIgnoreLeftFieldAttributeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cIgnoreLeftFieldAttributeCrossReference_3_1_0.eContents().get(1);
		private final Assignment cDocumentationAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cDocumentationAssignment_3_2.eContents().get(0);
		
		//FeatureMap:
		//	"map" leftField=[mm::Attribute|QualifiedName] "=>" rightField=[mm::Attribute|QualifiedName] rule=STRING? | "set left"
		//	setLeftField=[mm::Attribute|QualifiedName] "=" valLeft=STRING | "set right"
		//	setRightField=[mm::Attribute|QualifiedName] "=" valRight=STRING | "ignore left"
		//	ignoreLeftField=[mm::Attribute|QualifiedName] documentation=STRING?;
		public ParserRule getRule() { return rule; }

		//"map" leftField=[mm::Attribute|QualifiedName] "=>" rightField=[mm::Attribute|QualifiedName] rule=STRING? | "set left"
		//setLeftField=[mm::Attribute|QualifiedName] "=" valLeft=STRING | "set right" setRightField=[mm::Attribute|QualifiedName]
		//"=" valRight=STRING | "ignore left" ignoreLeftField=[mm::Attribute|QualifiedName] documentation=STRING?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"map" leftField=[mm::Attribute|QualifiedName] "=>" rightField=[mm::Attribute|QualifiedName] rule=STRING?
		public Group getGroup_0() { return cGroup_0; }

		//"map"
		public Keyword getMapKeyword_0_0() { return cMapKeyword_0_0; }

		//leftField=[mm::Attribute|QualifiedName]
		public Assignment getLeftFieldAssignment_0_1() { return cLeftFieldAssignment_0_1; }

		//[mm::Attribute|QualifiedName]
		public CrossReference getLeftFieldAttributeCrossReference_0_1_0() { return cLeftFieldAttributeCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getLeftFieldAttributeQualifiedNameParserRuleCall_0_1_0_1() { return cLeftFieldAttributeQualifiedNameParserRuleCall_0_1_0_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0_2() { return cEqualsSignGreaterThanSignKeyword_0_2; }

		//rightField=[mm::Attribute|QualifiedName]
		public Assignment getRightFieldAssignment_0_3() { return cRightFieldAssignment_0_3; }

		//[mm::Attribute|QualifiedName]
		public CrossReference getRightFieldAttributeCrossReference_0_3_0() { return cRightFieldAttributeCrossReference_0_3_0; }

		//QualifiedName
		public RuleCall getRightFieldAttributeQualifiedNameParserRuleCall_0_3_0_1() { return cRightFieldAttributeQualifiedNameParserRuleCall_0_3_0_1; }

		//rule=STRING?
		public Assignment getRuleAssignment_0_4() { return cRuleAssignment_0_4; }

		//STRING
		public RuleCall getRuleSTRINGTerminalRuleCall_0_4_0() { return cRuleSTRINGTerminalRuleCall_0_4_0; }

		//"set left" setLeftField=[mm::Attribute|QualifiedName] "=" valLeft=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"set left"
		public Keyword getSetLeftKeyword_1_0() { return cSetLeftKeyword_1_0; }

		//setLeftField=[mm::Attribute|QualifiedName]
		public Assignment getSetLeftFieldAssignment_1_1() { return cSetLeftFieldAssignment_1_1; }

		//[mm::Attribute|QualifiedName]
		public CrossReference getSetLeftFieldAttributeCrossReference_1_1_0() { return cSetLeftFieldAttributeCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getSetLeftFieldAttributeQualifiedNameParserRuleCall_1_1_0_1() { return cSetLeftFieldAttributeQualifiedNameParserRuleCall_1_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//valLeft=STRING
		public Assignment getValLeftAssignment_1_3() { return cValLeftAssignment_1_3; }

		//STRING
		public RuleCall getValLeftSTRINGTerminalRuleCall_1_3_0() { return cValLeftSTRINGTerminalRuleCall_1_3_0; }

		//"set right" setRightField=[mm::Attribute|QualifiedName] "=" valRight=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"set right"
		public Keyword getSetRightKeyword_2_0() { return cSetRightKeyword_2_0; }

		//setRightField=[mm::Attribute|QualifiedName]
		public Assignment getSetRightFieldAssignment_2_1() { return cSetRightFieldAssignment_2_1; }

		//[mm::Attribute|QualifiedName]
		public CrossReference getSetRightFieldAttributeCrossReference_2_1_0() { return cSetRightFieldAttributeCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSetRightFieldAttributeQualifiedNameParserRuleCall_2_1_0_1() { return cSetRightFieldAttributeQualifiedNameParserRuleCall_2_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//valRight=STRING
		public Assignment getValRightAssignment_2_3() { return cValRightAssignment_2_3; }

		//STRING
		public RuleCall getValRightSTRINGTerminalRuleCall_2_3_0() { return cValRightSTRINGTerminalRuleCall_2_3_0; }

		//"ignore left" ignoreLeftField=[mm::Attribute|QualifiedName] documentation=STRING?
		public Group getGroup_3() { return cGroup_3; }

		//"ignore left"
		public Keyword getIgnoreLeftKeyword_3_0() { return cIgnoreLeftKeyword_3_0; }

		//ignoreLeftField=[mm::Attribute|QualifiedName]
		public Assignment getIgnoreLeftFieldAssignment_3_1() { return cIgnoreLeftFieldAssignment_3_1; }

		//[mm::Attribute|QualifiedName]
		public CrossReference getIgnoreLeftFieldAttributeCrossReference_3_1_0() { return cIgnoreLeftFieldAttributeCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getIgnoreLeftFieldAttributeQualifiedNameParserRuleCall_3_1_0_1() { return cIgnoreLeftFieldAttributeQualifiedNameParserRuleCall_3_1_0_1; }

		//documentation=STRING?
		public Assignment getDocumentationAssignment_3_2() { return cDocumentationAssignment_3_2; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_3_2_0() { return cDocumentationSTRINGTerminalRuleCall_3_2_0; }
	}
	
	
	private ModelElements pModel;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private QualifiedNameElements pQualifiedName;
	private MappingModuleElements pMappingModule;
	private FeatureMapElements pFeatureMap;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SMapDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model: //	(imports+=Import)* // allow imports
	//	mappingModules+=MappingModule*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////Import :
	////	'import' importedNamespace=QualifiedNameWithWildCard;
	//QualifiedNameWithWildCard returns ecore::EString:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//MappingModule:
	//	"module" name=QualifiedName "{" (mappedFeatures+=FeatureMap ";"?)* "}";
	public MappingModuleElements getMappingModuleAccess() {
		return (pMappingModule != null) ? pMappingModule : (pMappingModule = new MappingModuleElements());
	}
	
	public ParserRule getMappingModuleRule() {
		return getMappingModuleAccess().getRule();
	}

	//FeatureMap:
	//	"map" leftField=[mm::Attribute|QualifiedName] "=>" rightField=[mm::Attribute|QualifiedName] rule=STRING? | "set left"
	//	setLeftField=[mm::Attribute|QualifiedName] "=" valLeft=STRING | "set right"
	//	setRightField=[mm::Attribute|QualifiedName] "=" valRight=STRING | "ignore left"
	//	ignoreLeftField=[mm::Attribute|QualifiedName] documentation=STRING?;
	public FeatureMapElements getFeatureMapAccess() {
		return (pFeatureMap != null) ? pFeatureMap : (pFeatureMap = new FeatureMapElements());
	}
	
	public ParserRule getFeatureMapRule() {
		return getFeatureMapAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
