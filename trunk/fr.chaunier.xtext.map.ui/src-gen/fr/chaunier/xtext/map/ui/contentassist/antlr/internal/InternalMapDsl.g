/*
* generated by Xtext
*/
grammar InternalMapDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.chaunier.xtext.map.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.chaunier.xtext.map.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.chaunier.xtext.map.services.MapDslGrammarAccess;

}

@parser::members {
 
 	private MapDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MapDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getMappingModulesAssignment()); }
(rule__Model__MappingModulesAssignment)*
{ after(grammarAccess.getModelAccess().getMappingModulesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard 
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
(rule__QualifiedNameWithWildCard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMappingModule
entryRuleMappingModule 
:
{ before(grammarAccess.getMappingModuleRule()); }
	 ruleMappingModule
{ after(grammarAccess.getMappingModuleRule()); } 
	 EOF 
;

// Rule MappingModule
ruleMappingModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingModuleAccess().getGroup()); }
(rule__MappingModule__Group__0)
{ after(grammarAccess.getMappingModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureMap
entryRuleFeatureMap 
:
{ before(grammarAccess.getFeatureMapRule()); }
	 ruleFeatureMap
{ after(grammarAccess.getFeatureMapRule()); } 
	 EOF 
;

// Rule FeatureMap
ruleFeatureMap
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureMapAccess().getAlternatives()); }
(rule__FeatureMap__Alternatives)
{ after(grammarAccess.getFeatureMapAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__FeatureMap__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getGroup_0()); }
(rule__FeatureMap__Group_0__0)
{ after(grammarAccess.getFeatureMapAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFeatureMapAccess().getGroup_1()); }
(rule__FeatureMap__Group_1__0)
{ after(grammarAccess.getFeatureMapAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getFeatureMapAccess().getGroup_2()); }
(rule__FeatureMap__Group_2__0)
{ after(grammarAccess.getFeatureMapAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getFeatureMapAccess().getGroup_3()); }
(rule__FeatureMap__Group_3__0)
{ after(grammarAccess.getFeatureMapAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__0__Impl
	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MappingModule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModule__Group__0__Impl
	rule__MappingModule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getModuleKeyword_0()); }

	'module' 

{ after(grammarAccess.getMappingModuleAccess().getModuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModule__Group__1__Impl
	rule__MappingModule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getNameAssignment_1()); }
(rule__MappingModule__NameAssignment_1)
{ after(grammarAccess.getMappingModuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModule__Group__2__Impl
	rule__MappingModule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMappingModuleAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModule__Group__3__Impl
	rule__MappingModule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getImportsAssignment_3()); }
(rule__MappingModule__ImportsAssignment_3)*
{ after(grammarAccess.getMappingModuleAccess().getImportsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModule__Group__4__Impl
	rule__MappingModule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getMappingsAssignment_4()); }
(rule__MappingModule__MappingsAssignment_4)*
{ after(grammarAccess.getMappingModuleAccess().getMappingsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getMappingModuleAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getMapClassKeyword_0()); }

	'mapClass' 

{ after(grammarAccess.getMappingAccess().getMapClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getNameAssignment_1()); }
(rule__Mapping__NameAssignment_1)?
{ after(grammarAccess.getMappingAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
	rule__Mapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getBetweenKeyword_2()); }

	'between' 

{ after(grammarAccess.getMappingAccess().getBetweenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__3__Impl
	rule__Mapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLeftClassAssignment_3()); }
(rule__Mapping__LeftClassAssignment_3)
{ after(grammarAccess.getMappingAccess().getLeftClassAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__4__Impl
	rule__Mapping__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAndKeyword_4()); }

	'and' 

{ after(grammarAccess.getMappingAccess().getAndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__5__Impl
	rule__Mapping__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getRightClassAssignment_5()); }
(rule__Mapping__RightClassAssignment_5)
{ after(grammarAccess.getMappingAccess().getRightClassAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__6__Impl
	rule__Mapping__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getDocumentationAssignment_6()); }
(rule__Mapping__DocumentationAssignment_6)?
{ after(grammarAccess.getMappingAccess().getDocumentationAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__7__Impl
	rule__Mapping__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_7()); }

	'{' 

{ after(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__8__Impl
	rule__Mapping__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getGroup_8()); }
(rule__Mapping__Group_8__0)*
{ after(grammarAccess.getMappingAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Mapping__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group_8__0__Impl
	rule__Mapping__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getMappedFeaturesAssignment_8_0()); }
(rule__Mapping__MappedFeaturesAssignment_8_0)
{ after(grammarAccess.getMappingAccess().getMappedFeaturesAssignment_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getSemicolonKeyword_8_1()); }
(
	';' 
)?
{ after(grammarAccess.getMappingAccess().getSemicolonKeyword_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FeatureMap__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_0__0__Impl
	rule__FeatureMap__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getMapKeyword_0_0()); }

	'map' 

{ after(grammarAccess.getFeatureMapAccess().getMapKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_0__1__Impl
	rule__FeatureMap__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getLeftFieldAssignment_0_1()); }
(rule__FeatureMap__LeftFieldAssignment_0_1)
{ after(grammarAccess.getFeatureMapAccess().getLeftFieldAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_0__2__Impl
	rule__FeatureMap__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getEqualsSignGreaterThanSignKeyword_0_2()); }

	'=>' 

{ after(grammarAccess.getFeatureMapAccess().getEqualsSignGreaterThanSignKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_0__3__Impl
	rule__FeatureMap__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getRightFieldAssignment_0_3()); }
(rule__FeatureMap__RightFieldAssignment_0_3)
{ after(grammarAccess.getFeatureMapAccess().getRightFieldAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getRuleAssignment_0_4()); }
(rule__FeatureMap__RuleAssignment_0_4)?
{ after(grammarAccess.getFeatureMapAccess().getRuleAssignment_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FeatureMap__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_1__0__Impl
	rule__FeatureMap__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getSetLeftKeyword_1_0()); }

	'set left' 

{ after(grammarAccess.getFeatureMapAccess().getSetLeftKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_1__1__Impl
	rule__FeatureMap__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getSetLeftFieldAssignment_1_1()); }
(rule__FeatureMap__SetLeftFieldAssignment_1_1)
{ after(grammarAccess.getFeatureMapAccess().getSetLeftFieldAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_1__2__Impl
	rule__FeatureMap__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getEqualsSignKeyword_1_2()); }

	'=' 

{ after(grammarAccess.getFeatureMapAccess().getEqualsSignKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getValLeftAssignment_1_3()); }
(rule__FeatureMap__ValLeftAssignment_1_3)
{ after(grammarAccess.getFeatureMapAccess().getValLeftAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FeatureMap__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_2__0__Impl
	rule__FeatureMap__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getSetRightKeyword_2_0()); }

	'set right' 

{ after(grammarAccess.getFeatureMapAccess().getSetRightKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_2__1__Impl
	rule__FeatureMap__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getSetRightFieldAssignment_2_1()); }
(rule__FeatureMap__SetRightFieldAssignment_2_1)
{ after(grammarAccess.getFeatureMapAccess().getSetRightFieldAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_2__2__Impl
	rule__FeatureMap__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getEqualsSignKeyword_2_2()); }

	'=' 

{ after(grammarAccess.getFeatureMapAccess().getEqualsSignKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getValRightAssignment_2_3()); }
(rule__FeatureMap__ValRightAssignment_2_3)
{ after(grammarAccess.getFeatureMapAccess().getValRightAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FeatureMap__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_3__0__Impl
	rule__FeatureMap__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getIgnoreLeftKeyword_3_0()); }

	'ignore left' 

{ after(grammarAccess.getFeatureMapAccess().getIgnoreLeftKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_3__1__Impl
	rule__FeatureMap__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getIgnoreLeftFieldAssignment_3_1()); }
(rule__FeatureMap__IgnoreLeftFieldAssignment_3_1)
{ after(grammarAccess.getFeatureMapAccess().getIgnoreLeftFieldAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureMap__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureMap__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getDocumentationAssignment_3_2()); }
(rule__FeatureMap__DocumentationAssignment_3_2)?
{ after(grammarAccess.getFeatureMapAccess().getDocumentationAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__MappingModulesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMappingModulesMappingModuleParserRuleCall_0()); }
	ruleMappingModule{ after(grammarAccess.getModelAccess().getMappingModulesMappingModuleParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildCard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getMappingModuleAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__ImportsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getImportsImportParserRuleCall_3_0()); }
	ruleImport{ after(grammarAccess.getMappingModuleAccess().getImportsImportParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModule__MappingsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModuleAccess().getMappingsMappingParserRuleCall_4_0()); }
	ruleMapping{ after(grammarAccess.getMappingModuleAccess().getMappingsMappingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getMappingAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__LeftClassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLeftClassEntityCrossReference_3_0()); }
(
{ before(grammarAccess.getMappingAccess().getLeftClassEntityQualifiedNameParserRuleCall_3_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getMappingAccess().getLeftClassEntityQualifiedNameParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getMappingAccess().getLeftClassEntityCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__RightClassAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getRightClassEntityCrossReference_5_0()); }
(
{ before(grammarAccess.getMappingAccess().getRightClassEntityQualifiedNameParserRuleCall_5_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getMappingAccess().getRightClassEntityQualifiedNameParserRuleCall_5_0_1()); }
)
{ after(grammarAccess.getMappingAccess().getRightClassEntityCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__DocumentationAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getDocumentationSTRINGTerminalRuleCall_6_0()); }
	RULE_STRING{ after(grammarAccess.getMappingAccess().getDocumentationSTRINGTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__MappedFeaturesAssignment_8_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getMappedFeaturesFeatureMapParserRuleCall_8_0_0()); }
	ruleFeatureMap{ after(grammarAccess.getMappingAccess().getMappedFeaturesFeatureMapParserRuleCall_8_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__LeftFieldAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getLeftFieldAttributeCrossReference_0_1_0()); }
(
{ before(grammarAccess.getFeatureMapAccess().getLeftFieldAttributeQualifiedNameParserRuleCall_0_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getFeatureMapAccess().getLeftFieldAttributeQualifiedNameParserRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getFeatureMapAccess().getLeftFieldAttributeCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__RightFieldAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getRightFieldAttributeCrossReference_0_3_0()); }
(
{ before(grammarAccess.getFeatureMapAccess().getRightFieldAttributeIDTerminalRuleCall_0_3_0_1()); }
	RULE_ID{ after(grammarAccess.getFeatureMapAccess().getRightFieldAttributeIDTerminalRuleCall_0_3_0_1()); }
)
{ after(grammarAccess.getFeatureMapAccess().getRightFieldAttributeCrossReference_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__RuleAssignment_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getRuleSTRINGTerminalRuleCall_0_4_0()); }
	RULE_STRING{ after(grammarAccess.getFeatureMapAccess().getRuleSTRINGTerminalRuleCall_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__SetLeftFieldAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getSetLeftFieldAttributeCrossReference_1_1_0()); }
(
{ before(grammarAccess.getFeatureMapAccess().getSetLeftFieldAttributeIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFeatureMapAccess().getSetLeftFieldAttributeIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getFeatureMapAccess().getSetLeftFieldAttributeCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__ValLeftAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getValLeftSTRINGTerminalRuleCall_1_3_0()); }
	RULE_STRING{ after(grammarAccess.getFeatureMapAccess().getValLeftSTRINGTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__SetRightFieldAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeCrossReference_2_1_0()); }
(
{ before(grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__ValRightAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getValRightSTRINGTerminalRuleCall_2_3_0()); }
	RULE_STRING{ after(grammarAccess.getFeatureMapAccess().getValRightSTRINGTerminalRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__IgnoreLeftFieldAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getIgnoreLeftFieldAttributeCrossReference_3_1_0()); }
(
{ before(grammarAccess.getFeatureMapAccess().getIgnoreLeftFieldAttributeIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFeatureMapAccess().getIgnoreLeftFieldAttributeIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getFeatureMapAccess().getIgnoreLeftFieldAttributeCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureMap__DocumentationAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureMapAccess().getDocumentationSTRINGTerminalRuleCall_3_2_0()); }
	RULE_STRING{ after(grammarAccess.getFeatureMapAccess().getDocumentationSTRINGTerminalRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


