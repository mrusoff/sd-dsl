/*
* generated by Xtext
*/
package fr.chaunier.xtext.instance.om.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.chaunier.xtext.instance.om.services.InstanceDslGrammarAccess;

public class InstanceDslParser extends AbstractContentAssistParser {
	
	@Inject
	private InstanceDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.chaunier.xtext.instance.om.ui.contentassist.antlr.internal.InternalInstanceDslParser createParser() {
		fr.chaunier.xtext.instance.om.ui.contentassist.antlr.internal.InternalInstanceDslParser result = new fr.chaunier.xtext.instance.om.ui.contentassist.antlr.internal.InternalInstanceDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureAccess().getAlternatives_1(), "rule__Feature__Alternatives_1");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getFactoryAccess().getGroup(), "rule__Factory__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getNewObjectAccess().getGroup(), "rule__NewObject__Group__0");
					put(grammarAccess.getEnumAttributeAccess().getGroup(), "rule__EnumAttribute__Group__0");
					put(grammarAccess.getNewAccess().getGroup(), "rule__New__Group__0");
					put(grammarAccess.getFactoryAccess().getImportsAssignment_0(), "rule__Factory__ImportsAssignment_0");
					put(grammarAccess.getFactoryAccess().getRootAssignment_1(), "rule__Factory__RootAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getFeatureAccess().getEFeatureAssignment_0(), "rule__Feature__EFeatureAssignment_0");
					put(grammarAccess.getFeatureAccess().getIsManyAssignment_1_0(), "rule__Feature__IsManyAssignment_1_0");
					put(grammarAccess.getFeatureAccess().getValueAssignment_2(), "rule__Feature__ValueAssignment_2");
					put(grammarAccess.getNewObjectAccess().getEClassAssignment_0(), "rule__NewObject__EClassAssignment_0");
					put(grammarAccess.getNewObjectAccess().getNameAssignment_1(), "rule__NewObject__NameAssignment_1");
					put(grammarAccess.getNewObjectAccess().getFeaturesAssignment_3(), "rule__NewObject__FeaturesAssignment_3");
					put(grammarAccess.getReferenceAccess().getValueAssignment(), "rule__Reference__ValueAssignment");
					put(grammarAccess.getContainmentAccess().getValueAssignment(), "rule__Containment__ValueAssignment");
					put(grammarAccess.getEnumAttributeAccess().getValueAssignment_1(), "rule__EnumAttribute__ValueAssignment_1");
					put(grammarAccess.getTerminalExpressionAccess().getThisAssignment_0(), "rule__TerminalExpression__ThisAssignment_0");
					put(grammarAccess.getTerminalExpressionAccess().getNewAssignment_1(), "rule__TerminalExpression__NewAssignment_1");
					put(grammarAccess.getTerminalExpressionAccess().getIntAssignment_2(), "rule__TerminalExpression__IntAssignment_2");
					put(grammarAccess.getTerminalExpressionAccess().getStringAssignment_3(), "rule__TerminalExpression__StringAssignment_3");
					put(grammarAccess.getTerminalExpressionAccess().getNullAssignment_4(), "rule__TerminalExpression__NullAssignment_4");
					put(grammarAccess.getThisAccess().getVariableAssignment(), "rule__This__VariableAssignment");
					put(grammarAccess.getNewAccess().getTypeAssignment_1(), "rule__New__TypeAssignment_1");
					put(grammarAccess.getInteroAccess().getValueAssignment(), "rule__Intero__ValueAssignment");
					put(grammarAccess.getStringaAccess().getValueAssignment(), "rule__Stringa__ValueAssignment");
					put(grammarAccess.getNulloAccess().getValueAssignment(), "rule__Nullo__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.chaunier.xtext.instance.om.ui.contentassist.antlr.internal.InternalInstanceDslParser typedParser = (fr.chaunier.xtext.instance.om.ui.contentassist.antlr.internal.InternalInstanceDslParser) parser;
			typedParser.entryRuleFactory();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public InstanceDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(InstanceDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
