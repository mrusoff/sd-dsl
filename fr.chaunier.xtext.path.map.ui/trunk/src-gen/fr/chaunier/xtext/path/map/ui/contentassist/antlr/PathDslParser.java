/*
* generated by Xtext
*/
package fr.chaunier.xtext.path.map.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.chaunier.xtext.path.map.services.PathDslGrammarAccess;

public class PathDslParser extends AbstractContentAssistParser {
	
	@Inject
	private PathDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.chaunier.xtext.path.map.ui.contentassist.antlr.internal.InternalPathDslParser createParser() {
		fr.chaunier.xtext.path.map.ui.contentassist.antlr.internal.InternalPathDslParser result = new fr.chaunier.xtext.path.map.ui.contentassist.antlr.internal.InternalPathDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getPathElementAccess().getAlternatives(), "rule__PathElement__Alternatives");
					put(grammarAccess.getSpecLineAccess().getAlternatives(), "rule__SpecLine__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getBoolVarAccess().getAlternatives(), "rule__BoolVar__Alternatives");
					put(grammarAccess.getInOutAccess().getAlternatives(), "rule__InOut__Alternatives");
					put(grammarAccess.getModelMapAccess().getGroup(), "rule__ModelMap__Group__0");
					put(grammarAccess.getModelMapAccess().getGroup_0(), "rule__ModelMap__Group_0__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getMapEntityAccess().getGroup(), "rule__MapEntity__Group__0");
					put(grammarAccess.getCallMapEntityAccess().getGroup(), "rule__CallMapEntity__Group__0");
					put(grammarAccess.getCallMapEntityAccess().getGroup_2(), "rule__CallMapEntity__Group_2__0");
					put(grammarAccess.getDocumentAccess().getGroup(), "rule__Document__Group__0");
					put(grammarAccess.getRuleDefAccess().getGroup(), "rule__RuleDef__Group__0");
					put(grammarAccess.getRuleDefAccess().getGroup_2(), "rule__RuleDef__Group_2__0");
					put(grammarAccess.getFunctionDefAccess().getGroup(), "rule__FunctionDef__Group__0");
					put(grammarAccess.getFunctionDefAccess().getGroup_2(), "rule__FunctionDef__Group_2__0");
					put(grammarAccess.getFunctionParamAccess().getGroup(), "rule__FunctionParam__Group__0");
					put(grammarAccess.getFeaturePathAccess().getGroup(), "rule__FeaturePath__Group__0");
					put(grammarAccess.getFeaturePathAccess().getGroup_3(), "rule__FeaturePath__Group_3__0");
					put(grammarAccess.getFeatureSetAccess().getGroup(), "rule__FeatureSet__Group__0");
					put(grammarAccess.getFeaturePathFromAccess().getGroup(), "rule__FeaturePathFrom__Group__0");
					put(grammarAccess.getFeaturePathToAccess().getGroup(), "rule__FeaturePathTo__Group__0");
					put(grammarAccess.getPathHeadAccess().getGroup(), "rule__PathHead__Group__0");
					put(grammarAccess.getPathTailAccess().getGroup(), "rule__PathTail__Group__0");
					put(grammarAccess.getFileSpecModelAccess().getGroup(), "rule__FileSpecModel__Group__0");
					put(grammarAccess.getFileSpecModelAccess().getGroup_1(), "rule__FileSpecModel__Group_1__0");
					put(grammarAccess.getFileSpecModelAccess().getGroup_2(), "rule__FileSpecModel__Group_2__0");
					put(grammarAccess.getSpecInfoAccess().getGroup(), "rule__SpecInfo__Group__0");
					put(grammarAccess.getSpecVersionAccess().getGroup(), "rule__SpecVersion__Group__0");
					put(grammarAccess.getSpecVersionAccess().getGroup_2(), "rule__SpecVersion__Group_2__0");
					put(grammarAccess.getModelMapAccess().getSpecAssignment_0_1(), "rule__ModelMap__SpecAssignment_0_1");
					put(grammarAccess.getModelMapAccess().getImportsAssignment_1(), "rule__ModelMap__ImportsAssignment_1");
					put(grammarAccess.getModelMapAccess().getRulesAssignment_2(), "rule__ModelMap__RulesAssignment_2");
					put(grammarAccess.getModelMapAccess().getMappingAssignment_3(), "rule__ModelMap__MappingAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getMapEntityAccess().getNameAssignment_1(), "rule__MapEntity__NameAssignment_1");
					put(grammarAccess.getMapEntityAccess().getEntityFromAssignment_3(), "rule__MapEntity__EntityFromAssignment_3");
					put(grammarAccess.getMapEntityAccess().getEntityToAssignment_5(), "rule__MapEntity__EntityToAssignment_5");
					put(grammarAccess.getMapEntityAccess().getActionsAssignment_7(), "rule__MapEntity__ActionsAssignment_7");
					put(grammarAccess.getCallMapEntityAccess().getMappingAssignment_1(), "rule__CallMapEntity__MappingAssignment_1");
					put(grammarAccess.getCallMapEntityAccess().getFeaturePathAssignment_2_1(), "rule__CallMapEntity__FeaturePathAssignment_2_1");
					put(grammarAccess.getDocumentAccess().getDocumentAssignment_1(), "rule__Document__DocumentAssignment_1");
					put(grammarAccess.getRuleDefAccess().getNameAssignment_1(), "rule__RuleDef__NameAssignment_1");
					put(grammarAccess.getRuleDefAccess().getOperationAssignment_2_1(), "rule__RuleDef__OperationAssignment_2_1");
					put(grammarAccess.getRuleDefAccess().getDescriptionAssignment_3(), "rule__RuleDef__DescriptionAssignment_3");
					put(grammarAccess.getFunctionDefAccess().getNameAssignment_1(), "rule__FunctionDef__NameAssignment_1");
					put(grammarAccess.getFunctionDefAccess().getRuleAssignment_2_1(), "rule__FunctionDef__RuleAssignment_2_1");
					put(grammarAccess.getFunctionDefAccess().getDescriptionAssignment_3(), "rule__FunctionDef__DescriptionAssignment_3");
					put(grammarAccess.getFunctionDefAccess().getParamsAssignment_5(), "rule__FunctionDef__ParamsAssignment_5");
					put(grammarAccess.getFunctionParamAccess().getInAssignment_0(), "rule__FunctionParam__InAssignment_0");
					put(grammarAccess.getFunctionParamAccess().getPathAssignment_1(), "rule__FunctionParam__PathAssignment_1");
					put(grammarAccess.getFeaturePathAccess().getFromAssignment_0(), "rule__FeaturePath__FromAssignment_0");
					put(grammarAccess.getFeaturePathAccess().getToAssignment_1(), "rule__FeaturePath__ToAssignment_1");
					put(grammarAccess.getFeaturePathAccess().getForEachAssignment_2(), "rule__FeaturePath__ForEachAssignment_2");
					put(grammarAccess.getFeaturePathAccess().getRuleAssignment_3_1(), "rule__FeaturePath__RuleAssignment_3_1");
					put(grammarAccess.getFeaturePathAccess().getDescriptionAssignment_4(), "rule__FeaturePath__DescriptionAssignment_4");
					put(grammarAccess.getFeatureSetAccess().getInAssignment_1(), "rule__FeatureSet__InAssignment_1");
					put(grammarAccess.getFeatureSetAccess().getPathAssignment_2(), "rule__FeatureSet__PathAssignment_2");
					put(grammarAccess.getFeatureSetAccess().getValueAssignment_4(), "rule__FeatureSet__ValueAssignment_4");
					put(grammarAccess.getFeatureSetAccess().getDescriptionAssignment_5(), "rule__FeatureSet__DescriptionAssignment_5");
					put(grammarAccess.getFeaturePathFromAccess().getPathAssignment_1(), "rule__FeaturePathFrom__PathAssignment_1");
					put(grammarAccess.getFeaturePathToAccess().getPathAssignment_1(), "rule__FeaturePathTo__PathAssignment_1");
					put(grammarAccess.getPathHeadAccess().getEntityAssignment_0(), "rule__PathHead__EntityAssignment_0");
					put(grammarAccess.getPathHeadAccess().getTailAssignment_1(), "rule__PathHead__TailAssignment_1");
					put(grammarAccess.getPathTailAccess().getFeatureAssignment_1(), "rule__PathTail__FeatureAssignment_1");
					put(grammarAccess.getPathTailAccess().getTailAssignment_2(), "rule__PathTail__TailAssignment_2");
					put(grammarAccess.getFileSpecModelAccess().getMappingAssignment_0(), "rule__FileSpecModel__MappingAssignment_0");
					put(grammarAccess.getFileSpecModelAccess().getSourcePathAssignment_1_1(), "rule__FileSpecModel__SourcePathAssignment_1_1");
					put(grammarAccess.getFileSpecModelAccess().getTargetPathAssignment_2_1(), "rule__FileSpecModel__TargetPathAssignment_2_1");
					put(grammarAccess.getFileSpecModelAccess().getSpecLinesAssignment_3(), "rule__FileSpecModel__SpecLinesAssignment_3");
					put(grammarAccess.getSpecInfoAccess().getTitleAssignment_1(), "rule__SpecInfo__TitleAssignment_1");
					put(grammarAccess.getSpecInfoAccess().getLabelAssignment_2(), "rule__SpecInfo__LabelAssignment_2");
					put(grammarAccess.getSpecVersionAccess().getVersionAssignment_1(), "rule__SpecVersion__VersionAssignment_1");
					put(grammarAccess.getSpecVersionAccess().getCommentAssignment_2_1(), "rule__SpecVersion__CommentAssignment_2_1");
					put(grammarAccess.getTerminalExpressionAccess().getIntAssignment_0(), "rule__TerminalExpression__IntAssignment_0");
					put(grammarAccess.getTerminalExpressionAccess().getNumberAssignment_1(), "rule__TerminalExpression__NumberAssignment_1");
					put(grammarAccess.getTerminalExpressionAccess().getNullAssignment_2(), "rule__TerminalExpression__NullAssignment_2");
					put(grammarAccess.getTerminalExpressionAccess().getBoolAssignment_3(), "rule__TerminalExpression__BoolAssignment_3");
					put(grammarAccess.getTerminalExpressionAccess().getStringAssignment_4(), "rule__TerminalExpression__StringAssignment_4");
					put(grammarAccess.getIntVarAccess().getValueAssignment(), "rule__IntVar__ValueAssignment");
					put(grammarAccess.getNumberVarAccess().getValueAssignment(), "rule__NumberVar__ValueAssignment");
					put(grammarAccess.getStringVarAccess().getValueAssignment(), "rule__StringVar__ValueAssignment");
					put(grammarAccess.getNullVarAccess().getValueAssignment(), "rule__NullVar__ValueAssignment");
					put(grammarAccess.getBoolVarAccess().getValueAssignment_0(), "rule__BoolVar__ValueAssignment_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.chaunier.xtext.path.map.ui.contentassist.antlr.internal.InternalPathDslParser typedParser = (fr.chaunier.xtext.path.map.ui.contentassist.antlr.internal.InternalPathDslParser) parser;
			typedParser.entryRuleModelMap();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PathDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PathDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
