/*
* generated by Xtext
*/
grammar InternalInstanceDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.chaunier.xtext.instance.om.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.chaunier.xtext.instance.om.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.chaunier.xtext.instance.om.services.InstanceDslGrammarAccess;

}

@parser::members {

 	private InstanceDslGrammarAccess grammarAccess;
 	
    public InternalInstanceDslParser(TokenStream input, InstanceDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Factory";	
   	}
   	
   	@Override
   	protected InstanceDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFactory
entryRuleFactory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactoryRule()); }
	 iv_ruleFactory=ruleFactory 
	 { $current=$iv_ruleFactory.current; } 
	 EOF 
;

// Rule Factory
ruleFactory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactoryAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactoryRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFactoryAccess().getRootNewObjectParserRuleCall_1_0()); 
	    }
		lv_root_1_0=ruleNewObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactoryRule());
	        }
       		set(
       			$current, 
       			"root",
        		lv_root_1_0, 
        		"NewObject");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildCard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildCard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard 
	 { $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFeatureAccess().getEFeatureStructuralFeatureCrossReference_0_0()); 
	}

)
)((
(
		lv_isMany_1_0=	'+=' 
    {
        newLeafNode(lv_isMany_1_0, grammarAccess.getFeatureAccess().getIsManyPlusSignEqualsSignKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
       		setWithLastConsumed($current, "isMany", true, "+=");
	    }

)
)
    |	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFeatureAccess().getEqualsSignKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNewObject
entryRuleNewObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewObjectRule()); }
	 iv_ruleNewObject=ruleNewObject 
	 { $current=$iv_ruleNewObject.current; } 
	 EOF 
;

// Rule NewObject
ruleNewObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewObjectRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNewObjectAccess().getEClassEntityCrossReference_0_0()); 
	}

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNewObjectAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNewObjectAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNewObjectAccess().getFeaturesFeatureParserRuleCall_3_0()); 
	    }
		lv_features_3_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewObjectRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNewObjectAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getReferenceParserRuleCall_1()); 
    }
    this_Reference_1=ruleReference
    { 
        $current = $this_Reference_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getContainmentParserRuleCall_2()); 
    }
    this_Containment_2=ruleContainment
    { 
        $current = $this_Containment_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getValueEObjectCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleContainment
entryRuleContainment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainmentRule()); }
	 iv_ruleContainment=ruleContainment 
	 { $current=$iv_ruleContainment.current; } 
	 EOF 
;

// Rule Containment
ruleContainment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentAccess().getValueNewObjectParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNewObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NewObject");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getThisThisParserRuleCall_0_0()); 
	    }
		lv_this_0_0=ruleThis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"this",
        		lv_this_0_0, 
        		"This");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getNewNewParserRuleCall_1_0()); 
	    }
		lv_new_1_0=ruleNew		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"new",
        		lv_new_1_0, 
        		"New");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getIntInteroParserRuleCall_2_0()); 
	    }
		lv_int_2_0=ruleIntero		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"int",
        		lv_int_2_0, 
        		"Intero");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getStringStringaParserRuleCall_3_0()); 
	    }
		lv_string_3_0=ruleStringa		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_3_0, 
        		"Stringa");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getNullNulloParserRuleCall_4_0()); 
	    }
		lv_null_4_0=ruleNullo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"null",
        		lv_null_4_0, 
        		"Nullo");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThisRule()); }
	 iv_ruleThis=ruleThis 
	 { $current=$iv_ruleThis.current; } 
	 EOF 
;

// Rule This
ruleThis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_variable_0_0=	'this' 
    {
        newLeafNode(lv_variable_0_0, grammarAccess.getThisAccess().getVariableThisKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getThisRule());
	        }
       		setWithLastConsumed($current, "variable", lv_variable_0_0, "this");
	    }

)
)
;





// Entry rule entryRuleNew
entryRuleNew returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewRule()); }
	 iv_ruleNew=ruleNew 
	 { $current=$iv_ruleNew.current; } 
	 EOF 
;

// Rule New
ruleNew returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewAccess().getNewKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getNewAccess().getTypeEntityCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleIntero
entryRuleIntero returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteroRule()); }
	 iv_ruleIntero=ruleIntero 
	 { $current=$iv_ruleIntero.current; } 
	 EOF 
;

// Rule Intero
ruleIntero returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getInteroAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteroRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleStringa
entryRuleStringa returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringaRule()); }
	 iv_ruleStringa=ruleStringa 
	 { $current=$iv_ruleStringa.current; } 
	 EOF 
;

// Rule Stringa
ruleStringa returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringaAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNullo
entryRuleNullo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNulloRule()); }
	 iv_ruleNullo=ruleNullo 
	 { $current=$iv_ruleNullo.current; } 
	 EOF 
;

// Rule Nullo
ruleNullo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'null' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getNulloAccess().getValueNullKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNulloRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "null");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


