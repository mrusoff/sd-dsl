/*
* generated by Xtext
*/
grammar InternalAdslDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.chaunier.xtext.archi.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.chaunier.xtext.archi.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.chaunier.xtext.archi.services.AdslDslGrammarAccess;

}

@parser::members {

 	private AdslDslGrammarAccess grammarAccess;
 	
    public InternalAdslDslParser(TokenStream input, AdslDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ArchiModel";	
   	}
   	
   	@Override
   	protected AdslDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleArchiModel
entryRuleArchiModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArchiModelRule()); }
	 iv_ruleArchiModel=ruleArchiModel 
	 { $current=$iv_ruleArchiModel.current; } 
	 EOF 
;

// Rule ArchiModel
ruleArchiModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArchiModelAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchiModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getArchiModelAccess().getElementsSystemParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchiModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildCard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildCard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard 
	 { $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getSystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getUsingsUsingParserRuleCall_3_0()); 
	    }
		lv_usings_3_0=ruleUsing		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"usings",
        		lv_usings_3_0, 
        		"Using");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getSubSystemsSystemParserRuleCall_4_0_0()); 
	    }
		lv_subSystems_4_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"subSystems",
        		lv_subSystems_4_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getComponentsComponentParserRuleCall_4_1_0()); 
	    }
		lv_components_5_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_5_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getInterfacesInterfaceParserRuleCall_4_2_0()); 
	    }
		lv_interfaces_6_0=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"interfaces",
        		lv_interfaces_6_0, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleUsing
entryRuleUsing returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsingRule()); }
	 iv_ruleUsing=ruleUsing 
	 { $current=$iv_ruleUsing.current; } 
	 EOF 
;

// Rule Using
ruleUsing returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='using' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUsingAccess().getUsingKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUsingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getUsingAccess().getSystemSystemCrossReference_1_0()); 
	}

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUsingAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='component' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getComponentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getPortsPortParserRuleCall_3_0()); 
	    }
		lv_ports_3_0=rulePort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_3_0, 
        		"Port");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulePort
entryRulePort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	 iv_rulePort=rulePort 
	 { $current=$iv_rulePort.current; } 
	 EOF 
;

// Rule Port
rulePort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPortAccess().getProvidedPortParserRuleCall_0()); 
    }
    this_ProvidedPort_0=ruleProvidedPort
    { 
        $current = $this_ProvidedPort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortAccess().getRequiredPortParserRuleCall_1()); 
    }
    this_RequiredPort_1=ruleRequiredPort
    { 
        $current = $this_RequiredPort_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProvidedPort
entryRuleProvidedPort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProvidedPortRule()); }
	 iv_ruleProvidedPort=ruleProvidedPort 
	 { $current=$iv_ruleProvidedPort.current; } 
	 EOF 
;

// Rule ProvidedPort
ruleProvidedPort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='provides' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProvidedPortAccess().getProvidesKeyword_0());
    }
(
(
		lv_isMandatory_1_0=	'mandatory' 
    {
        newLeafNode(lv_isMandatory_1_0, grammarAccess.getProvidedPortAccess().getIsMandatoryMandatoryKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProvidedPortRule());
	        }
       		setWithLastConsumed($current, "isMandatory", true, "mandatory");
	    }

)
)?(
(
		lv_isToMany_2_0=	'toMany' 
    {
        newLeafNode(lv_isToMany_2_0, grammarAccess.getProvidedPortAccess().getIsToManyToManyKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProvidedPortRule());
	        }
       		setWithLastConsumed($current, "isToMany", true, "toMany");
	    }

)
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getProvidedPortAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProvidedPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProvidedPortAccess().getColonKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProvidedPortRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getProvidedPortAccess().getInterfaceInterfaceCrossReference_5_0()); 
	}

)
))
;





// Entry rule entryRuleRequiredPort
entryRuleRequiredPort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiredPortRule()); }
	 iv_ruleRequiredPort=ruleRequiredPort 
	 { $current=$iv_ruleRequiredPort.current; } 
	 EOF 
;

// Rule RequiredPort
ruleRequiredPort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequiredPortAccess().getRequiresKeyword_0());
    }
(
(
		lv_isMandatory_1_0=	'mandatory' 
    {
        newLeafNode(lv_isMandatory_1_0, grammarAccess.getRequiredPortAccess().getIsMandatoryMandatoryKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiredPortRule());
	        }
       		setWithLastConsumed($current, "isMandatory", true, "mandatory");
	    }

)
)?(
(
		lv_isToMany_2_0=	'toMany' 
    {
        newLeafNode(lv_isToMany_2_0, grammarAccess.getRequiredPortAccess().getIsToManyToManyKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiredPortRule());
	        }
       		setWithLastConsumed($current, "isToMany", true, "toMany");
	    }

)
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getRequiredPortAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiredPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequiredPortAccess().getColonKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiredPortRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getRequiredPortAccess().getInterfaceInterfaceCrossReference_5_0()); 
	}

)
))
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceAccess().getInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getInteractionsMessageInteractionParserRuleCall_3_0()); 
	    }
		lv_interactions_3_0=ruleMessageInteraction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"interactions",
        		lv_interactions_3_0, 
        		"MessageInteraction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMessageInteraction
entryRuleMessageInteraction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageInteractionRule()); }
	 iv_ruleMessageInteraction=ruleMessageInteraction 
	 { $current=$iv_ruleMessageInteraction.current; } 
	 EOF 
;

// Rule MessageInteraction
ruleMessageInteraction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMessageInteractionAccess().getOnewayInteractionParserRuleCall_0()); 
    }
    this_OnewayInteraction_0=ruleOnewayInteraction
    { 
        $current = $this_OnewayInteraction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageInteractionAccess().getRequestReplyInteractionParserRuleCall_1()); 
    }
    this_RequestReplyInteraction_1=ruleRequestReplyInteraction
    { 
        $current = $this_RequestReplyInteraction_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOnewayInteraction
entryRuleOnewayInteraction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnewayInteractionRule()); }
	 iv_ruleOnewayInteraction=ruleOnewayInteraction 
	 { $current=$iv_ruleOnewayInteraction.current; } 
	 EOF 
;

// Rule OnewayInteraction
ruleOnewayInteraction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='oneway' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnewayInteractionAccess().getOnewayKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOnewayInteractionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnewayInteractionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnewayInteractionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnewayInteractionAccess().getMessageMessageParserRuleCall_3_0()); 
	    }
		lv_message_3_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnewayInteractionRule());
	        }
       		set(
       			$current, 
       			"message",
        		lv_message_3_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRequestReplyInteraction
entryRuleRequestReplyInteraction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequestReplyInteractionRule()); }
	 iv_ruleRequestReplyInteraction=ruleRequestReplyInteraction 
	 { $current=$iv_ruleRequestReplyInteraction.current; } 
	 EOF 
;

// Rule RequestReplyInteraction
ruleRequestReplyInteraction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequestReplyInteractionAccess().getRrKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRequestReplyInteractionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequestReplyInteractionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequestReplyInteractionAccess().getColonKeyword_2());
    }
	otherlv_3='request' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRequestReplyInteractionAccess().getRequestKeyword_3());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequestReplyInteractionAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequestReplyInteractionAccess().getRequestMessageParserRuleCall_5_0()); 
	    }
		lv_request_5_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequestReplyInteractionRule());
	        }
       		set(
       			$current, 
       			"request",
        		lv_request_5_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='reply' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRequestReplyInteractionAccess().getReplyKeyword_6());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRequestReplyInteractionAccess().getEqualsSignKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequestReplyInteractionAccess().getReplyMessageParserRuleCall_8_0()); 
	    }
		lv_reply_8_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequestReplyInteractionRule());
	        }
       		set(
       			$current, 
       			"reply",
        		lv_reply_8_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageAccess().getLeftParenthesisKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getParametersMessageParameterParserRuleCall_1_0_0()); 
	    }
		lv_parameters_1_0=ruleMessageParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_1_0, 
        		"MessageParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageAccess().getCommaKeyword_1_1());
    }
)?)*	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMessageAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleMessageParameter
entryRuleMessageParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageParameterRule()); }
	 iv_ruleMessageParameter=ruleMessageParameter 
	 { $current=$iv_ruleMessageParameter.current; } 
	 EOF 
;

// Rule MessageParameter
ruleMessageParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMessageParameterAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageParameterAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageParameterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMessageParameterAccess().getTyperefEntityCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


