/*
* generated by Xtext
*/

package fr.chaunier.xtext.omcst.om.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OmcstDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//DomainModel:
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXsdElementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractElement:
		//	PackageDeclaration | Type | Import | XsdElement;
		public ParserRule getRule() { return rule; }

		//PackageDeclaration | Type | Import | XsdElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//Import
		public RuleCall getImportParserRuleCall_2() { return cImportParserRuleCall_2; }

		//XsdElement
		public RuleCall getXsdElementParserRuleCall_3() { return cXsdElementParserRuleCall_3; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class XsdElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XsdElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXsdElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cXsdElementEntityCrossReference_1_0 = (CrossReference)cXsdElementAssignment_1.eContents().get(0);
		private final RuleCall cXsdElementEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cXsdElementEntityCrossReference_1_0.eContents().get(1);
		
		//XsdElement:
		//	"element" xsdElement=[Entity];
		public ParserRule getRule() { return rule; }

		//"element" xsdElement=[Entity]
		public Group getGroup() { return cGroup; }

		//"element"
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }

		//xsdElement=[Entity]
		public Assignment getXsdElementAssignment_1() { return cXsdElementAssignment_1; }

		//[Entity]
		public CrossReference getXsdElementEntityCrossReference_1_0() { return cXsdElementEntityCrossReference_1_0; }

		//ID
		public RuleCall getXsdElementEntityIDTerminalRuleCall_1_0_1() { return cXsdElementEntityIDTerminalRuleCall_1_0_1; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPrefixKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPrefixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrefixQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cPrefixAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNamespaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamespaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cNamespaceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAnnotationsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAnnoAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAnnoAnnotationsParserRuleCall_4_1_0 = (RuleCall)cAnnoAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsAbstractElementParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName ("prefix" prefix=QualifiedName)? ("namespace" namespace=STRING)? ("annotations"
		//	anno=Annotations)? "{" elements+=AbstractElement* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName ("prefix" prefix=QualifiedName)? ("namespace" namespace=STRING)? ("annotations"
		//anno=Annotations)? "{" elements+=AbstractElement* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("prefix" prefix=QualifiedName)?
		public Group getGroup_2() { return cGroup_2; }

		//"prefix"
		public Keyword getPrefixKeyword_2_0() { return cPrefixKeyword_2_0; }

		//prefix=QualifiedName
		public Assignment getPrefixAssignment_2_1() { return cPrefixAssignment_2_1; }

		//QualifiedName
		public RuleCall getPrefixQualifiedNameParserRuleCall_2_1_0() { return cPrefixQualifiedNameParserRuleCall_2_1_0; }

		//("namespace" namespace=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"namespace"
		public Keyword getNamespaceKeyword_3_0() { return cNamespaceKeyword_3_0; }

		//namespace=STRING
		public Assignment getNamespaceAssignment_3_1() { return cNamespaceAssignment_3_1; }

		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_3_1_0() { return cNamespaceSTRINGTerminalRuleCall_3_1_0; }

		//("annotations" anno=Annotations)?
		public Group getGroup_4() { return cGroup_4; }

		//"annotations"
		public Keyword getAnnotationsKeyword_4_0() { return cAnnotationsKeyword_4_0; }

		//anno=Annotations
		public Assignment getAnnoAssignment_4_1() { return cAnnoAssignment_4_1; }

		//Annotations
		public RuleCall getAnnoAnnotationsParserRuleCall_4_1_0() { return cAnnoAnnotationsParserRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_6_0() { return cElementsAbstractElementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	Entity | DataType | Enumeration;
		public ParserRule getRule() { return rule; }

		//Entity | DataType | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintConstraintParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAnnotationsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAnnoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAnnoAnnotationsParserRuleCall_3_1_0 = (RuleCall)cAnnoAssignment_3_1.eContents().get(0);
		
		//DataType:
		//	"datatype" name=ID constraint=Constraint? ("annotations" anno=Annotations)?;
		public ParserRule getRule() { return rule; }

		//"datatype" name=ID constraint=Constraint? ("annotations" anno=Annotations)?
		public Group getGroup() { return cGroup; }

		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//constraint=Constraint?
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }

		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_2_0() { return cConstraintConstraintParserRuleCall_2_0; }

		//("annotations" anno=Annotations)?
		public Group getGroup_3() { return cGroup_3; }

		//"annotations"
		public Keyword getAnnotationsKeyword_3_0() { return cAnnotationsKeyword_3_0; }

		//anno=Annotations
		public Assignment getAnnoAssignment_3_1() { return cAnnoAssignment_3_1; }

		//Annotations
		public RuleCall getAnnoAnnotationsParserRuleCall_3_1_0() { return cAnnoAnnotationsParserRuleCall_3_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityTypeEntityTypeEnumRuleCall_0_0 = (RuleCall)cEntityTypeAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAnnotationsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAnnoAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAnnoAnnotationsParserRuleCall_4_1_0 = (RuleCall)cAnnoAssignment_4_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFeaturesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFeaturesFeatureParserRuleCall_7_0 = (RuleCall)cFeaturesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Entity:
		//	entityType=EntityType? "entity" name=ID ("extends" superType=[Entity|QualifiedName])? ("annotations"
		//	anno=Annotations)? description=STRING? "{" features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//entityType=EntityType? "entity" name=ID ("extends" superType=[Entity|QualifiedName])? ("annotations" anno=Annotations)?
		//description=STRING? "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//entityType=EntityType?
		public Assignment getEntityTypeAssignment_0() { return cEntityTypeAssignment_0; }

		//EntityType
		public RuleCall getEntityTypeEntityTypeEnumRuleCall_0_0() { return cEntityTypeEntityTypeEnumRuleCall_0_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superType=[Entity|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superType=[Entity|QualifiedName]
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }

		//[Entity|QualifiedName]
		public CrossReference getSuperTypeEntityCrossReference_3_1_0() { return cSuperTypeEntityCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeEntityQualifiedNameParserRuleCall_3_1_0_1() { return cSuperTypeEntityQualifiedNameParserRuleCall_3_1_0_1; }

		//("annotations" anno=Annotations)?
		public Group getGroup_4() { return cGroup_4; }

		//"annotations"
		public Keyword getAnnotationsKeyword_4_0() { return cAnnotationsKeyword_4_0; }

		//anno=Annotations
		public Assignment getAnnoAssignment_4_1() { return cAnnoAssignment_4_1; }

		//Annotations
		public RuleCall getAnnoAnnotationsParserRuleCall_4_1_0() { return cAnnoAnnotationsParserRuleCall_4_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_7() { return cFeaturesAssignment_7; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_7_0() { return cFeaturesFeatureParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStructuralFeatureParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintConstraintParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAnnotationsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnoAnnotationsParserRuleCall_2_1_0 = (RuleCall)cAnnoAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//Feature:
		//	StructuralFeature constraint=Constraint? ("annotations" anno=Annotations)? description=STRING? //| Operation
		//;
		public ParserRule getRule() { return rule; }

		//StructuralFeature constraint=Constraint? ("annotations" anno=Annotations)? description=STRING? //| Operation
		public Group getGroup() { return cGroup; }

		//StructuralFeature
		public RuleCall getStructuralFeatureParserRuleCall_0() { return cStructuralFeatureParserRuleCall_0; }

		//constraint=Constraint?
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }

		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_1_0() { return cConstraintConstraintParserRuleCall_1_0; }

		//("annotations" anno=Annotations)?
		public Group getGroup_2() { return cGroup_2; }

		//"annotations"
		public Keyword getAnnotationsKeyword_2_0() { return cAnnotationsKeyword_2_0; }

		//anno=Annotations
		public Assignment getAnnoAssignment_2_1() { return cAnnoAssignment_2_1; }

		//Annotations
		public RuleCall getAnnoAnnotationsParserRuleCall_2_1_0() { return cAnnoAnnotationsParserRuleCall_2_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
	}

	public class StructuralFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuralFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructuralFeature:
		//	Attribute | Reference;
		public ParserRule getRule() { return rule; }

		//Attribute | Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID ":" type=TypeRef;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=TypeRef
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOppositeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOppositeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOppositeReferenceCrossReference_4_1_0 = (CrossReference)cOppositeAssignment_4_1.eContents().get(0);
		private final RuleCall cOppositeReferenceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cOppositeReferenceCrossReference_4_1_0.eContents().get(1);
		
		//Reference:
		//	"ref" name=ID ":" type=TypeRef ("opposite" opposite=[Reference])?;
		public ParserRule getRule() { return rule; }

		//"ref" name=ID ":" type=TypeRef ("opposite" opposite=[Reference])?
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }

		//("opposite" opposite=[Reference])?
		public Group getGroup_4() { return cGroup_4; }

		//"opposite"
		public Keyword getOppositeKeyword_4_0() { return cOppositeKeyword_4_0; }

		//opposite=[Reference]
		public Assignment getOppositeAssignment_4_1() { return cOppositeAssignment_4_1; }

		//[Reference]
		public CrossReference getOppositeReferenceCrossReference_4_1_0() { return cOppositeReferenceCrossReference_4_1_0; }

		//ID
		public RuleCall getOppositeReferenceIDTerminalRuleCall_4_1_0_1() { return cOppositeReferenceIDTerminalRuleCall_4_1_0_1; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumerationLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumerationLiteralsEnumerationLiteralParserRuleCall_3_0 = (RuleCall)cEnumerationLiteralsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumeration:
		//	"enumeration" name=ID "[" enumerationLiterals+=EnumerationLiteral+ "]";
		public ParserRule getRule() { return rule; }

		//"enumeration" name=ID "[" enumerationLiterals+=EnumerationLiteral+ "]"
		public Group getGroup() { return cGroup; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//enumerationLiterals+=EnumerationLiteral+
		public Assignment getEnumerationLiteralsAssignment_3() { return cEnumerationLiteralsAssignment_3; }

		//EnumerationLiteral
		public RuleCall getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_0() { return cEnumerationLiteralsEnumerationLiteralParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPersistedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPersistedValueINTTerminalRuleCall_1_1_0 = (RuleCall)cPersistedValueAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EnumerationLiteral:
		//	name=ID ("=" persistedValue=INT) ";";
		public ParserRule getRule() { return rule; }

		//name=ID ("=" persistedValue=INT) ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"=" persistedValue=INT
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//persistedValue=INT
		public Assignment getPersistedValueAssignment_1_1() { return cPersistedValueAssignment_1_1; }

		//INT
		public RuleCall getPersistedValueINTTerminalRuleCall_1_1_0() { return cPersistedValueINTTerminalRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cOpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeTypeRefParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		
		//Operation:
		//	visibility=Visibility? "op" name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ":" type=TypeRef;
		public ParserRule getRule() { return rule; }

		//visibility=Visibility? "op" name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ":" type=TypeRef
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//"op"
		public Keyword getOpKeyword_1() { return cOpKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//type=TypeRef
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_7_0() { return cTypeTypeRefParserRuleCall_7_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Parameter:
		//	name=ID type=TypeRef;
		public ParserRule getRule() { return rule; }

		//name=ID type=TypeRef
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }
	}

	public class TypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedElement:
		//	Feature | Parameter;
		public ParserRule getRule() { return rule; }

		//Feature | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencedTypeCrossReference_0_0 = (CrossReference)cReferencedAssignment_0.eContents().get(0);
		private final RuleCall cReferencedTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cReferencedTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cMultiAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMultiAsteriskKeyword_1_0 = (Keyword)cMultiAssignment_1.eContents().get(0);
		private final Assignment cOptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionQuestionMarkKeyword_2_0 = (Keyword)cOptionAssignment_2.eContents().get(0);
		
		//TypeRef:
		//	referenced=[Type|QualifiedName] multi?="*"? option?="?"?;
		public ParserRule getRule() { return rule; }

		//referenced=[Type|QualifiedName] multi?="*"? option?="?"?
		public Group getGroup() { return cGroup; }

		//referenced=[Type|QualifiedName]
		public Assignment getReferencedAssignment_0() { return cReferencedAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getReferencedTypeCrossReference_0_0() { return cReferencedTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getReferencedTypeQualifiedNameParserRuleCall_0_0_1() { return cReferencedTypeQualifiedNameParserRuleCall_0_0_1; }

		//multi?="*"?
		public Assignment getMultiAssignment_1() { return cMultiAssignment_1; }

		//"*"
		public Keyword getMultiAsteriskKeyword_1_0() { return cMultiAsteriskKeyword_1_0; }

		//option?="?"?
		public Assignment getOptionAssignment_2() { return cOptionAssignment_2; }

		//"?"
		public Keyword getOptionQuestionMarkKeyword_2_0() { return cOptionQuestionMarkKeyword_2_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AnnotationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Annotations:
		//	("[" annotations+=Annotation ("," annotations+=Annotation)* "]")?;
		public ParserRule getRule() { return rule; }

		//("[" annotations+=Annotation ("," annotations+=Annotation)* "]")?
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_2_1() { return cAnnotationsAssignment_2_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_1_0() { return cAnnotationsAnnotationParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Annotation:
		//	key=STRING ":" value=STRING;
		public ParserRule getRule() { return rule; }

		//key=STRING ":" value=STRING
		public Group getGroup() { return cGroup; }

		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateTimeConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDecimalConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationConstraintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Constraint:
		//	BoolConstraint | StringConstraint | DateTimeConstraint | DecimalConstraint | EnumerationConstraint;
		public ParserRule getRule() { return rule; }

		//BoolConstraint | StringConstraint | DateTimeConstraint | DecimalConstraint | EnumerationConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//BoolConstraint
		public RuleCall getBoolConstraintParserRuleCall_0() { return cBoolConstraintParserRuleCall_0; }

		//StringConstraint
		public RuleCall getStringConstraintParserRuleCall_1() { return cStringConstraintParserRuleCall_1; }

		//DateTimeConstraint
		public RuleCall getDateTimeConstraintParserRuleCall_2() { return cDateTimeConstraintParserRuleCall_2; }

		//DecimalConstraint
		public RuleCall getDecimalConstraintParserRuleCall_3() { return cDecimalConstraintParserRuleCall_3; }

		//EnumerationConstraint
		public RuleCall getEnumerationConstraintParserRuleCall_4() { return cEnumerationConstraintParserRuleCall_4; }
	}

	public class BoolConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolConstraint");
		private final Assignment cConstraintAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cConstraintBooleanKeyword_0 = (Keyword)cConstraintAssignment.eContents().get(0);
		
		//BoolConstraint:
		//	constraint="boolean";
		public ParserRule getRule() { return rule; }

		//constraint="boolean"
		public Assignment getConstraintAssignment() { return cConstraintAssignment; }

		//"boolean"
		public Keyword getConstraintBooleanKeyword_0() { return cConstraintBooleanKeyword_0; }
	}

	public class StringConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstraintStringKeyword_0_0 = (Keyword)cConstraintAssignment_0.eContents().get(0);
		private final Assignment cConstraintRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintRefAllConstraintParserRuleCall_1_0 = (RuleCall)cConstraintRefAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRegexpKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRegularExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRegularExpressionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cRegularExpressionAssignment_2_1.eContents().get(0);
		
		//StringConstraint:
		//	constraint="string" constraintRef=AllConstraint ("regexp" regularExpression=STRING)?;
		public ParserRule getRule() { return rule; }

		//constraint="string" constraintRef=AllConstraint ("regexp" regularExpression=STRING)?
		public Group getGroup() { return cGroup; }

		//constraint="string"
		public Assignment getConstraintAssignment_0() { return cConstraintAssignment_0; }

		//"string"
		public Keyword getConstraintStringKeyword_0_0() { return cConstraintStringKeyword_0_0; }

		//constraintRef=AllConstraint
		public Assignment getConstraintRefAssignment_1() { return cConstraintRefAssignment_1; }

		//AllConstraint
		public RuleCall getConstraintRefAllConstraintParserRuleCall_1_0() { return cConstraintRefAllConstraintParserRuleCall_1_0; }

		//("regexp" regularExpression=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"regexp"
		public Keyword getRegexpKeyword_2_0() { return cRegexpKeyword_2_0; }

		//regularExpression=STRING
		public Assignment getRegularExpressionAssignment_2_1() { return cRegularExpressionAssignment_2_1; }

		//STRING
		public RuleCall getRegularExpressionSTRINGTerminalRuleCall_2_1_0() { return cRegularExpressionSTRINGTerminalRuleCall_2_1_0; }
	}

	public class DateTimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstraintDatetimeKeyword_0_0 = (Keyword)cConstraintAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cHasDefaultAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_1_0_0 = (Keyword)cHasDefaultAssignment_1_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cDefaultValueAssignment_1_1.eContents().get(0);
		
		//DateTimeConstraint:
		//	constraint="datetime" //    accuracy=DateTimeAccuracy
		//	//    dataType=[mm::DataType]
		//	(hasDefault?="default" defaultValue=STRING)?;
		public ParserRule getRule() { return rule; }

		//constraint="datetime" //    accuracy=DateTimeAccuracy
		////    dataType=[mm::DataType]
		//(hasDefault?="default" defaultValue=STRING)?
		public Group getGroup() { return cGroup; }

		//constraint="datetime"
		public Assignment getConstraintAssignment_0() { return cConstraintAssignment_0; }

		//"datetime"
		public Keyword getConstraintDatetimeKeyword_0_0() { return cConstraintDatetimeKeyword_0_0; }

		//(hasDefault?="default" defaultValue=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_1_0() { return cHasDefaultAssignment_1_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_1_0_0() { return cHasDefaultDefaultKeyword_1_0_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_1_1() { return cDefaultValueAssignment_1_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_1_1_0() { return cDefaultValueSTRINGTerminalRuleCall_1_1_0; }
	}

	public class DecimalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstraintDecimalKeyword_0_0 = (Keyword)cConstraintAssignment_0.eContents().get(0);
		private final Assignment cConstraintRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintRefNumberConstraintParserRuleCall_1_0 = (RuleCall)cConstraintRefAssignment_1.eContents().get(0);
		
		////enum DateTimeAccuracy:
		////    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
		////    Second = "second" | Millisecond = "millisecond"
		////    ;
		//DecimalConstraint:
		//	constraint="decimal" constraintRef=NumberConstraint;
		public ParserRule getRule() { return rule; }

		//constraint="decimal" constraintRef=NumberConstraint
		public Group getGroup() { return cGroup; }

		//constraint="decimal"
		public Assignment getConstraintAssignment_0() { return cConstraintAssignment_0; }

		//"decimal"
		public Keyword getConstraintDecimalKeyword_0_0() { return cConstraintDecimalKeyword_0_0; }

		//constraintRef=NumberConstraint
		public Assignment getConstraintRefAssignment_1() { return cConstraintRefAssignment_1; }

		//NumberConstraint
		public RuleCall getConstraintRefNumberConstraintParserRuleCall_1_0() { return cConstraintRefNumberConstraintParserRuleCall_1_0; }
	}

	public class EnumerationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUsageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsageEnumUsageEnumRuleCall_1_0 = (RuleCall)cUsageAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFixeLenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFixeLenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFixeLenINTTerminalRuleCall_2_1_0 = (RuleCall)cFixeLenAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasDefaultAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_3_0_0 = (Keyword)cHasDefaultAssignment_3_0.eContents().get(0);
		private final Assignment cDefaultValueAsStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueAsStringIDTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueAsStringAssignment_3_1.eContents().get(0);
		
		//EnumerationConstraint:
		//	"enum" usage=EnumUsage ("fixeLen" fixeLen=INT)? (hasDefault?="default" defaultValueAsString=ID)?;
		public ParserRule getRule() { return rule; }

		//"enum" usage=EnumUsage ("fixeLen" fixeLen=INT)? (hasDefault?="default" defaultValueAsString=ID)?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//usage=EnumUsage
		public Assignment getUsageAssignment_1() { return cUsageAssignment_1; }

		//EnumUsage
		public RuleCall getUsageEnumUsageEnumRuleCall_1_0() { return cUsageEnumUsageEnumRuleCall_1_0; }

		//("fixeLen" fixeLen=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"fixeLen"
		public Keyword getFixeLenKeyword_2_0() { return cFixeLenKeyword_2_0; }

		//fixeLen=INT
		public Assignment getFixeLenAssignment_2_1() { return cFixeLenAssignment_2_1; }

		//INT
		public RuleCall getFixeLenINTTerminalRuleCall_2_1_0() { return cFixeLenINTTerminalRuleCall_2_1_0; }

		//(hasDefault?="default" defaultValueAsString=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_3_0() { return cHasDefaultAssignment_3_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_3_0_0() { return cHasDefaultDefaultKeyword_3_0_0; }

		//defaultValueAsString=ID
		public Assignment getDefaultValueAsStringAssignment_3_1() { return cDefaultValueAsStringAssignment_3_1; }

		//ID
		public RuleCall getDefaultValueAsStringIDTerminalRuleCall_3_1_0() { return cDefaultValueAsStringIDTerminalRuleCall_3_1_0; }
	}

	public class NumberConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHasDefaultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_0_0_0 = (Keyword)cHasDefaultAssignment_0_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDefaultValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIsFixedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsFixedFixedKeyword_1_0_0 = (Keyword)cIsFixedAssignment_1_0.eContents().get(0);
		private final Assignment cFixedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFixedValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFixedValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMinValKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinValueINTTerminalRuleCall_2_1_0 = (RuleCall)cMinValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxValKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxValueINTTerminalRuleCall_3_1_0 = (RuleCall)cMaxValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMinLenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMinLenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMinLenINTTerminalRuleCall_4_1_0 = (RuleCall)cMinLenAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMaxLenKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMaxLenAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMaxLenINTTerminalRuleCall_5_1_0 = (RuleCall)cMaxLenAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFixeLenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFixeLenAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFixeLenINTTerminalRuleCall_6_1_0 = (RuleCall)cFixeLenAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPaddleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPaddleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPaddleSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cPaddleAssignment_7_1.eContents().get(0);
		private final Assignment cIsIdAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cIsIdIdKeyword_8_0 = (Keyword)cIsIdAssignment_8.eContents().get(0);
		private final Assignment cNullableAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cNullableNullableKeyword_9_0 = (Keyword)cNullableAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cDerivedAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_10_0_0 = (Keyword)cDerivedAssignment_10_0.eContents().get(0);
		private final Assignment cWritableAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final Keyword cWritableWritableKeyword_10_1_0 = (Keyword)cWritableAssignment_10_1.eContents().get(0);
		private final Assignment cIsXSDAttAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Keyword cIsXSDAttXsdAKeyword_11_0 = (Keyword)cIsXSDAttAssignment_11.eContents().get(0);
		
		//NumberConstraint:
		//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minVal" minValue=INT)? ("maxVal"
		//	maxValue=INT)? ("minLen" minLen=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)?
		//	isId?="id"? nullable?="nullable"? (derived?="derived" writable?="writable"?)? isXSDAtt?="xsdA."?;
		public ParserRule getRule() { return rule; }

		//(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minVal" minValue=INT)? ("maxVal"
		//maxValue=INT)? ("minLen" minLen=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)?
		//isId?="id"? nullable?="nullable"? (derived?="derived" writable?="writable"?)? isXSDAtt?="xsdA."?
		public Group getGroup() { return cGroup; }

		//(hasDefault?="default" defaultValue=STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_0_0() { return cHasDefaultAssignment_0_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_0_0_0() { return cHasDefaultDefaultKeyword_0_0_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_0_1() { return cDefaultValueAssignment_0_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_0_1_0() { return cDefaultValueSTRINGTerminalRuleCall_0_1_0; }

		//(isFixed?="fixed" fixedValue=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//isFixed?="fixed"
		public Assignment getIsFixedAssignment_1_0() { return cIsFixedAssignment_1_0; }

		//"fixed"
		public Keyword getIsFixedFixedKeyword_1_0_0() { return cIsFixedFixedKeyword_1_0_0; }

		//fixedValue=STRING
		public Assignment getFixedValueAssignment_1_1() { return cFixedValueAssignment_1_1; }

		//STRING
		public RuleCall getFixedValueSTRINGTerminalRuleCall_1_1_0() { return cFixedValueSTRINGTerminalRuleCall_1_1_0; }

		//("minVal" minValue=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"minVal"
		public Keyword getMinValKeyword_2_0() { return cMinValKeyword_2_0; }

		//minValue=INT
		public Assignment getMinValueAssignment_2_1() { return cMinValueAssignment_2_1; }

		//INT
		public RuleCall getMinValueINTTerminalRuleCall_2_1_0() { return cMinValueINTTerminalRuleCall_2_1_0; }

		//("maxVal" maxValue=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"maxVal"
		public Keyword getMaxValKeyword_3_0() { return cMaxValKeyword_3_0; }

		//maxValue=INT
		public Assignment getMaxValueAssignment_3_1() { return cMaxValueAssignment_3_1; }

		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_3_1_0() { return cMaxValueINTTerminalRuleCall_3_1_0; }

		//("minLen" minLen=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"minLen"
		public Keyword getMinLenKeyword_4_0() { return cMinLenKeyword_4_0; }

		//minLen=INT
		public Assignment getMinLenAssignment_4_1() { return cMinLenAssignment_4_1; }

		//INT
		public RuleCall getMinLenINTTerminalRuleCall_4_1_0() { return cMinLenINTTerminalRuleCall_4_1_0; }

		//("maxLen" maxLen=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//"maxLen"
		public Keyword getMaxLenKeyword_5_0() { return cMaxLenKeyword_5_0; }

		//maxLen=INT
		public Assignment getMaxLenAssignment_5_1() { return cMaxLenAssignment_5_1; }

		//INT
		public RuleCall getMaxLenINTTerminalRuleCall_5_1_0() { return cMaxLenINTTerminalRuleCall_5_1_0; }

		//("fixeLen" fixeLen=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"fixeLen"
		public Keyword getFixeLenKeyword_6_0() { return cFixeLenKeyword_6_0; }

		//fixeLen=INT
		public Assignment getFixeLenAssignment_6_1() { return cFixeLenAssignment_6_1; }

		//INT
		public RuleCall getFixeLenINTTerminalRuleCall_6_1_0() { return cFixeLenINTTerminalRuleCall_6_1_0; }

		//("paddle" paddle=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"paddle"
		public Keyword getPaddleKeyword_7_0() { return cPaddleKeyword_7_0; }

		//paddle=STRING
		public Assignment getPaddleAssignment_7_1() { return cPaddleAssignment_7_1; }

		//STRING
		public RuleCall getPaddleSTRINGTerminalRuleCall_7_1_0() { return cPaddleSTRINGTerminalRuleCall_7_1_0; }

		//isId?="id"?
		public Assignment getIsIdAssignment_8() { return cIsIdAssignment_8; }

		//"id"
		public Keyword getIsIdIdKeyword_8_0() { return cIsIdIdKeyword_8_0; }

		//nullable?="nullable"?
		public Assignment getNullableAssignment_9() { return cNullableAssignment_9; }

		//"nullable"
		public Keyword getNullableNullableKeyword_9_0() { return cNullableNullableKeyword_9_0; }

		//(derived?="derived" writable?="writable"?)?
		public Group getGroup_10() { return cGroup_10; }

		//derived?="derived"
		public Assignment getDerivedAssignment_10_0() { return cDerivedAssignment_10_0; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_10_0_0() { return cDerivedDerivedKeyword_10_0_0; }

		//writable?="writable"?
		public Assignment getWritableAssignment_10_1() { return cWritableAssignment_10_1; }

		//"writable"
		public Keyword getWritableWritableKeyword_10_1_0() { return cWritableWritableKeyword_10_1_0; }

		//isXSDAtt?="xsdA."?
		public Assignment getIsXSDAttAssignment_11() { return cIsXSDAttAssignment_11; }

		//"xsdA."
		public Keyword getIsXSDAttXsdAKeyword_11_0() { return cIsXSDAttXsdAKeyword_11_0; }
	}

	public class AllConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHasDefaultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_0_0_0 = (Keyword)cHasDefaultAssignment_0_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDefaultValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIsFixedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsFixedFixedKeyword_1_0_0 = (Keyword)cIsFixedAssignment_1_0.eContents().get(0);
		private final Assignment cFixedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFixedValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFixedValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMinLenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinLenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinLenINTTerminalRuleCall_2_1_0 = (RuleCall)cMinLenAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxLenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxLenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxLenINTTerminalRuleCall_3_1_0 = (RuleCall)cMaxLenAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFixeLenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFixeLenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFixeLenINTTerminalRuleCall_4_1_0 = (RuleCall)cFixeLenAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPaddleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPaddleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPaddleSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cPaddleAssignment_5_1.eContents().get(0);
		private final Assignment cIsIdAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cIsIdIdKeyword_6_0 = (Keyword)cIsIdAssignment_6.eContents().get(0);
		private final Assignment cNullableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cNullableNullableKeyword_7_0 = (Keyword)cNullableAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cDerivedAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_8_0_0 = (Keyword)cDerivedAssignment_8_0.eContents().get(0);
		private final Assignment cWritableAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cWritableWritableKeyword_8_1_0 = (Keyword)cWritableAssignment_8_1.eContents().get(0);
		private final Assignment cIsXSDAttAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cIsXSDAttXsdAKeyword_9_0 = (Keyword)cIsXSDAttAssignment_9.eContents().get(0);
		
		//AllConstraint:
		//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minLen" minLen=INT)? ("maxLen"
		//	maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)? isId?="id"? nullable?="nullable"? (derived?="derived"
		//	writable?="writable"?)? isXSDAtt?="xsdA."?;
		public ParserRule getRule() { return rule; }

		//(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minLen" minLen=INT)? ("maxLen"
		//maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)? isId?="id"? nullable?="nullable"? (derived?="derived"
		//writable?="writable"?)? isXSDAtt?="xsdA."?
		public Group getGroup() { return cGroup; }

		//(hasDefault?="default" defaultValue=STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_0_0() { return cHasDefaultAssignment_0_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_0_0_0() { return cHasDefaultDefaultKeyword_0_0_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_0_1() { return cDefaultValueAssignment_0_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_0_1_0() { return cDefaultValueSTRINGTerminalRuleCall_0_1_0; }

		//(isFixed?="fixed" fixedValue=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//isFixed?="fixed"
		public Assignment getIsFixedAssignment_1_0() { return cIsFixedAssignment_1_0; }

		//"fixed"
		public Keyword getIsFixedFixedKeyword_1_0_0() { return cIsFixedFixedKeyword_1_0_0; }

		//fixedValue=STRING
		public Assignment getFixedValueAssignment_1_1() { return cFixedValueAssignment_1_1; }

		//STRING
		public RuleCall getFixedValueSTRINGTerminalRuleCall_1_1_0() { return cFixedValueSTRINGTerminalRuleCall_1_1_0; }

		//("minLen" minLen=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"minLen"
		public Keyword getMinLenKeyword_2_0() { return cMinLenKeyword_2_0; }

		//minLen=INT
		public Assignment getMinLenAssignment_2_1() { return cMinLenAssignment_2_1; }

		//INT
		public RuleCall getMinLenINTTerminalRuleCall_2_1_0() { return cMinLenINTTerminalRuleCall_2_1_0; }

		//("maxLen" maxLen=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"maxLen"
		public Keyword getMaxLenKeyword_3_0() { return cMaxLenKeyword_3_0; }

		//maxLen=INT
		public Assignment getMaxLenAssignment_3_1() { return cMaxLenAssignment_3_1; }

		//INT
		public RuleCall getMaxLenINTTerminalRuleCall_3_1_0() { return cMaxLenINTTerminalRuleCall_3_1_0; }

		//("fixeLen" fixeLen=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"fixeLen"
		public Keyword getFixeLenKeyword_4_0() { return cFixeLenKeyword_4_0; }

		//fixeLen=INT
		public Assignment getFixeLenAssignment_4_1() { return cFixeLenAssignment_4_1; }

		//INT
		public RuleCall getFixeLenINTTerminalRuleCall_4_1_0() { return cFixeLenINTTerminalRuleCall_4_1_0; }

		//("paddle" paddle=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"paddle"
		public Keyword getPaddleKeyword_5_0() { return cPaddleKeyword_5_0; }

		//paddle=STRING
		public Assignment getPaddleAssignment_5_1() { return cPaddleAssignment_5_1; }

		//STRING
		public RuleCall getPaddleSTRINGTerminalRuleCall_5_1_0() { return cPaddleSTRINGTerminalRuleCall_5_1_0; }

		//isId?="id"?
		public Assignment getIsIdAssignment_6() { return cIsIdAssignment_6; }

		//"id"
		public Keyword getIsIdIdKeyword_6_0() { return cIsIdIdKeyword_6_0; }

		//nullable?="nullable"?
		public Assignment getNullableAssignment_7() { return cNullableAssignment_7; }

		//"nullable"
		public Keyword getNullableNullableKeyword_7_0() { return cNullableNullableKeyword_7_0; }

		//(derived?="derived" writable?="writable"?)?
		public Group getGroup_8() { return cGroup_8; }

		//derived?="derived"
		public Assignment getDerivedAssignment_8_0() { return cDerivedAssignment_8_0; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_8_0_0() { return cDerivedDerivedKeyword_8_0_0; }

		//writable?="writable"?
		public Assignment getWritableAssignment_8_1() { return cWritableAssignment_8_1; }

		//"writable"
		public Keyword getWritableWritableKeyword_8_1_0() { return cWritableWritableKeyword_8_1_0; }

		//isXSDAtt?="xsdA."?
		public Assignment getIsXSDAttAssignment_9() { return cIsXSDAttAssignment_9; }

		//"xsdA."
		public Keyword getIsXSDAttXsdAKeyword_9_0() { return cIsXSDAttXsdAKeyword_9_0; }
	}
	
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Visibility:
		//	public | private | protected;
		public EnumRule getRule() { return rule; }

		//public | private | protected
		public Alternatives getAlternatives() { return cAlternatives; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }

		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
	}

	public class EntityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final EnumLiteralDeclaration cAbstractEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_0 = (Keyword)cAbstractEnumLiteralDeclaration.eContents().get(0);
		
		//enum EntityType:
		//	abstract;
		public EnumRule getRule() { return rule; }

		//abstract
		public EnumLiteralDeclaration getAbstractEnumLiteralDeclaration() { return cAbstractEnumLiteralDeclaration; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0() { return cAbstractAbstractKeyword_0; }
	}

	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final EnumLiteralDeclaration cDerivedEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDerivedDerivedKeyword_0 = (Keyword)cDerivedEnumLiteralDeclaration.eContents().get(0);
		
		//enum AttributeType:
		//	derived;
		public EnumRule getRule() { return rule; }

		//derived
		public EnumLiteralDeclaration getDerivedEnumLiteralDeclaration() { return cDerivedEnumLiteralDeclaration; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_0() { return cDerivedDerivedKeyword_0; }
	}

	public class EnumUsageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EnumUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAsStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAsStringAsStringKeyword_0_0 = (Keyword)cAsStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAsValueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAsValueAsValueKeyword_1_0 = (Keyword)cAsValueEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EnumUsage:
		//	asString="as String" | asValue="as Value";
		public EnumRule getRule() { return rule; }

		//asString="as String" | asValue="as Value"
		public Alternatives getAlternatives() { return cAlternatives; }

		//asString="as String"
		public EnumLiteralDeclaration getAsStringEnumLiteralDeclaration_0() { return cAsStringEnumLiteralDeclaration_0; }

		//"as String"
		public Keyword getAsStringAsStringKeyword_0_0() { return cAsStringAsStringKeyword_0_0; }

		//asValue="as Value"
		public EnumLiteralDeclaration getAsValueEnumLiteralDeclaration_1() { return cAsValueEnumLiteralDeclaration_1; }

		//"as Value"
		public Keyword getAsValueAsValueKeyword_1_0() { return cAsValueAsValueKeyword_1_0; }
	}
	
	private DomainModelElements pDomainModel;
	private AbstractElementElements pAbstractElement;
	private ImportElements pImport;
	private XsdElementElements pXsdElement;
	private PackageDeclarationElements pPackageDeclaration;
	private TypeElements pType;
	private DataTypeElements pDataType;
	private EntityElements pEntity;
	private FeatureElements pFeature;
	private StructuralFeatureElements pStructuralFeature;
	private AttributeElements pAttribute;
	private ReferenceElements pReference;
	private EnumerationElements pEnumeration;
	private EnumerationLiteralElements pEnumerationLiteral;
	private OperationElements pOperation;
	private ParameterElements pParameter;
	private TypedElementElements pTypedElement;
	private TypeRefElements pTypeRef;
	private VisibilityElements unknownRuleVisibility;
	private EntityTypeElements unknownRuleEntityType;
	private AttributeTypeElements unknownRuleAttributeType;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private QualifiedNameElements pQualifiedName;
	private AnnotationsElements pAnnotations;
	private AnnotationElements pAnnotation;
	private ConstraintElements pConstraint;
	private BoolConstraintElements pBoolConstraint;
	private StringConstraintElements pStringConstraint;
	private DateTimeConstraintElements pDateTimeConstraint;
	private DecimalConstraintElements pDecimalConstraint;
	private EnumUsageElements unknownRuleEnumUsage;
	private EnumerationConstraintElements pEnumerationConstraint;
	private NumberConstraintElements pNumberConstraint;
	private AllConstraintElements pAllConstraint;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OmcstDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainModel:
	//	elements+=AbstractElement*;
	public DomainModelElements getDomainModelAccess() {
		return (pDomainModel != null) ? pDomainModel : (pDomainModel = new DomainModelElements());
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}

	//AbstractElement:
	//	PackageDeclaration | Type | Import | XsdElement;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//XsdElement:
	//	"element" xsdElement=[Entity];
	public XsdElementElements getXsdElementAccess() {
		return (pXsdElement != null) ? pXsdElement : (pXsdElement = new XsdElementElements());
	}
	
	public ParserRule getXsdElementRule() {
		return getXsdElementAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName ("prefix" prefix=QualifiedName)? ("namespace" namespace=STRING)? ("annotations"
	//	anno=Annotations)? "{" elements+=AbstractElement* "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Type:
	//	Entity | DataType | Enumeration;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//DataType:
	//	"datatype" name=ID constraint=Constraint? ("annotations" anno=Annotations)?;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//Entity:
	//	entityType=EntityType? "entity" name=ID ("extends" superType=[Entity|QualifiedName])? ("annotations"
	//	anno=Annotations)? description=STRING? "{" features+=Feature* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Feature:
	//	StructuralFeature constraint=Constraint? ("annotations" anno=Annotations)? description=STRING? //| Operation
	//;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//StructuralFeature:
	//	Attribute | Reference;
	public StructuralFeatureElements getStructuralFeatureAccess() {
		return (pStructuralFeature != null) ? pStructuralFeature : (pStructuralFeature = new StructuralFeatureElements());
	}
	
	public ParserRule getStructuralFeatureRule() {
		return getStructuralFeatureAccess().getRule();
	}

	//Attribute:
	//	name=ID ":" type=TypeRef;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Reference:
	//	"ref" name=ID ":" type=TypeRef ("opposite" opposite=[Reference])?;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Enumeration:
	//	"enumeration" name=ID "[" enumerationLiterals+=EnumerationLiteral+ "]";
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//EnumerationLiteral:
	//	name=ID ("=" persistedValue=INT) ";";
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return (pEnumerationLiteral != null) ? pEnumerationLiteral : (pEnumerationLiteral = new EnumerationLiteralElements());
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//Operation:
	//	visibility=Visibility? "op" name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ":" type=TypeRef;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Parameter:
	//	name=ID type=TypeRef;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//TypedElement:
	//	Feature | Parameter;
	public TypedElementElements getTypedElementAccess() {
		return (pTypedElement != null) ? pTypedElement : (pTypedElement = new TypedElementElements());
	}
	
	public ParserRule getTypedElementRule() {
		return getTypedElementAccess().getRule();
	}

	//TypeRef:
	//	referenced=[Type|QualifiedName] multi?="*"? option?="?"?;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//enum Visibility:
	//	public | private | protected;
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//enum EntityType:
	//	abstract;
	public EntityTypeElements getEntityTypeAccess() {
		return (unknownRuleEntityType != null) ? unknownRuleEntityType : (unknownRuleEntityType = new EntityTypeElements());
	}
	
	public EnumRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//enum AttributeType:
	//	derived;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Annotations:
	//	("[" annotations+=Annotation ("," annotations+=Annotation)* "]")?;
	public AnnotationsElements getAnnotationsAccess() {
		return (pAnnotations != null) ? pAnnotations : (pAnnotations = new AnnotationsElements());
	}
	
	public ParserRule getAnnotationsRule() {
		return getAnnotationsAccess().getRule();
	}

	//Annotation:
	//	key=STRING ":" value=STRING;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Constraint:
	//	BoolConstraint | StringConstraint | DateTimeConstraint | DecimalConstraint | EnumerationConstraint;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//BoolConstraint:
	//	constraint="boolean";
	public BoolConstraintElements getBoolConstraintAccess() {
		return (pBoolConstraint != null) ? pBoolConstraint : (pBoolConstraint = new BoolConstraintElements());
	}
	
	public ParserRule getBoolConstraintRule() {
		return getBoolConstraintAccess().getRule();
	}

	//StringConstraint:
	//	constraint="string" constraintRef=AllConstraint ("regexp" regularExpression=STRING)?;
	public StringConstraintElements getStringConstraintAccess() {
		return (pStringConstraint != null) ? pStringConstraint : (pStringConstraint = new StringConstraintElements());
	}
	
	public ParserRule getStringConstraintRule() {
		return getStringConstraintAccess().getRule();
	}

	//DateTimeConstraint:
	//	constraint="datetime" //    accuracy=DateTimeAccuracy
	//	//    dataType=[mm::DataType]
	//	(hasDefault?="default" defaultValue=STRING)?;
	public DateTimeConstraintElements getDateTimeConstraintAccess() {
		return (pDateTimeConstraint != null) ? pDateTimeConstraint : (pDateTimeConstraint = new DateTimeConstraintElements());
	}
	
	public ParserRule getDateTimeConstraintRule() {
		return getDateTimeConstraintAccess().getRule();
	}

	////enum DateTimeAccuracy:
	////    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
	////    Second = "second" | Millisecond = "millisecond"
	////    ;
	//DecimalConstraint:
	//	constraint="decimal" constraintRef=NumberConstraint;
	public DecimalConstraintElements getDecimalConstraintAccess() {
		return (pDecimalConstraint != null) ? pDecimalConstraint : (pDecimalConstraint = new DecimalConstraintElements());
	}
	
	public ParserRule getDecimalConstraintRule() {
		return getDecimalConstraintAccess().getRule();
	}

	//enum EnumUsage:
	//	asString="as String" | asValue="as Value";
	public EnumUsageElements getEnumUsageAccess() {
		return (unknownRuleEnumUsage != null) ? unknownRuleEnumUsage : (unknownRuleEnumUsage = new EnumUsageElements());
	}
	
	public EnumRule getEnumUsageRule() {
		return getEnumUsageAccess().getRule();
	}

	//EnumerationConstraint:
	//	"enum" usage=EnumUsage ("fixeLen" fixeLen=INT)? (hasDefault?="default" defaultValueAsString=ID)?;
	public EnumerationConstraintElements getEnumerationConstraintAccess() {
		return (pEnumerationConstraint != null) ? pEnumerationConstraint : (pEnumerationConstraint = new EnumerationConstraintElements());
	}
	
	public ParserRule getEnumerationConstraintRule() {
		return getEnumerationConstraintAccess().getRule();
	}

	//NumberConstraint:
	//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minVal" minValue=INT)? ("maxVal"
	//	maxValue=INT)? ("minLen" minLen=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)?
	//	isId?="id"? nullable?="nullable"? (derived?="derived" writable?="writable"?)? isXSDAtt?="xsdA."?;
	public NumberConstraintElements getNumberConstraintAccess() {
		return (pNumberConstraint != null) ? pNumberConstraint : (pNumberConstraint = new NumberConstraintElements());
	}
	
	public ParserRule getNumberConstraintRule() {
		return getNumberConstraintAccess().getRule();
	}

	//AllConstraint:
	//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minLen" minLen=INT)? ("maxLen"
	//	maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)? isId?="id"? nullable?="nullable"? (derived?="derived"
	//	writable?="writable"?)? isXSDAtt?="xsdA."?;
	public AllConstraintElements getAllConstraintAccess() {
		return (pAllConstraint != null) ? pAllConstraint : (pAllConstraint = new AllConstraintElements());
	}
	
	public ParserRule getAllConstraintRule() {
		return getAllConstraintAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
