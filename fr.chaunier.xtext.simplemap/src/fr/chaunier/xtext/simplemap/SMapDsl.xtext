grammar fr.chaunier.xtext.simplemap.SMapDsl with org.eclipse.xtext.common.Terminals

import  "platform:/resource/fr.chaunier.xtext.bom/src-gen/fr/chaunier/xtext/bom/BomDsl.ecore" as mm 

generate sMapDsl "http://www.chaunier.fr/xtext/simplemap/SMapDsl"


Model:

	'model' name=QualifiedName (documentation=STRING)?
	
	mappingModules+=MappingModule*
	roots += RootModule*
;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

RootModule: 
	'root' rootRef=[MappingModule] (documentation=STRING)?
;

MappingModule: 
	'module' name=QualifiedName (documentation=STRING)?
	'{'
		(mappedFeatures += FeatureMap ';'?)*
	'}';

FeatureMap :
	( 'map' leftFields+=[mm::Attribute|QualifiedName](','leftFields+=[mm::Attribute|QualifiedName])* '=>' 
		rightFields+=[mm::Attribute|QualifiedName](","rightFields+=[mm::Attribute|QualifiedName])*   
	| 'set left' setLeftField=[mm::Attribute|QualifiedName] '=' expr=Expression
	| 'set right' setRightField=[mm::Attribute|QualifiedName] '=' expr=Expression
	| 'ignore left' leftFields+=[mm::Attribute|QualifiedName] (','leftFields+=[mm::Attribute|QualifiedName])* 
	| 'ignore right' rightFields+=[mm::Attribute|QualifiedName] (','rightFields+=[mm::Attribute|QualifiedName])* 
	| 'call module' module=[MappingModule] ) 
	('rule' rules+=STRING (","rules+=STRING)*)? (documentation=STRING)?
	;

Expression:
	 value=STRING | intValue=INT;

