/*
* generated by Xtext
*/
package fr.chaunier.xtext.map.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import fr.chaunier.xtext.map.services.MapDslGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class MapDslParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private MapDslGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_MappingModulesAssignment(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new MappingModule_Group(this, this, 2, inst);
			case 3: return new Mapping_Group(this, this, 3, inst);
			case 4: return new FeatureMap_Alternatives(this, this, 4, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	mappingModules+=MappingModule*;
 *
 **/

// mappingModules+=MappingModule*
protected class Model_MappingModulesAssignment extends AssignmentToken  {
	
	public Model_MappingModulesAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMappingModulesAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MappingModule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mappingModules",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mappingModules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMappingModuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getMappingModulesMappingModuleParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_MappingModulesAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Model ****************/


/************ begin Rule Import ****************
 *
 * Import:
 * 	"import" importedNamespace=QualifiedNameWithWildCard;
 *
 **/

// "import" importedNamespace=QualifiedNameWithWildCard
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_ImportedNamespaceAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// importedNamespace=QualifiedNameWithWildCard
protected class Import_ImportedNamespaceAssignment_1 extends AssignmentToken  {
	
	public Import_ImportedNamespaceAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportedNamespaceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedNamespace",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedNamespace");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/




/************ begin Rule MappingModule ****************
 *
 * MappingModule:
 * 	"module" name=QualifiedName "{" imports+=Import* // allow imports11111
 * 	mappings+=Mapping* "}";
 *
 **/

// "module" name=QualifiedName "{" imports+=Import* // allow imports11111
// mappings+=Mapping* "}"
protected class MappingModule_Group extends GroupToken {
	
	public MappingModule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMappingModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MappingModule_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMappingModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "module"
protected class MappingModule_ModuleKeyword_0 extends KeywordToken  {
	
	public MappingModule_ModuleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingModuleAccess().getModuleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=QualifiedName
protected class MappingModule_NameAssignment_1 extends AssignmentToken  {
	
	public MappingModule_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingModuleAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MappingModule_ModuleKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMappingModuleAccess().getNameQualifiedNameParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMappingModuleAccess().getNameQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class MappingModule_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public MappingModule_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingModuleAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MappingModule_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// imports+=Import*
protected class MappingModule_ImportsAssignment_3 extends AssignmentToken  {
	
	public MappingModule_ImportsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingModuleAccess().getImportsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("imports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMappingModuleAccess().getImportsImportParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MappingModule_ImportsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new MappingModule_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// mappings+=Mapping*
protected class MappingModule_MappingsAssignment_4 extends AssignmentToken  {
	
	public MappingModule_MappingsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingModuleAccess().getMappingsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mappings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mappings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMappingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMappingModuleAccess().getMappingsMappingParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MappingModule_MappingsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new MappingModule_ImportsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new MappingModule_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class MappingModule_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public MappingModule_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingModuleAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MappingModule_MappingsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MappingModule_ImportsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MappingModule_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule MappingModule ****************/


/************ begin Rule Mapping ****************
 *
 * / *
 * Mapping:
 * 	'mapper' (name=STRING)? 'between' leftClass=[mm::Entity|QID] 'and' rightClass=[mm::Entity|QID]
 * 	'{'
 * 		importsFrom+=Import*
 * 		(mappedFeatures += FeatureMap ';'?)*
 *     '}';
 * 	'mapClass' (name=STRING)? 'between' leftClass=[mm::Entity|QID] 'and' rightPackage=[mm::PackageDeclaration] '.' rightClass=[mm::Entity|QID] (documentation=STRING)?
 * 
 * * /Mapping:
 * 	"mapClass" name=STRING? "between" leftClass=[mm::Entity|QualifiedName] "and" rightClass=[mm::Entity|QualifiedName]
 * 	documentation=STRING? "{" (mappedFeatures+=FeatureMap ";"?)* "}";
 *
 **/

// "mapClass" name=STRING? "between" leftClass=[mm::Entity|QualifiedName] "and" rightClass=[mm::Entity|QualifiedName]
// documentation=STRING? "{" (mappedFeatures+=FeatureMap ";"?)* "}"
protected class Mapping_Group extends GroupToken {
	
	public Mapping_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMappingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_RightCurlyBracketKeyword_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMappingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "mapClass"
protected class Mapping_MapClassKeyword_0 extends KeywordToken  {
	
	public Mapping_MapClassKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingAccess().getMapClassKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=STRING?
protected class Mapping_NameAssignment_1 extends AssignmentToken  {
	
	public Mapping_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_MapClassKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMappingAccess().getNameSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMappingAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "between"
protected class Mapping_BetweenKeyword_2 extends KeywordToken  {
	
	public Mapping_BetweenKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingAccess().getBetweenKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mapping_MapClassKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// leftClass=[mm::Entity|QualifiedName]
protected class Mapping_LeftClassAssignment_3 extends AssignmentToken  {
	
	public Mapping_LeftClassAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingAccess().getLeftClassAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_BetweenKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("leftClass",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("leftClass");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMappingAccess().getLeftClassEntityCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getMappingAccess().getLeftClassEntityCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "and"
protected class Mapping_AndKeyword_4 extends KeywordToken  {
	
	public Mapping_AndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingAccess().getAndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_LeftClassAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightClass=[mm::Entity|QualifiedName]
protected class Mapping_RightClassAssignment_5 extends AssignmentToken  {
	
	public Mapping_RightClassAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingAccess().getRightClassAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_AndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightClass",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightClass");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMappingAccess().getRightClassEntityCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getMappingAccess().getRightClassEntityCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// documentation=STRING?
protected class Mapping_DocumentationAssignment_6 extends AssignmentToken  {
	
	public Mapping_DocumentationAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingAccess().getDocumentationAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_RightClassAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("documentation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("documentation");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMappingAccess().getDocumentationSTRINGTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMappingAccess().getDocumentationSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Mapping_LeftCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Mapping_LeftCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_DocumentationAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mapping_RightClassAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (mappedFeatures+=FeatureMap ";"?)*
protected class Mapping_Group_8 extends GroupToken {
	
	public Mapping_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMappingAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_MappedFeaturesAssignment_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// mappedFeatures+=FeatureMap
protected class Mapping_MappedFeaturesAssignment_8_0 extends AssignmentToken  {
	
	public Mapping_MappedFeaturesAssignment_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMappingAccess().getMappedFeaturesAssignment_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mappedFeatures",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mappedFeatures");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureMapRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMappingAccess().getMappedFeaturesFeatureMapParserRuleCall_8_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Mapping_Group_8(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Mapping_LeftCurlyBracketKeyword_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Mapping_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public Mapping_RightCurlyBracketKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mapping_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mapping_LeftCurlyBracketKeyword_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Mapping ****************/


/************ begin Rule FeatureMap ****************
 *
 * FeatureMap:
 * 	"map" leftField=[mm::Attribute] "=>" rightField=[mm::Attribute] rule=STRING? | "set left" setLeftField=[mm::Attribute]
 * 	"=" valLeft=STRING | "set right" setRightField=[mm::Attribute] "=" valRight=STRING | "ignore left"
 * 	setRightField=[mm::Attribute] documentation=STRING?;
 *
 **/

// "map" leftField=[mm::Attribute] "=>" rightField=[mm::Attribute] rule=STRING? | "set left" setLeftField=[mm::Attribute]
// "=" valLeft=STRING | "set right" setRightField=[mm::Attribute] "=" valRight=STRING | "ignore left"
// setRightField=[mm::Attribute] documentation=STRING?
protected class FeatureMap_Alternatives extends AlternativesToken {

	public FeatureMap_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMap_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FeatureMap_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new FeatureMap_Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureMapRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "map" leftField=[mm::Attribute] "=>" rightField=[mm::Attribute] rule=STRING?
protected class FeatureMap_Group_0 extends GroupToken {
	
	public FeatureMap_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_RuleAssignment_0_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMap_RightFieldAssignment_0_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "map"
protected class FeatureMap_MapKeyword_0_0 extends KeywordToken  {
	
	public FeatureMap_MapKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getMapKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// leftField=[mm::Attribute]
protected class FeatureMap_LeftFieldAssignment_0_1 extends AssignmentToken  {
	
	public FeatureMap_LeftFieldAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getLeftFieldAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_MapKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("leftField",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("leftField");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureMapAccess().getLeftFieldAttributeCrossReference_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureMapAccess().getLeftFieldAttributeCrossReference_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "=>"
protected class FeatureMap_EqualsSignGreaterThanSignKeyword_0_2 extends KeywordToken  {
	
	public FeatureMap_EqualsSignGreaterThanSignKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getEqualsSignGreaterThanSignKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_LeftFieldAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightField=[mm::Attribute]
protected class FeatureMap_RightFieldAssignment_0_3 extends AssignmentToken  {
	
	public FeatureMap_RightFieldAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getRightFieldAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_EqualsSignGreaterThanSignKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightField",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightField");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureMapAccess().getRightFieldAttributeCrossReference_0_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureMapAccess().getRightFieldAttributeCrossReference_0_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// rule=STRING?
protected class FeatureMap_RuleAssignment_0_4 extends AssignmentToken  {
	
	public FeatureMap_RuleAssignment_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getRuleAssignment_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_RightFieldAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rule",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rule");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureMapAccess().getRuleSTRINGTerminalRuleCall_0_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureMapAccess().getRuleSTRINGTerminalRuleCall_0_4_0();
			return obj;
		}
		return null;
	}

}


// "set left" setLeftField=[mm::Attribute] "=" valLeft=STRING
protected class FeatureMap_Group_1 extends GroupToken {
	
	public FeatureMap_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_ValLeftAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "set left"
protected class FeatureMap_SetLeftKeyword_1_0 extends KeywordToken  {
	
	public FeatureMap_SetLeftKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getSetLeftKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// setLeftField=[mm::Attribute]
protected class FeatureMap_SetLeftFieldAssignment_1_1 extends AssignmentToken  {
	
	public FeatureMap_SetLeftFieldAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getSetLeftFieldAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_SetLeftKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setLeftField",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setLeftField");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureMapAccess().getSetLeftFieldAttributeCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureMapAccess().getSetLeftFieldAttributeCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class FeatureMap_EqualsSignKeyword_1_2 extends KeywordToken  {
	
	public FeatureMap_EqualsSignKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getEqualsSignKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_SetLeftFieldAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valLeft=STRING
protected class FeatureMap_ValLeftAssignment_1_3 extends AssignmentToken  {
	
	public FeatureMap_ValLeftAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getValLeftAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_EqualsSignKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valLeft",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valLeft");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureMapAccess().getValLeftSTRINGTerminalRuleCall_1_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureMapAccess().getValLeftSTRINGTerminalRuleCall_1_3_0();
			return obj;
		}
		return null;
	}

}


// "set right" setRightField=[mm::Attribute] "=" valRight=STRING
protected class FeatureMap_Group_2 extends GroupToken {
	
	public FeatureMap_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_ValRightAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "set right"
protected class FeatureMap_SetRightKeyword_2_0 extends KeywordToken  {
	
	public FeatureMap_SetRightKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getSetRightKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// setRightField=[mm::Attribute]
protected class FeatureMap_SetRightFieldAssignment_2_1 extends AssignmentToken  {
	
	public FeatureMap_SetRightFieldAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getSetRightFieldAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_SetRightKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setRightField",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setRightField");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class FeatureMap_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public FeatureMap_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_SetRightFieldAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valRight=STRING
protected class FeatureMap_ValRightAssignment_2_3 extends AssignmentToken  {
	
	public FeatureMap_ValRightAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getValRightAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valRight",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valRight");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureMapAccess().getValRightSTRINGTerminalRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureMapAccess().getValRightSTRINGTerminalRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}


// "ignore left" setRightField=[mm::Attribute] documentation=STRING?
protected class FeatureMap_Group_3 extends GroupToken {
	
	public FeatureMap_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_DocumentationAssignment_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMap_SetRightFieldAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "ignore left"
protected class FeatureMap_IgnoreLeftKeyword_3_0 extends KeywordToken  {
	
	public FeatureMap_IgnoreLeftKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getIgnoreLeftKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// setRightField=[mm::Attribute]
protected class FeatureMap_SetRightFieldAssignment_3_1 extends AssignmentToken  {
	
	public FeatureMap_SetRightFieldAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getSetRightFieldAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_IgnoreLeftKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setRightField",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setRightField");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureMapAccess().getSetRightFieldAttributeCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// documentation=STRING?
protected class FeatureMap_DocumentationAssignment_3_2 extends AssignmentToken  {
	
	public FeatureMap_DocumentationAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMapAccess().getDocumentationAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMap_SetRightFieldAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("documentation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("documentation");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureMapAccess().getDocumentationSTRINGTerminalRuleCall_3_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureMapAccess().getDocumentationSTRINGTerminalRuleCall_3_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule FeatureMap ****************/

}
