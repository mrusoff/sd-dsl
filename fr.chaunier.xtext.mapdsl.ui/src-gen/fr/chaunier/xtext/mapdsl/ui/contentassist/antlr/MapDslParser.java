/*
* generated by Xtext
*/
package fr.chaunier.xtext.mapdsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.chaunier.xtext.mapdsl.services.MapDslGrammarAccess;

public class MapDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MapDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.chaunier.xtext.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser createParser() {
		fr.chaunier.xtext.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser result = new fr.chaunier.xtext.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureMapAccess().getAlternatives_0(), "rule__FeatureMap__Alternatives_0");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getRootModuleAccess().getGroup(), "rule__RootModule__Group__0");
					put(grammarAccess.getMappingModuleAccess().getGroup(), "rule__MappingModule__Group__0");
					put(grammarAccess.getMappingModuleAccess().getGroup_4(), "rule__MappingModule__Group_4__0");
					put(grammarAccess.getFeatureMapAccess().getGroup(), "rule__FeatureMap__Group__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_0(), "rule__FeatureMap__Group_0_0__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_0_2(), "rule__FeatureMap__Group_0_0_2__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_0_5(), "rule__FeatureMap__Group_0_0_5__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_1(), "rule__FeatureMap__Group_0_1__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_2(), "rule__FeatureMap__Group_0_2__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_3(), "rule__FeatureMap__Group_0_3__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_3_2(), "rule__FeatureMap__Group_0_3_2__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_4(), "rule__FeatureMap__Group_0_4__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_4_2(), "rule__FeatureMap__Group_0_4_2__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_0_5(), "rule__FeatureMap__Group_0_5__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_1(), "rule__FeatureMap__Group_1__0");
					put(grammarAccess.getFeatureMapAccess().getGroup_1_2(), "rule__FeatureMap__Group_1_2__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getDocumentationAssignment_2(), "rule__Model__DocumentationAssignment_2");
					put(grammarAccess.getModelAccess().getMappingModulesAssignment_3(), "rule__Model__MappingModulesAssignment_3");
					put(grammarAccess.getModelAccess().getRootsAssignment_4(), "rule__Model__RootsAssignment_4");
					put(grammarAccess.getRootModuleAccess().getRootRefAssignment_1(), "rule__RootModule__RootRefAssignment_1");
					put(grammarAccess.getRootModuleAccess().getDocumentationAssignment_2(), "rule__RootModule__DocumentationAssignment_2");
					put(grammarAccess.getMappingModuleAccess().getNameAssignment_1(), "rule__MappingModule__NameAssignment_1");
					put(grammarAccess.getMappingModuleAccess().getDocumentationAssignment_2(), "rule__MappingModule__DocumentationAssignment_2");
					put(grammarAccess.getMappingModuleAccess().getMappedFeaturesAssignment_4_0(), "rule__MappingModule__MappedFeaturesAssignment_4_0");
					put(grammarAccess.getFeatureMapAccess().getLeftFieldsAssignment_0_0_1(), "rule__FeatureMap__LeftFieldsAssignment_0_0_1");
					put(grammarAccess.getFeatureMapAccess().getLeftFieldsAssignment_0_0_2_1(), "rule__FeatureMap__LeftFieldsAssignment_0_0_2_1");
					put(grammarAccess.getFeatureMapAccess().getRightFieldsAssignment_0_0_4(), "rule__FeatureMap__RightFieldsAssignment_0_0_4");
					put(grammarAccess.getFeatureMapAccess().getRightFieldsAssignment_0_0_5_1(), "rule__FeatureMap__RightFieldsAssignment_0_0_5_1");
					put(grammarAccess.getFeatureMapAccess().getSetLeftFieldAssignment_0_1_1(), "rule__FeatureMap__SetLeftFieldAssignment_0_1_1");
					put(grammarAccess.getFeatureMapAccess().getExprAssignment_0_1_3(), "rule__FeatureMap__ExprAssignment_0_1_3");
					put(grammarAccess.getFeatureMapAccess().getSetRightFieldAssignment_0_2_1(), "rule__FeatureMap__SetRightFieldAssignment_0_2_1");
					put(grammarAccess.getFeatureMapAccess().getExprAssignment_0_2_3(), "rule__FeatureMap__ExprAssignment_0_2_3");
					put(grammarAccess.getFeatureMapAccess().getLeftFieldsAssignment_0_3_1(), "rule__FeatureMap__LeftFieldsAssignment_0_3_1");
					put(grammarAccess.getFeatureMapAccess().getLeftFieldsAssignment_0_3_2_1(), "rule__FeatureMap__LeftFieldsAssignment_0_3_2_1");
					put(grammarAccess.getFeatureMapAccess().getRightFieldsAssignment_0_4_1(), "rule__FeatureMap__RightFieldsAssignment_0_4_1");
					put(grammarAccess.getFeatureMapAccess().getRightFieldsAssignment_0_4_2_1(), "rule__FeatureMap__RightFieldsAssignment_0_4_2_1");
					put(grammarAccess.getFeatureMapAccess().getModuleAssignment_0_5_1(), "rule__FeatureMap__ModuleAssignment_0_5_1");
					put(grammarAccess.getFeatureMapAccess().getRulesAssignment_1_1(), "rule__FeatureMap__RulesAssignment_1_1");
					put(grammarAccess.getFeatureMapAccess().getRulesAssignment_1_2_1(), "rule__FeatureMap__RulesAssignment_1_2_1");
					put(grammarAccess.getFeatureMapAccess().getDocumentationAssignment_2(), "rule__FeatureMap__DocumentationAssignment_2");
					put(grammarAccess.getExpressionAccess().getValueAssignment_0(), "rule__Expression__ValueAssignment_0");
					put(grammarAccess.getExpressionAccess().getIntValueAssignment_1(), "rule__Expression__IntValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.chaunier.xtext.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser typedParser = (fr.chaunier.xtext.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MapDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MapDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
