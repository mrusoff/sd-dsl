/*
* generated by Xtext
*/
grammar InternalBomDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.chaunier.xtext.bom.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.chaunier.xtext.bom.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import fr.chaunier.xtext.bom.services.BomDslGrammarAccess;

}

@parser::members {

 	private BomDslGrammarAccess grammarAccess;
 	
    public InternalBomDslParser(TokenStream input, IAstFactory factory, BomDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("fr/chaunier/xtext/bom/parser/antlr/internal/InternalBomDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";	
   	}
   	
   	@Override
   	protected BomDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainModelRule(), currentNode); }
	 iv_ruleDomainModel=ruleDomainModel 
	 { $current=$iv_ruleDomainModel.current; } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainModelAccess().getElementsAbstractElementParserRuleCall_0(), currentNode); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_0_0, 
	        		"AbstractElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractElementRule(), currentNode); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0(), currentNode); 
    }
    this_PackageDeclaration_0=rulePackageDeclaration
    { 
        $current = $this_PackageDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1(), currentNode); 
    }
    this_Type_1=ruleType
    { 
        $current = $this_Type_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2(), currentNode); 
    }
    this_Import_2=ruleImport
    { 
        $current = $this_Import_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0(), currentNode); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildCard		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importedNamespace",
	        		lv_importedNamespace_1_0, 
	        		"QualifiedNameWithWildCard", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageDeclarationRule(), currentNode); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'package' 
    {
        createLeafNode(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'prefix' 
    {
        createLeafNode(grammarAccess.getPackageDeclarationAccess().getPrefixKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageDeclarationAccess().getPrefixQualifiedNameParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_prefix_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"prefix",
	        		lv_prefix_3_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(	'namespace' 
    {
        createLeafNode(grammarAccess.getPackageDeclarationAccess().getNamespaceKeyword_3_0(), null); 
    }
(
(
		lv_namespace_5_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getPackageDeclarationAccess().getNamespaceSTRINGTerminalRuleCall_3_1_0(), "namespace"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_5_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	'{' 
    {
        createLeafNode(grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_5_0(), currentNode); 
	    }
		lv_elements_7_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_7_0, 
	        		"AbstractElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getEntityParserRuleCall_0(), currentNode); 
    }
    this_Entity_0=ruleEntity
    { 
        $current = $this_Entity_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_1(), currentNode); 
    }
    this_DataType_1=ruleDataType
    { 
        $current = $this_DataType_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_2(), currentNode); 
    }
    this_Enumeration_2=ruleEnumeration
    { 
        $current = $this_Enumeration_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeRule(), currentNode); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'datatype' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntityRule(), currentNode); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'entity' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getEntityKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getExtendsKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_2_1_0(), currentNode); 
	    }
		ruleQualifiedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		lv_description_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getEntityAccess().getDescriptionSTRINGTerminalRuleCall_3_0(), "description"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"description",
	        		lv_description_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getFeaturesFeatureParserRuleCall_5_0(), currentNode); 
	    }
		lv_features_6_0=ruleFeature		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"features",
	        		lv_features_6_0, 
	        		"Feature", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFeatureRule(), currentNode); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureAccess().getStructuralFeatureParserRuleCall_0(), currentNode); 
    }
    this_StructuralFeature_0=ruleStructuralFeature
    { 
        $current = $this_StructuralFeature_0.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFeatureAccess().getConstraintConstraintParserRuleCall_1_0(), currentNode); 
	    }
		lv_constraint_1_0=ruleConstraint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraint",
	        		lv_constraint_1_0, 
	        		"Constraint", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_description_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getFeatureAccess().getDescriptionSTRINGTerminalRuleCall_2_0(), "description"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"description",
	        		lv_description_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleStructuralFeature
entryRuleStructuralFeature returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructuralFeatureRule(), currentNode); }
	 iv_ruleStructuralFeature=ruleStructuralFeature 
	 { $current=$iv_ruleStructuralFeature.current; } 
	 EOF 
;

// Rule StructuralFeature
ruleStructuralFeature returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStructuralFeatureAccess().getAttributeParserRuleCall_0(), currentNode); 
    }
    this_Attribute_0=ruleAttribute
    { 
        $current = $this_Attribute_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStructuralFeatureAccess().getReferenceParserRuleCall_1(), currentNode); 
    }
    this_Reference_1=ruleReference
    { 
        $current = $this_Reference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getTypeTypeRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceRule(), currentNode); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'ref' 
    {
        createLeafNode(grammarAccess.getReferenceAccess().getRefKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getReferenceAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceAccess().getTypeTypeRefParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'opposite' 
    {
        createLeafNode(grammarAccess.getReferenceAccess().getOppositeKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReferenceAccess().getOppositeReferenceCrossReference_4_1_0(), "opposite"); 
	}

)
))?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getTypeTypeRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;







// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefRule(), currentNode); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getReferencedTypeCrossReference_0_0(), currentNode); 
	    }
		ruleQualifiedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_multi_1_0=	'*' 
    {
        createLeafNode(grammarAccess.getTypeRefAccess().getMultiAsteriskKeyword_1_0(), "multi"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multi", true, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_option_2_0=	'?' 
    {
        createLeafNode(grammarAccess.getTypeRefAccess().getOptionQuestionMarkKeyword_2_0(), "option"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "option", true, "?", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule(), currentNode); } 
	 iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard 
	 { $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0(), currentNode); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameRule(), currentNode); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstraintRule(), currentNode); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getBoolConstraintParserRuleCall_0(), currentNode); 
    }
    this_BoolConstraint_0=ruleBoolConstraint
    { 
        $current = $this_BoolConstraint_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getStringConstraintParserRuleCall_1(), currentNode); 
    }
    this_StringConstraint_1=ruleStringConstraint
    { 
        $current = $this_StringConstraint_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getDateTimeConstraintParserRuleCall_2(), currentNode); 
    }
    this_DateTimeConstraint_2=ruleDateTimeConstraint
    { 
        $current = $this_DateTimeConstraint_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getIntegerConstraintParserRuleCall_3(), currentNode); 
    }
    this_IntegerConstraint_3=ruleIntegerConstraint
    { 
        $current = $this_IntegerConstraint_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getDecimalConstraintParserRuleCall_4(), currentNode); 
    }
    this_DecimalConstraint_4=ruleDecimalConstraint
    { 
        $current = $this_DecimalConstraint_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getEnumerationConstraintParserRuleCall_5(), currentNode); 
    }
    this_EnumerationConstraint_5=ruleEnumerationConstraint
    { 
        $current = $this_EnumerationConstraint_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBoolConstraint
entryRuleBoolConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBoolConstraintRule(), currentNode); }
	 iv_ruleBoolConstraint=ruleBoolConstraint 
	 { $current=$iv_ruleBoolConstraint.current; } 
	 EOF 
;

// Rule BoolConstraint
ruleBoolConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_constraint_0_0=	'boolean' 
    {
        createLeafNode(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0_0(), "constraint"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "constraint", lv_constraint_0_0, "boolean", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_hasDefault_1_0=	'default' 
    {
        createLeafNode(grammarAccess.getBoolConstraintAccess().getHasDefaultDefaultKeyword_1_0_0(), "hasDefault"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_defaultValue_2_0=	'true' 
    {
        createLeafNode(grammarAccess.getBoolConstraintAccess().getDefaultValueTrueKeyword_1_1_0_0(), "defaultValue"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "defaultValue", true, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |	'false' 
    {
        createLeafNode(grammarAccess.getBoolConstraintAccess().getFalseKeyword_1_1_1(), null); 
    }
))?)
;





// Entry rule entryRuleStringConstraint
entryRuleStringConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringConstraintRule(), currentNode); }
	 iv_ruleStringConstraint=ruleStringConstraint 
	 { $current=$iv_ruleStringConstraint.current; } 
	 EOF 
;

// Rule StringConstraint
ruleStringConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_constraint_0_0=	'string' 
    {
        createLeafNode(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0(), "constraint"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "constraint", lv_constraint_0_0, "string", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_hasDefault_1_0=	'default' 
    {
        createLeafNode(grammarAccess.getStringConstraintAccess().getHasDefaultDefaultKeyword_1_0_0(), "hasDefault"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_defaultValue_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_1_1_0(), "defaultValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValue",
	        		lv_defaultValue_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'minLen' 
    {
        createLeafNode(grammarAccess.getStringConstraintAccess().getMinLenKeyword_2_0(), null); 
    }
(
(
		lv_minLength_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStringConstraintAccess().getMinLengthINTTerminalRuleCall_2_1_0(), "minLength"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"minLength",
	        		lv_minLength_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'maxLen' 
    {
        createLeafNode(grammarAccess.getStringConstraintAccess().getMaxLenKeyword_3_0(), null); 
    }
(
(
		lv_maxLength_6_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStringConstraintAccess().getMaxLengthINTTerminalRuleCall_3_1_0(), "maxLength"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"maxLength",
	        		lv_maxLength_6_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'fixeLen' 
    {
        createLeafNode(grammarAccess.getStringConstraintAccess().getFixeLenKeyword_4_0(), null); 
    }
(
(
		lv_fixeLength_8_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStringConstraintAccess().getFixeLengthINTTerminalRuleCall_4_1_0(), "fixeLength"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fixeLength",
	        		lv_fixeLength_8_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'regexp' 
    {
        createLeafNode(grammarAccess.getStringConstraintAccess().getRegexpKeyword_5_0(), null); 
    }
(
(
		lv_regularExpression_10_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringConstraintAccess().getRegularExpressionSTRINGTerminalRuleCall_5_1_0(), "regularExpression"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"regularExpression",
	        		lv_regularExpression_10_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleDateTimeConstraint
entryRuleDateTimeConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDateTimeConstraintRule(), currentNode); }
	 iv_ruleDateTimeConstraint=ruleDateTimeConstraint 
	 { $current=$iv_ruleDateTimeConstraint.current; } 
	 EOF 
;

// Rule DateTimeConstraint
ruleDateTimeConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_constraint_0_0=	'datetime' 
    {
        createLeafNode(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0(), "constraint"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimeConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "constraint", lv_constraint_0_0, "datetime", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimeConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeCrossReference_1_0(), "dataType"); 
	}

)
)((
(
		lv_hasDefault_2_0=	'default' 
    {
        createLeafNode(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0(), "hasDefault"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimeConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_defaultValue_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDateTimeConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_2_1_0(), "defaultValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimeConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValue",
	        		lv_defaultValue_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleIntegerConstraint
entryRuleIntegerConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerConstraintRule(), currentNode); }
	 iv_ruleIntegerConstraint=ruleIntegerConstraint 
	 { $current=$iv_ruleIntegerConstraint.current; } 
	 EOF 
;

// Rule IntegerConstraint
ruleIntegerConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_constraint_0_0=	'integer' 
    {
        createLeafNode(grammarAccess.getIntegerConstraintAccess().getConstraintIntegerKeyword_0_0(), "constraint"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "constraint", lv_constraint_0_0, "integer", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_hasDefault_1_0=	'default' 
    {
        createLeafNode(grammarAccess.getIntegerConstraintAccess().getHasDefaultDefaultKeyword_1_0_0(), "hasDefault"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_defaultValue_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerConstraintAccess().getDefaultValueINTTerminalRuleCall_1_1_0(), "defaultValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValue",
	        		lv_defaultValue_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'minVal' 
    {
        createLeafNode(grammarAccess.getIntegerConstraintAccess().getMinValKeyword_2_0(), null); 
    }
(
(
		lv_minValue_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerConstraintAccess().getMinValueINTTerminalRuleCall_2_1_0(), "minValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"minValue",
	        		lv_minValue_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'maxVal' 
    {
        createLeafNode(grammarAccess.getIntegerConstraintAccess().getMaxValKeyword_3_0(), null); 
    }
(
(
		lv_maxValue_6_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerConstraintAccess().getMaxValueINTTerminalRuleCall_3_1_0(), "maxValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"maxValue",
	        		lv_maxValue_6_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'maxLen' 
    {
        createLeafNode(grammarAccess.getIntegerConstraintAccess().getMaxLenKeyword_4_0(), null); 
    }
(
(
		lv_maxLen_8_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerConstraintAccess().getMaxLenINTTerminalRuleCall_4_1_0(), "maxLen"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"maxLen",
	        		lv_maxLen_8_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'fixeLen' 
    {
        createLeafNode(grammarAccess.getIntegerConstraintAccess().getFixeLenKeyword_5_0(), null); 
    }
(
(
		lv_fixeLen_10_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerConstraintAccess().getFixeLenINTTerminalRuleCall_5_1_0(), "fixeLen"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fixeLen",
	        		lv_fixeLen_10_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'paddle' 
    {
        createLeafNode(grammarAccess.getIntegerConstraintAccess().getPaddleKeyword_6_0(), null); 
    }
(
(
		lv_paddle_12_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getIntegerConstraintAccess().getPaddleSTRINGTerminalRuleCall_6_1_0(), "paddle"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"paddle",
	        		lv_paddle_12_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleDecimalConstraint
entryRuleDecimalConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDecimalConstraintRule(), currentNode); }
	 iv_ruleDecimalConstraint=ruleDecimalConstraint 
	 { $current=$iv_ruleDecimalConstraint.current; } 
	 EOF 
;

// Rule DecimalConstraint
ruleDecimalConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_constraint_0_0=	'decimal' 
    {
        createLeafNode(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0(), "constraint"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "constraint", lv_constraint_0_0, "decimal", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'minVal' 
    {
        createLeafNode(grammarAccess.getDecimalConstraintAccess().getMinValKeyword_1_0(), null); 
    }
(
(
		lv_minValue_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDecimalConstraintAccess().getMinValueINTTerminalRuleCall_1_1_0(), "minValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"minValue",
	        		lv_minValue_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'maxVal' 
    {
        createLeafNode(grammarAccess.getDecimalConstraintAccess().getMaxValKeyword_2_0(), null); 
    }
(
(
		lv_maxValue_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDecimalConstraintAccess().getMaxValueINTTerminalRuleCall_2_1_0(), "maxValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"maxValue",
	        		lv_maxValue_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'maxLen' 
    {
        createLeafNode(grammarAccess.getDecimalConstraintAccess().getMaxLenKeyword_3_0(), null); 
    }
(
(
		lv_maxLen_6_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDecimalConstraintAccess().getMaxLenINTTerminalRuleCall_3_1_0(), "maxLen"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"maxLen",
	        		lv_maxLen_6_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'fixeLen' 
    {
        createLeafNode(grammarAccess.getDecimalConstraintAccess().getFixeLenKeyword_4_0(), null); 
    }
(
(
		lv_fixeLen_8_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDecimalConstraintAccess().getFixeLenINTTerminalRuleCall_4_1_0(), "fixeLen"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fixeLen",
	        		lv_fixeLen_8_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'paddle' 
    {
        createLeafNode(grammarAccess.getDecimalConstraintAccess().getPaddleKeyword_5_0(), null); 
    }
(
(
		lv_paddle_10_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDecimalConstraintAccess().getPaddleSTRINGTerminalRuleCall_5_1_0(), "paddle"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"paddle",
	        		lv_paddle_10_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationRule(), currentNode); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enumeration' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'[' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_0(), currentNode); 
	    }
		lv_enumerationLiterals_3_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"enumerationLiterals",
	        		lv_enumerationLiterals_3_0, 
	        		"EnumerationLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	']' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationLiteralRule(), currentNode); }
	 iv_ruleEnumerationLiteral=ruleEnumerationLiteral 
	 { $current=$iv_ruleEnumerationLiteral.current; } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumerationLiteralAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getEnumerationLiteralAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		lv_persistedValue_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getEnumerationLiteralAccess().getPersistedValueINTTerminalRuleCall_1_1_0(), "persistedValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"persistedValue",
	        		lv_persistedValue_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	';' 
    {
        createLeafNode(grammarAccess.getEnumerationLiteralAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleEnumerationConstraint
entryRuleEnumerationConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationConstraintRule(), currentNode); }
	 iv_ruleEnumerationConstraint=ruleEnumerationConstraint 
	 { $current=$iv_ruleEnumerationConstraint.current; } 
	 EOF 
;

// Rule EnumerationConstraint
ruleEnumerationConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumerationConstraintAccess().getEnumKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationConstraintAccess().getUsageEnumUsageEnumRuleCall_1_0(), currentNode); 
	    }
		lv_usage_1_0=ruleEnumUsage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"usage",
	        		lv_usage_1_0, 
	        		"EnumUsage", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_hasDefault_2_0=	'default' 
    {
        createLeafNode(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_2_0_0(), "hasDefault"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_defaultValueAsString_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringIDTerminalRuleCall_2_1_0(), "defaultValueAsString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValueAsString",
	        		lv_defaultValueAsString_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;









// Rule EnumUsage
ruleEnumUsage returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'as String' 
	{
        $current = grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'as bool String' 
	{
        $current = grammarAccess.getEnumUsageAccess().getAsBooleanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEnumUsageAccess().getAsBooleanEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'as Value' 
	{
        $current = grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'as bool Value' 
	{
        $current = grammarAccess.getEnumUsageAccess().getAsBoolValueEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEnumUsageAccess().getAsBoolValueEnumLiteralDeclaration_3(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


