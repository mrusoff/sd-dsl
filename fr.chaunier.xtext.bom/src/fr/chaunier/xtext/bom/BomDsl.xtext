grammar fr.chaunier.xtext.bom.BomDsl with org.eclipse.xtext.common.Terminals

generate bomDsl "http://www.chaunier.fr/xtext/bom/BomDsl"

DomainModel:
	(elements+=AbstractElement)*;

//CartridgeLine:
//	 'line' line=STRING ;

//FileFormat:
//	'format' format = 'XSD' | 'DTD' | 'FLAT' | 'CSV' ;

AbstractElement:
	PackageDeclaration | Type | Import;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

PackageDeclaration:
//	(fileFormat=FileFormat
	'package' name=QualifiedName ('prefix' prefix=QualifiedName) ('namespace' namespace=STRING) '{'
		('line' lines+=STRING)* 
		(elements+=AbstractElement)*
	'}';

Type:
	( Entity | DataType | Enumeration )
	;  

DataType:
	'datatype' name=ID ;

Entity:
	'entity' name=ID ('extends' superType=[Entity|QualifiedName])? 	(description=STRING )? '{'
		(features+=Feature)*
	'}';

Feature:
	StructuralFeature (constraint=Constraint)?  (description=STRING )? //| Operation
	;

StructuralFeature:
	( Attribute | Reference ) ;

Attribute:
	name=ID ':' type=TypeRef  ;

Reference:
	'ref' name=ID ':' type=TypeRef ('opposite' opposite=[Reference])? ;

//Operation:
//	(visibility=Visibility)? 'op' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' ':' type=TypeRef;

Parameter:
	name=ID type=TypeRef ;

TypedElement:
	Feature | Parameter;

TypeRef:
	referenced=[Type|QualifiedName] (multi?='*')? (option?='?')?  ;

enum Visibility:
	public="public" | private="private" | protected="protected";

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

	
Constraint :

    (BoolConstraint | StringConstraint | DateTimeConstraint | IntegerConstraint |
	 DecimalConstraint 
	 | EnumerationConstraint 
//	 | QualifiedName 
//	(nullable?="nullable")?
//	(derived?="derived" (writable?="writable")?)?
//	("persistency" persistency=PersistencyMode)?
	);

BoolConstraint:
    constraint="boolean" //dataType=[DataType]
    (hasDefault?="default" ((defaultValue?="true") | "false"))?
    ;

StringConstraint:
    constraint="string" //dataType=[DataType]
    (hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)?
    ("minLen" minLength=INT)? ("maxLen" maxLength=INT)? ("fixeLen" fixeLength=INT)?  
    ("regexp" regularExpression=STRING)?
    ;

DateTimeConstraint:
    constraint="datetime"
//    accuracy=DateTimeAccuracy
    dataType=[DataType]
    (hasDefault?="default" defaultValue=STRING)?
    ;

enum DateTimeAccuracy:
    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
    Second = "second" | Millisecond = "millisecond"
    ;

IntegerConstraint:
    constraint="integer" 
    (hasDefault?="default" defaultValue=INT)? (isFixed?="fixed" fixedValue=INT)?
    ("minVal" minValue=INT)? ("maxVal" maxValue=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)? 
    ;

DecimalConstraint:
    constraint="decimal" 
    (hasDefault?="default" defaultValue=INT)? (isFixed?="fixed" fixedValue=STRING)?
    ("minVal" minValue=INT)? ("maxVal" maxValue=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)?  
    ;

Enumeration:
    "enumeration" name= ID 
    "[" (enumerationLiterals += EnumerationLiteral)+ "]"
    ;

EnumerationLiteral:
    name=ID ("=" persistedValue=INT) ";" 
    ;

enum EnumUsage:
	asString="as String" | asBoolean="as bool String" | asValue="as Value" | asBoolValue="as bool Value" ;

EnumerationConstraint:
// 'map' leftField=[types::JvmFeature|ID]
//    'enum' enumRef=[Enumeration] (usage=EnumUsage) 
    'enum' (usage=EnumUsage) 
    (hasDefault?="default" defaultValueAsString=ID)?
    ; 
	