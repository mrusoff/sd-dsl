/*
* generated by Xtext
*/

package fr.chaunier.xtext.constraint.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CstDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainModelConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainModelConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementConstraintParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//DomainModelConstraint: //	fileSpecification=FileSpecification
		//	imports+=Import* elements+=AbstractElementConstraint*;
		public ParserRule getRule() { return rule; }

		////	fileSpecification=FileSpecification
		//imports+=Import* elements+=AbstractElementConstraint*
		public Group getGroup() { return cGroup; }

		////	fileSpecification=FileSpecification
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//elements+=AbstractElementConstraint*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//AbstractElementConstraint
		public RuleCall getElementsAbstractElementConstraintParserRuleCall_1_0() { return cElementsAbstractElementConstraintParserRuleCall_1_0; }
	}

	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFileSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFreeSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Specification:
		//	FileSpecification | FreeSpecification;
		public ParserRule getRule() { return rule; }

		//FileSpecification | FreeSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//FileSpecification
		public RuleCall getFileSpecificationParserRuleCall_0() { return cFileSpecificationParserRuleCall_0; }

		//FreeSpecification
		public RuleCall getFreeSpecificationParserRuleCall_1() { return cFreeSpecificationParserRuleCall_1; }
	}

	public class FileSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFormatAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFormatXSDKeyword_0_0 = (Keyword)cFormatAssignment_0.eContents().get(0);
		private final Keyword cDTDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFLATKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cCSVKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cDelimiterKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDelimiterAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDelimiterSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cDelimiterAssignment_3_2.eContents().get(0);
		private final Keyword cDBKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//FileSpecification:
		//	format="XSD" | "DTD" | "FLAT" | "CSV" "delimiter" delimiter=STRING | "DB";
		public ParserRule getRule() { return rule; }

		//format="XSD" | "DTD" | "FLAT" | "CSV" "delimiter" delimiter=STRING | "DB"
		public Alternatives getAlternatives() { return cAlternatives; }

		//format="XSD"
		public Assignment getFormatAssignment_0() { return cFormatAssignment_0; }

		//"XSD"
		public Keyword getFormatXSDKeyword_0_0() { return cFormatXSDKeyword_0_0; }

		//"DTD"
		public Keyword getDTDKeyword_1() { return cDTDKeyword_1; }

		//"FLAT"
		public Keyword getFLATKeyword_2() { return cFLATKeyword_2; }

		//"CSV" "delimiter" delimiter=STRING
		public Group getGroup_3() { return cGroup_3; }

		//"CSV"
		public Keyword getCSVKeyword_3_0() { return cCSVKeyword_3_0; }

		//"delimiter"
		public Keyword getDelimiterKeyword_3_1() { return cDelimiterKeyword_3_1; }

		//delimiter=STRING
		public Assignment getDelimiterAssignment_3_2() { return cDelimiterAssignment_3_2; }

		//STRING
		public RuleCall getDelimiterSTRINGTerminalRuleCall_3_2_0() { return cDelimiterSTRINGTerminalRuleCall_3_2_0; }

		//"DB"
		public Keyword getDBKeyword_4() { return cDBKeyword_4; }
	}

	public class FreeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinesSTRINGTerminalRuleCall_1_0 = (RuleCall)cLinesAssignment_1.eContents().get(0);
		
		//FreeSpecification:
		//	"line" lines+=STRING*;
		public ParserRule getRule() { return rule; }

		//"line" lines+=STRING*
		public Group getGroup() { return cGroup; }

		//"line"
		public Keyword getLineKeyword_0() { return cLineKeyword_0; }

		//lines+=STRING*
		public Assignment getLinesAssignment_1() { return cLinesAssignment_1; }

		//STRING
		public RuleCall getLinesSTRINGTerminalRuleCall_1_0() { return cLinesSTRINGTerminalRuleCall_1_0; }
	}

	public class AbstractElementConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElementConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntityConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// * | Import * / AbstractElementConstraint:
		//	PackageConstraint | DataTypeConstraint | EntityConstraint;
		public ParserRule getRule() { return rule; }

		//PackageConstraint | DataTypeConstraint | EntityConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageConstraint
		public RuleCall getPackageConstraintParserRuleCall_0() { return cPackageConstraintParserRuleCall_0; }

		//DataTypeConstraint
		public RuleCall getDataTypeConstraintParserRuleCall_1() { return cDataTypeConstraintParserRuleCall_1; }

		//EntityConstraint
		public RuleCall getEntityConstraintParserRuleCall_2() { return cEntityConstraintParserRuleCall_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class PackageConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageDeclarationPackageDeclarationCrossReference_1_0 = (CrossReference)cPackageDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cPackageDeclarationPackageDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cPackageDeclarationPackageDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPrefixKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPrefixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrefixQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cPrefixAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNamespaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamespaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cNamespaceAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypesTypeConstraintParserRuleCall_5_0 = (RuleCall)cTypesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PackageConstraint:
		//	"package" packageDeclaration=[mm::PackageDeclaration] ("prefix" prefix=QualifiedName) ("namespace" namespace=STRING)
		//	"{" types+=TypeConstraint* "}";
		public ParserRule getRule() { return rule; }

		//"package" packageDeclaration=[mm::PackageDeclaration] ("prefix" prefix=QualifiedName) ("namespace" namespace=STRING) "{"
		//types+=TypeConstraint* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageDeclaration=[mm::PackageDeclaration]
		public Assignment getPackageDeclarationAssignment_1() { return cPackageDeclarationAssignment_1; }

		//[mm::PackageDeclaration]
		public CrossReference getPackageDeclarationPackageDeclarationCrossReference_1_0() { return cPackageDeclarationPackageDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getPackageDeclarationPackageDeclarationIDTerminalRuleCall_1_0_1() { return cPackageDeclarationPackageDeclarationIDTerminalRuleCall_1_0_1; }

		//"prefix" prefix=QualifiedName
		public Group getGroup_2() { return cGroup_2; }

		//"prefix"
		public Keyword getPrefixKeyword_2_0() { return cPrefixKeyword_2_0; }

		//prefix=QualifiedName
		public Assignment getPrefixAssignment_2_1() { return cPrefixAssignment_2_1; }

		//QualifiedName
		public RuleCall getPrefixQualifiedNameParserRuleCall_2_1_0() { return cPrefixQualifiedNameParserRuleCall_2_1_0; }

		//"namespace" namespace=STRING
		public Group getGroup_3() { return cGroup_3; }

		//"namespace"
		public Keyword getNamespaceKeyword_3_0() { return cNamespaceKeyword_3_0; }

		//namespace=STRING
		public Assignment getNamespaceAssignment_3_1() { return cNamespaceAssignment_3_1; }

		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_3_1_0() { return cNamespaceSTRINGTerminalRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//types+=TypeConstraint*
		public Assignment getTypesAssignment_5() { return cTypesAssignment_5; }

		//TypeConstraint
		public RuleCall getTypesTypeConstraintParserRuleCall_5_0() { return cTypesTypeConstraintParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TypeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeConstraint:
		//	EntityConstraint | DataTypeConstraint;
		public ParserRule getRule() { return rule; }

		//EntityConstraint | DataTypeConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntityConstraint
		public RuleCall getEntityConstraintParserRuleCall_0() { return cEntityConstraintParserRuleCall_0; }

		//DataTypeConstraint
		public RuleCall getDataTypeConstraintParserRuleCall_1() { return cDataTypeConstraintParserRuleCall_1; }
	}

	public class DataTypeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDataTypeDataTypeCrossReference_1_0 = (CrossReference)cDataTypeAssignment_1.eContents().get(0);
		private final RuleCall cDataTypeDataTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cDataTypeDataTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintConstraintParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//DataTypeConstraint:
		//	"datatype" dataType=[mm::DataType] constraint=Constraint? description=STRING?;
		public ParserRule getRule() { return rule; }

		//"datatype" dataType=[mm::DataType] constraint=Constraint? description=STRING?
		public Group getGroup() { return cGroup; }

		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//dataType=[mm::DataType]
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//[mm::DataType]
		public CrossReference getDataTypeDataTypeCrossReference_1_0() { return cDataTypeDataTypeCrossReference_1_0; }

		//ID
		public RuleCall getDataTypeDataTypeIDTerminalRuleCall_1_0_1() { return cDataTypeDataTypeIDTerminalRuleCall_1_0_1; }

		//constraint=Constraint?
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }

		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_2_0() { return cConstraintConstraintParserRuleCall_2_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
	}

	public class EntityConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureConstraintParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EntityConstraint:
		//	"entity" entity=[mm::Entity] description=STRING? "{" features+=FeatureConstraint* "}";
		public ParserRule getRule() { return rule; }

		//"entity" entity=[mm::Entity] description=STRING? "{" features+=FeatureConstraint* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//entity=[mm::Entity]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }

		//[mm::Entity]
		public CrossReference getEntityEntityCrossReference_1_0() { return cEntityEntityCrossReference_1_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_1_0_1() { return cEntityEntityIDTerminalRuleCall_1_0_1; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=FeatureConstraint*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//FeatureConstraint
		public RuleCall getFeaturesFeatureConstraintParserRuleCall_4_0() { return cFeaturesFeatureConstraintParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FeatureConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributeConstraintParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintConstraintParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//FeatureConstraint:
		//	AttributeConstraint constraint=Constraint? description=STRING? //| Operation
		//;
		public ParserRule getRule() { return rule; }

		//AttributeConstraint constraint=Constraint? description=STRING? //| Operation
		public Group getGroup() { return cGroup; }

		//AttributeConstraint
		public RuleCall getAttributeConstraintParserRuleCall_0() { return cAttributeConstraintParserRuleCall_0; }

		//constraint=Constraint?
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }

		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_1_0() { return cConstraintConstraintParserRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}

	public class AttributeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeConstraint");
		private final Assignment cAttributeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_0 = (CrossReference)cAttributeAssignment.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_1 = (RuleCall)cAttributeAttributeCrossReference_0.eContents().get(1);
		
		//AttributeConstraint:
		//	attribute=[mm::Attribute];
		public ParserRule getRule() { return rule; }

		//attribute=[mm::Attribute]
		public Assignment getAttributeAssignment() { return cAttributeAssignment; }

		//[mm::Attribute]
		public CrossReference getAttributeAttributeCrossReference_0() { return cAttributeAttributeCrossReference_0; }

		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_1; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateTimeConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDecimalConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationConstraintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////	'attribute' attribute=[mm::Attribute]  ;
		//Constraint:
		//	BoolConstraint | StringConstraint | DateTimeConstraint | DecimalConstraint | EnumerationConstraint;
		public ParserRule getRule() { return rule; }

		//BoolConstraint | StringConstraint | DateTimeConstraint | DecimalConstraint | EnumerationConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//BoolConstraint
		public RuleCall getBoolConstraintParserRuleCall_0() { return cBoolConstraintParserRuleCall_0; }

		//StringConstraint
		public RuleCall getStringConstraintParserRuleCall_1() { return cStringConstraintParserRuleCall_1; }

		//DateTimeConstraint
		public RuleCall getDateTimeConstraintParserRuleCall_2() { return cDateTimeConstraintParserRuleCall_2; }

		//DecimalConstraint
		public RuleCall getDecimalConstraintParserRuleCall_3() { return cDecimalConstraintParserRuleCall_3; }

		//EnumerationConstraint
		public RuleCall getEnumerationConstraintParserRuleCall_4() { return cEnumerationConstraintParserRuleCall_4; }
	}

	public class BoolConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolConstraint");
		private final Assignment cConstraintAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cConstraintBooleanKeyword_0 = (Keyword)cConstraintAssignment.eContents().get(0);
		
		//BoolConstraint:
		//	constraint="boolean";
		public ParserRule getRule() { return rule; }

		//constraint="boolean"
		public Assignment getConstraintAssignment() { return cConstraintAssignment; }

		//"boolean"
		public Keyword getConstraintBooleanKeyword_0() { return cConstraintBooleanKeyword_0; }
	}

	public class StringConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstraintStringKeyword_0_0 = (Keyword)cConstraintAssignment_0.eContents().get(0);
		private final Assignment cConstraintRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintRefAllConstraintParserRuleCall_1_0 = (RuleCall)cConstraintRefAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRegexpKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRegularExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRegularExpressionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cRegularExpressionAssignment_2_1.eContents().get(0);
		
		//StringConstraint:
		//	constraint="string" constraintRef=AllConstraint ("regexp" regularExpression=STRING)?;
		public ParserRule getRule() { return rule; }

		//constraint="string" constraintRef=AllConstraint ("regexp" regularExpression=STRING)?
		public Group getGroup() { return cGroup; }

		//constraint="string"
		public Assignment getConstraintAssignment_0() { return cConstraintAssignment_0; }

		//"string"
		public Keyword getConstraintStringKeyword_0_0() { return cConstraintStringKeyword_0_0; }

		//constraintRef=AllConstraint
		public Assignment getConstraintRefAssignment_1() { return cConstraintRefAssignment_1; }

		//AllConstraint
		public RuleCall getConstraintRefAllConstraintParserRuleCall_1_0() { return cConstraintRefAllConstraintParserRuleCall_1_0; }

		//("regexp" regularExpression=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"regexp"
		public Keyword getRegexpKeyword_2_0() { return cRegexpKeyword_2_0; }

		//regularExpression=STRING
		public Assignment getRegularExpressionAssignment_2_1() { return cRegularExpressionAssignment_2_1; }

		//STRING
		public RuleCall getRegularExpressionSTRINGTerminalRuleCall_2_1_0() { return cRegularExpressionSTRINGTerminalRuleCall_2_1_0; }
	}

	public class DateTimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstraintDatetimeKeyword_0_0 = (Keyword)cConstraintAssignment_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDataTypeDataTypeCrossReference_1_0 = (CrossReference)cDataTypeAssignment_1.eContents().get(0);
		private final RuleCall cDataTypeDataTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cDataTypeDataTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cHasDefaultAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_2_0_0 = (Keyword)cHasDefaultAssignment_2_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDefaultValueAssignment_2_1.eContents().get(0);
		
		//DateTimeConstraint:
		//	constraint="datetime" //    accuracy=DateTimeAccuracy
		//	dataType=[mm::DataType] (hasDefault?="default" defaultValue=STRING)?;
		public ParserRule getRule() { return rule; }

		//constraint="datetime" //    accuracy=DateTimeAccuracy
		//dataType=[mm::DataType] (hasDefault?="default" defaultValue=STRING)?
		public Group getGroup() { return cGroup; }

		//constraint="datetime"
		public Assignment getConstraintAssignment_0() { return cConstraintAssignment_0; }

		//"datetime"
		public Keyword getConstraintDatetimeKeyword_0_0() { return cConstraintDatetimeKeyword_0_0; }

		////    accuracy=DateTimeAccuracy
		//dataType=[mm::DataType]
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//[mm::DataType]
		public CrossReference getDataTypeDataTypeCrossReference_1_0() { return cDataTypeDataTypeCrossReference_1_0; }

		//ID
		public RuleCall getDataTypeDataTypeIDTerminalRuleCall_1_0_1() { return cDataTypeDataTypeIDTerminalRuleCall_1_0_1; }

		//(hasDefault?="default" defaultValue=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_2_0() { return cHasDefaultAssignment_2_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_2_0_0() { return cHasDefaultDefaultKeyword_2_0_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_2_1() { return cDefaultValueAssignment_2_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_2_1_0() { return cDefaultValueSTRINGTerminalRuleCall_2_1_0; }
	}

	public class DecimalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstraintDecimalKeyword_0_0 = (Keyword)cConstraintAssignment_0.eContents().get(0);
		private final Assignment cConstraintRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintRefNumberConstraintParserRuleCall_1_0 = (RuleCall)cConstraintRefAssignment_1.eContents().get(0);
		
		////enum DateTimeAccuracy:
		////    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
		////    Second = "second" | Millisecond = "millisecond"
		////    ;
		//DecimalConstraint:
		//	constraint="decimal" constraintRef=NumberConstraint;
		public ParserRule getRule() { return rule; }

		//constraint="decimal" constraintRef=NumberConstraint
		public Group getGroup() { return cGroup; }

		//constraint="decimal"
		public Assignment getConstraintAssignment_0() { return cConstraintAssignment_0; }

		//"decimal"
		public Keyword getConstraintDecimalKeyword_0_0() { return cConstraintDecimalKeyword_0_0; }

		//constraintRef=NumberConstraint
		public Assignment getConstraintRefAssignment_1() { return cConstraintRefAssignment_1; }

		//NumberConstraint
		public RuleCall getConstraintRefNumberConstraintParserRuleCall_1_0() { return cConstraintRefNumberConstraintParserRuleCall_1_0; }
	}

	public class EnumerationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUsageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsageEnumUsageEnumRuleCall_1_0 = (RuleCall)cUsageAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFixeLenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFixeLenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFixeLenINTTerminalRuleCall_2_1_0 = (RuleCall)cFixeLenAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasDefaultAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_3_0_0 = (Keyword)cHasDefaultAssignment_3_0.eContents().get(0);
		private final Assignment cDefaultValueAsStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueAsStringIDTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueAsStringAssignment_3_1.eContents().get(0);
		
		//EnumerationConstraint:
		//	"enum" usage=EnumUsage ("fixeLen" fixeLen=INT)? (hasDefault?="default" defaultValueAsString=ID)?;
		public ParserRule getRule() { return rule; }

		//"enum" usage=EnumUsage ("fixeLen" fixeLen=INT)? (hasDefault?="default" defaultValueAsString=ID)?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//usage=EnumUsage
		public Assignment getUsageAssignment_1() { return cUsageAssignment_1; }

		//EnumUsage
		public RuleCall getUsageEnumUsageEnumRuleCall_1_0() { return cUsageEnumUsageEnumRuleCall_1_0; }

		//("fixeLen" fixeLen=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"fixeLen"
		public Keyword getFixeLenKeyword_2_0() { return cFixeLenKeyword_2_0; }

		//fixeLen=INT
		public Assignment getFixeLenAssignment_2_1() { return cFixeLenAssignment_2_1; }

		//INT
		public RuleCall getFixeLenINTTerminalRuleCall_2_1_0() { return cFixeLenINTTerminalRuleCall_2_1_0; }

		//(hasDefault?="default" defaultValueAsString=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_3_0() { return cHasDefaultAssignment_3_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_3_0_0() { return cHasDefaultDefaultKeyword_3_0_0; }

		//defaultValueAsString=ID
		public Assignment getDefaultValueAsStringAssignment_3_1() { return cDefaultValueAsStringAssignment_3_1; }

		//ID
		public RuleCall getDefaultValueAsStringIDTerminalRuleCall_3_1_0() { return cDefaultValueAsStringIDTerminalRuleCall_3_1_0; }
	}

	public class NumberConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHasDefaultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_0_0_0 = (Keyword)cHasDefaultAssignment_0_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDefaultValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIsFixedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsFixedFixedKeyword_1_0_0 = (Keyword)cIsFixedAssignment_1_0.eContents().get(0);
		private final Assignment cFixedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFixedValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFixedValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMinValKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinValueINTTerminalRuleCall_2_1_0 = (RuleCall)cMinValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxValKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxValueINTTerminalRuleCall_3_1_0 = (RuleCall)cMaxValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMinLenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMinLenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMinLenINTTerminalRuleCall_4_1_0 = (RuleCall)cMinLenAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMaxLenKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMaxLenAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMaxLenINTTerminalRuleCall_5_1_0 = (RuleCall)cMaxLenAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFixeLenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFixeLenAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFixeLenINTTerminalRuleCall_6_1_0 = (RuleCall)cFixeLenAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPaddleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPaddleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPaddleSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cPaddleAssignment_7_1.eContents().get(0);
		private final Assignment cIsIdAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cIsIdIdKeyword_8_0 = (Keyword)cIsIdAssignment_8.eContents().get(0);
		private final Assignment cNullableAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cNullableNullableKeyword_9_0 = (Keyword)cNullableAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cDerivedAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_10_0_0 = (Keyword)cDerivedAssignment_10_0.eContents().get(0);
		private final Assignment cWritableAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final Keyword cWritableWritableKeyword_10_1_0 = (Keyword)cWritableAssignment_10_1.eContents().get(0);
		private final Assignment cIsXSDAttAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Keyword cIsXSDAttXsdAKeyword_11_0 = (Keyword)cIsXSDAttAssignment_11.eContents().get(0);
		
		//NumberConstraint:
		//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minVal" minValue=INT)? ("maxVal"
		//	maxValue=INT)? ("minLen" minLen=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)?
		//	isId?="id"? nullable?="nullable"? (derived?="derived" writable?="writable"?)? isXSDAtt?="xsdA."?;
		public ParserRule getRule() { return rule; }

		//(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minVal" minValue=INT)? ("maxVal"
		//maxValue=INT)? ("minLen" minLen=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)?
		//isId?="id"? nullable?="nullable"? (derived?="derived" writable?="writable"?)? isXSDAtt?="xsdA."?
		public Group getGroup() { return cGroup; }

		//(hasDefault?="default" defaultValue=STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_0_0() { return cHasDefaultAssignment_0_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_0_0_0() { return cHasDefaultDefaultKeyword_0_0_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_0_1() { return cDefaultValueAssignment_0_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_0_1_0() { return cDefaultValueSTRINGTerminalRuleCall_0_1_0; }

		//(isFixed?="fixed" fixedValue=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//isFixed?="fixed"
		public Assignment getIsFixedAssignment_1_0() { return cIsFixedAssignment_1_0; }

		//"fixed"
		public Keyword getIsFixedFixedKeyword_1_0_0() { return cIsFixedFixedKeyword_1_0_0; }

		//fixedValue=STRING
		public Assignment getFixedValueAssignment_1_1() { return cFixedValueAssignment_1_1; }

		//STRING
		public RuleCall getFixedValueSTRINGTerminalRuleCall_1_1_0() { return cFixedValueSTRINGTerminalRuleCall_1_1_0; }

		//("minVal" minValue=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"minVal"
		public Keyword getMinValKeyword_2_0() { return cMinValKeyword_2_0; }

		//minValue=INT
		public Assignment getMinValueAssignment_2_1() { return cMinValueAssignment_2_1; }

		//INT
		public RuleCall getMinValueINTTerminalRuleCall_2_1_0() { return cMinValueINTTerminalRuleCall_2_1_0; }

		//("maxVal" maxValue=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"maxVal"
		public Keyword getMaxValKeyword_3_0() { return cMaxValKeyword_3_0; }

		//maxValue=INT
		public Assignment getMaxValueAssignment_3_1() { return cMaxValueAssignment_3_1; }

		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_3_1_0() { return cMaxValueINTTerminalRuleCall_3_1_0; }

		//("minLen" minLen=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"minLen"
		public Keyword getMinLenKeyword_4_0() { return cMinLenKeyword_4_0; }

		//minLen=INT
		public Assignment getMinLenAssignment_4_1() { return cMinLenAssignment_4_1; }

		//INT
		public RuleCall getMinLenINTTerminalRuleCall_4_1_0() { return cMinLenINTTerminalRuleCall_4_1_0; }

		//("maxLen" maxLen=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//"maxLen"
		public Keyword getMaxLenKeyword_5_0() { return cMaxLenKeyword_5_0; }

		//maxLen=INT
		public Assignment getMaxLenAssignment_5_1() { return cMaxLenAssignment_5_1; }

		//INT
		public RuleCall getMaxLenINTTerminalRuleCall_5_1_0() { return cMaxLenINTTerminalRuleCall_5_1_0; }

		//("fixeLen" fixeLen=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"fixeLen"
		public Keyword getFixeLenKeyword_6_0() { return cFixeLenKeyword_6_0; }

		//fixeLen=INT
		public Assignment getFixeLenAssignment_6_1() { return cFixeLenAssignment_6_1; }

		//INT
		public RuleCall getFixeLenINTTerminalRuleCall_6_1_0() { return cFixeLenINTTerminalRuleCall_6_1_0; }

		//("paddle" paddle=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"paddle"
		public Keyword getPaddleKeyword_7_0() { return cPaddleKeyword_7_0; }

		//paddle=STRING
		public Assignment getPaddleAssignment_7_1() { return cPaddleAssignment_7_1; }

		//STRING
		public RuleCall getPaddleSTRINGTerminalRuleCall_7_1_0() { return cPaddleSTRINGTerminalRuleCall_7_1_0; }

		//isId?="id"?
		public Assignment getIsIdAssignment_8() { return cIsIdAssignment_8; }

		//"id"
		public Keyword getIsIdIdKeyword_8_0() { return cIsIdIdKeyword_8_0; }

		//nullable?="nullable"?
		public Assignment getNullableAssignment_9() { return cNullableAssignment_9; }

		//"nullable"
		public Keyword getNullableNullableKeyword_9_0() { return cNullableNullableKeyword_9_0; }

		//(derived?="derived" writable?="writable"?)?
		public Group getGroup_10() { return cGroup_10; }

		//derived?="derived"
		public Assignment getDerivedAssignment_10_0() { return cDerivedAssignment_10_0; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_10_0_0() { return cDerivedDerivedKeyword_10_0_0; }

		//writable?="writable"?
		public Assignment getWritableAssignment_10_1() { return cWritableAssignment_10_1; }

		//"writable"
		public Keyword getWritableWritableKeyword_10_1_0() { return cWritableWritableKeyword_10_1_0; }

		//isXSDAtt?="xsdA."?
		public Assignment getIsXSDAttAssignment_11() { return cIsXSDAttAssignment_11; }

		//"xsdA."
		public Keyword getIsXSDAttXsdAKeyword_11_0() { return cIsXSDAttXsdAKeyword_11_0; }
	}

	public class AllConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHasDefaultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cHasDefaultDefaultKeyword_0_0_0 = (Keyword)cHasDefaultAssignment_0_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDefaultValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIsFixedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsFixedFixedKeyword_1_0_0 = (Keyword)cIsFixedAssignment_1_0.eContents().get(0);
		private final Assignment cFixedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFixedValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFixedValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMinLenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinLenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinLenINTTerminalRuleCall_2_1_0 = (RuleCall)cMinLenAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxLenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxLenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxLenINTTerminalRuleCall_3_1_0 = (RuleCall)cMaxLenAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFixeLenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFixeLenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFixeLenINTTerminalRuleCall_4_1_0 = (RuleCall)cFixeLenAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPaddleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPaddleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPaddleSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cPaddleAssignment_5_1.eContents().get(0);
		private final Assignment cIsIdAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cIsIdIdKeyword_6_0 = (Keyword)cIsIdAssignment_6.eContents().get(0);
		private final Assignment cNullableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cNullableNullableKeyword_7_0 = (Keyword)cNullableAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cDerivedAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_8_0_0 = (Keyword)cDerivedAssignment_8_0.eContents().get(0);
		private final Assignment cWritableAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cWritableWritableKeyword_8_1_0 = (Keyword)cWritableAssignment_8_1.eContents().get(0);
		private final Assignment cIsXSDAttAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cIsXSDAttXsdAKeyword_9_0 = (Keyword)cIsXSDAttAssignment_9.eContents().get(0);
		
		/// *
		//System:
		//	(featureModel=FeatureModelImport)?
		//	(entities+=Entity)*;
		//	
		//Entity:
		//	(pointcut=Pointcut)?
		//	"entity" name=ID 
		//	(tags=TagsClause)? 
		//	(featureClause=FeatureClause)? "{"
		//		(attributes+=Attribute)*
		//	"}";
		//	
		//Attribute:
		//	name=ID ":" type=ID (featureClause=FeatureClause)?;
		//
		//// --------------------------------
		//// Feature Stuff
		//	
		//FeatureClause:
		//	"feature" feature=ID;
		//	
		//FeatureModelImport:
		//	"featuremodel" uri=STRING;
		//
		//
		//// --------------------------------
		//// AO Stuff
		//
		//TagsClause:
		//	"tags" "(" (tags+=Tag)* ")";
		//	
		//Tag:
		//	name=ID;	
		//	
		//
		//Pointcut:
		//	"aspect" "{" (matches+=Match)* "}";
		//	
		//Match:
		//	AllMatch | ExactNameMatch | StartsWithNameMatch | EndsWithNameMatch | TagMatch;	
		//	
		//AllMatch:
		//	"*";
		//	
		//ExactNameMatch:
		//	"name" "=" name=ID;
		//	
		//StartsWithNameMatch:
		//	"name" "=" name=ID "*";
		//	
		//EndsWithNameMatch:
		//	"name" "="  "*" name=ID;
		//	
		//TagMatch:
		//	"tag" "=" name=ID;
		//
		// * / AllConstraint:
		//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minLen" minLen=INT)? ("maxLen"
		//	maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)? isId?="id"? nullable?="nullable"? (derived?="derived"
		//	writable?="writable"?)? isXSDAtt?="xsdA."?;
		public ParserRule getRule() { return rule; }

		//(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minLen" minLen=INT)? ("maxLen"
		//maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)? isId?="id"? nullable?="nullable"? (derived?="derived"
		//writable?="writable"?)? isXSDAtt?="xsdA."?
		public Group getGroup() { return cGroup; }

		//(hasDefault?="default" defaultValue=STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//hasDefault?="default"
		public Assignment getHasDefaultAssignment_0_0() { return cHasDefaultAssignment_0_0; }

		//"default"
		public Keyword getHasDefaultDefaultKeyword_0_0_0() { return cHasDefaultDefaultKeyword_0_0_0; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_0_1() { return cDefaultValueAssignment_0_1; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_0_1_0() { return cDefaultValueSTRINGTerminalRuleCall_0_1_0; }

		//(isFixed?="fixed" fixedValue=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//isFixed?="fixed"
		public Assignment getIsFixedAssignment_1_0() { return cIsFixedAssignment_1_0; }

		//"fixed"
		public Keyword getIsFixedFixedKeyword_1_0_0() { return cIsFixedFixedKeyword_1_0_0; }

		//fixedValue=STRING
		public Assignment getFixedValueAssignment_1_1() { return cFixedValueAssignment_1_1; }

		//STRING
		public RuleCall getFixedValueSTRINGTerminalRuleCall_1_1_0() { return cFixedValueSTRINGTerminalRuleCall_1_1_0; }

		//("minLen" minLen=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"minLen"
		public Keyword getMinLenKeyword_2_0() { return cMinLenKeyword_2_0; }

		//minLen=INT
		public Assignment getMinLenAssignment_2_1() { return cMinLenAssignment_2_1; }

		//INT
		public RuleCall getMinLenINTTerminalRuleCall_2_1_0() { return cMinLenINTTerminalRuleCall_2_1_0; }

		//("maxLen" maxLen=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"maxLen"
		public Keyword getMaxLenKeyword_3_0() { return cMaxLenKeyword_3_0; }

		//maxLen=INT
		public Assignment getMaxLenAssignment_3_1() { return cMaxLenAssignment_3_1; }

		//INT
		public RuleCall getMaxLenINTTerminalRuleCall_3_1_0() { return cMaxLenINTTerminalRuleCall_3_1_0; }

		//("fixeLen" fixeLen=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"fixeLen"
		public Keyword getFixeLenKeyword_4_0() { return cFixeLenKeyword_4_0; }

		//fixeLen=INT
		public Assignment getFixeLenAssignment_4_1() { return cFixeLenAssignment_4_1; }

		//INT
		public RuleCall getFixeLenINTTerminalRuleCall_4_1_0() { return cFixeLenINTTerminalRuleCall_4_1_0; }

		//("paddle" paddle=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"paddle"
		public Keyword getPaddleKeyword_5_0() { return cPaddleKeyword_5_0; }

		//paddle=STRING
		public Assignment getPaddleAssignment_5_1() { return cPaddleAssignment_5_1; }

		//STRING
		public RuleCall getPaddleSTRINGTerminalRuleCall_5_1_0() { return cPaddleSTRINGTerminalRuleCall_5_1_0; }

		//isId?="id"?
		public Assignment getIsIdAssignment_6() { return cIsIdAssignment_6; }

		//"id"
		public Keyword getIsIdIdKeyword_6_0() { return cIsIdIdKeyword_6_0; }

		//nullable?="nullable"?
		public Assignment getNullableAssignment_7() { return cNullableAssignment_7; }

		//"nullable"
		public Keyword getNullableNullableKeyword_7_0() { return cNullableNullableKeyword_7_0; }

		//(derived?="derived" writable?="writable"?)?
		public Group getGroup_8() { return cGroup_8; }

		//derived?="derived"
		public Assignment getDerivedAssignment_8_0() { return cDerivedAssignment_8_0; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_8_0_0() { return cDerivedDerivedKeyword_8_0_0; }

		//writable?="writable"?
		public Assignment getWritableAssignment_8_1() { return cWritableAssignment_8_1; }

		//"writable"
		public Keyword getWritableWritableKeyword_8_1_0() { return cWritableWritableKeyword_8_1_0; }

		//isXSDAtt?="xsdA."?
		public Assignment getIsXSDAttAssignment_9() { return cIsXSDAttAssignment_9; }

		//"xsdA."
		public Keyword getIsXSDAttXsdAKeyword_9_0() { return cIsXSDAttXsdAKeyword_9_0; }
	}
	
	
	public class EnumUsageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EnumUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAsStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAsStringAsStringKeyword_0_0 = (Keyword)cAsStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAsValueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAsValueAsValueKeyword_1_0 = (Keyword)cAsValueEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EnumUsage:
		//	asString="as String" | asValue="as Value";
		public EnumRule getRule() { return rule; }

		//asString="as String" | asValue="as Value"
		public Alternatives getAlternatives() { return cAlternatives; }

		//asString="as String"
		public EnumLiteralDeclaration getAsStringEnumLiteralDeclaration_0() { return cAsStringEnumLiteralDeclaration_0; }

		//"as String"
		public Keyword getAsStringAsStringKeyword_0_0() { return cAsStringAsStringKeyword_0_0; }

		//asValue="as Value"
		public EnumLiteralDeclaration getAsValueEnumLiteralDeclaration_1() { return cAsValueEnumLiteralDeclaration_1; }

		//"as Value"
		public Keyword getAsValueAsValueKeyword_1_0() { return cAsValueAsValueKeyword_1_0; }
	}
	
	private DomainModelConstraintElements pDomainModelConstraint;
	private SpecificationElements pSpecification;
	private FileSpecificationElements pFileSpecification;
	private FreeSpecificationElements pFreeSpecification;
	private AbstractElementConstraintElements pAbstractElementConstraint;
	private ImportElements pImport;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private QualifiedNameElements pQualifiedName;
	private PackageConstraintElements pPackageConstraint;
	private TypeConstraintElements pTypeConstraint;
	private DataTypeConstraintElements pDataTypeConstraint;
	private EntityConstraintElements pEntityConstraint;
	private FeatureConstraintElements pFeatureConstraint;
	private AttributeConstraintElements pAttributeConstraint;
	private ConstraintElements pConstraint;
	private BoolConstraintElements pBoolConstraint;
	private StringConstraintElements pStringConstraint;
	private DateTimeConstraintElements pDateTimeConstraint;
	private DecimalConstraintElements pDecimalConstraint;
	private EnumUsageElements unknownRuleEnumUsage;
	private EnumerationConstraintElements pEnumerationConstraint;
	private NumberConstraintElements pNumberConstraint;
	private AllConstraintElements pAllConstraint;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CstDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainModelConstraint: //	fileSpecification=FileSpecification
	//	imports+=Import* elements+=AbstractElementConstraint*;
	public DomainModelConstraintElements getDomainModelConstraintAccess() {
		return (pDomainModelConstraint != null) ? pDomainModelConstraint : (pDomainModelConstraint = new DomainModelConstraintElements());
	}
	
	public ParserRule getDomainModelConstraintRule() {
		return getDomainModelConstraintAccess().getRule();
	}

	//Specification:
	//	FileSpecification | FreeSpecification;
	public SpecificationElements getSpecificationAccess() {
		return (pSpecification != null) ? pSpecification : (pSpecification = new SpecificationElements());
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//FileSpecification:
	//	format="XSD" | "DTD" | "FLAT" | "CSV" "delimiter" delimiter=STRING | "DB";
	public FileSpecificationElements getFileSpecificationAccess() {
		return (pFileSpecification != null) ? pFileSpecification : (pFileSpecification = new FileSpecificationElements());
	}
	
	public ParserRule getFileSpecificationRule() {
		return getFileSpecificationAccess().getRule();
	}

	//FreeSpecification:
	//	"line" lines+=STRING*;
	public FreeSpecificationElements getFreeSpecificationAccess() {
		return (pFreeSpecification != null) ? pFreeSpecification : (pFreeSpecification = new FreeSpecificationElements());
	}
	
	public ParserRule getFreeSpecificationRule() {
		return getFreeSpecificationAccess().getRule();
	}

	/// * | Import * / AbstractElementConstraint:
	//	PackageConstraint | DataTypeConstraint | EntityConstraint;
	public AbstractElementConstraintElements getAbstractElementConstraintAccess() {
		return (pAbstractElementConstraint != null) ? pAbstractElementConstraint : (pAbstractElementConstraint = new AbstractElementConstraintElements());
	}
	
	public ParserRule getAbstractElementConstraintRule() {
		return getAbstractElementConstraintAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//PackageConstraint:
	//	"package" packageDeclaration=[mm::PackageDeclaration] ("prefix" prefix=QualifiedName) ("namespace" namespace=STRING)
	//	"{" types+=TypeConstraint* "}";
	public PackageConstraintElements getPackageConstraintAccess() {
		return (pPackageConstraint != null) ? pPackageConstraint : (pPackageConstraint = new PackageConstraintElements());
	}
	
	public ParserRule getPackageConstraintRule() {
		return getPackageConstraintAccess().getRule();
	}

	//TypeConstraint:
	//	EntityConstraint | DataTypeConstraint;
	public TypeConstraintElements getTypeConstraintAccess() {
		return (pTypeConstraint != null) ? pTypeConstraint : (pTypeConstraint = new TypeConstraintElements());
	}
	
	public ParserRule getTypeConstraintRule() {
		return getTypeConstraintAccess().getRule();
	}

	//DataTypeConstraint:
	//	"datatype" dataType=[mm::DataType] constraint=Constraint? description=STRING?;
	public DataTypeConstraintElements getDataTypeConstraintAccess() {
		return (pDataTypeConstraint != null) ? pDataTypeConstraint : (pDataTypeConstraint = new DataTypeConstraintElements());
	}
	
	public ParserRule getDataTypeConstraintRule() {
		return getDataTypeConstraintAccess().getRule();
	}

	//EntityConstraint:
	//	"entity" entity=[mm::Entity] description=STRING? "{" features+=FeatureConstraint* "}";
	public EntityConstraintElements getEntityConstraintAccess() {
		return (pEntityConstraint != null) ? pEntityConstraint : (pEntityConstraint = new EntityConstraintElements());
	}
	
	public ParserRule getEntityConstraintRule() {
		return getEntityConstraintAccess().getRule();
	}

	//FeatureConstraint:
	//	AttributeConstraint constraint=Constraint? description=STRING? //| Operation
	//;
	public FeatureConstraintElements getFeatureConstraintAccess() {
		return (pFeatureConstraint != null) ? pFeatureConstraint : (pFeatureConstraint = new FeatureConstraintElements());
	}
	
	public ParserRule getFeatureConstraintRule() {
		return getFeatureConstraintAccess().getRule();
	}

	//AttributeConstraint:
	//	attribute=[mm::Attribute];
	public AttributeConstraintElements getAttributeConstraintAccess() {
		return (pAttributeConstraint != null) ? pAttributeConstraint : (pAttributeConstraint = new AttributeConstraintElements());
	}
	
	public ParserRule getAttributeConstraintRule() {
		return getAttributeConstraintAccess().getRule();
	}

	////	'attribute' attribute=[mm::Attribute]  ;
	//Constraint:
	//	BoolConstraint | StringConstraint | DateTimeConstraint | DecimalConstraint | EnumerationConstraint;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//BoolConstraint:
	//	constraint="boolean";
	public BoolConstraintElements getBoolConstraintAccess() {
		return (pBoolConstraint != null) ? pBoolConstraint : (pBoolConstraint = new BoolConstraintElements());
	}
	
	public ParserRule getBoolConstraintRule() {
		return getBoolConstraintAccess().getRule();
	}

	//StringConstraint:
	//	constraint="string" constraintRef=AllConstraint ("regexp" regularExpression=STRING)?;
	public StringConstraintElements getStringConstraintAccess() {
		return (pStringConstraint != null) ? pStringConstraint : (pStringConstraint = new StringConstraintElements());
	}
	
	public ParserRule getStringConstraintRule() {
		return getStringConstraintAccess().getRule();
	}

	//DateTimeConstraint:
	//	constraint="datetime" //    accuracy=DateTimeAccuracy
	//	dataType=[mm::DataType] (hasDefault?="default" defaultValue=STRING)?;
	public DateTimeConstraintElements getDateTimeConstraintAccess() {
		return (pDateTimeConstraint != null) ? pDateTimeConstraint : (pDateTimeConstraint = new DateTimeConstraintElements());
	}
	
	public ParserRule getDateTimeConstraintRule() {
		return getDateTimeConstraintAccess().getRule();
	}

	////enum DateTimeAccuracy:
	////    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
	////    Second = "second" | Millisecond = "millisecond"
	////    ;
	//DecimalConstraint:
	//	constraint="decimal" constraintRef=NumberConstraint;
	public DecimalConstraintElements getDecimalConstraintAccess() {
		return (pDecimalConstraint != null) ? pDecimalConstraint : (pDecimalConstraint = new DecimalConstraintElements());
	}
	
	public ParserRule getDecimalConstraintRule() {
		return getDecimalConstraintAccess().getRule();
	}

	//enum EnumUsage:
	//	asString="as String" | asValue="as Value";
	public EnumUsageElements getEnumUsageAccess() {
		return (unknownRuleEnumUsage != null) ? unknownRuleEnumUsage : (unknownRuleEnumUsage = new EnumUsageElements());
	}
	
	public EnumRule getEnumUsageRule() {
		return getEnumUsageAccess().getRule();
	}

	//EnumerationConstraint:
	//	"enum" usage=EnumUsage ("fixeLen" fixeLen=INT)? (hasDefault?="default" defaultValueAsString=ID)?;
	public EnumerationConstraintElements getEnumerationConstraintAccess() {
		return (pEnumerationConstraint != null) ? pEnumerationConstraint : (pEnumerationConstraint = new EnumerationConstraintElements());
	}
	
	public ParserRule getEnumerationConstraintRule() {
		return getEnumerationConstraintAccess().getRule();
	}

	//NumberConstraint:
	//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minVal" minValue=INT)? ("maxVal"
	//	maxValue=INT)? ("minLen" minLen=INT)? ("maxLen" maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)?
	//	isId?="id"? nullable?="nullable"? (derived?="derived" writable?="writable"?)? isXSDAtt?="xsdA."?;
	public NumberConstraintElements getNumberConstraintAccess() {
		return (pNumberConstraint != null) ? pNumberConstraint : (pNumberConstraint = new NumberConstraintElements());
	}
	
	public ParserRule getNumberConstraintRule() {
		return getNumberConstraintAccess().getRule();
	}

	/// *
	//System:
	//	(featureModel=FeatureModelImport)?
	//	(entities+=Entity)*;
	//	
	//Entity:
	//	(pointcut=Pointcut)?
	//	"entity" name=ID 
	//	(tags=TagsClause)? 
	//	(featureClause=FeatureClause)? "{"
	//		(attributes+=Attribute)*
	//	"}";
	//	
	//Attribute:
	//	name=ID ":" type=ID (featureClause=FeatureClause)?;
	//
	//// --------------------------------
	//// Feature Stuff
	//	
	//FeatureClause:
	//	"feature" feature=ID;
	//	
	//FeatureModelImport:
	//	"featuremodel" uri=STRING;
	//
	//
	//// --------------------------------
	//// AO Stuff
	//
	//TagsClause:
	//	"tags" "(" (tags+=Tag)* ")";
	//	
	//Tag:
	//	name=ID;	
	//	
	//
	//Pointcut:
	//	"aspect" "{" (matches+=Match)* "}";
	//	
	//Match:
	//	AllMatch | ExactNameMatch | StartsWithNameMatch | EndsWithNameMatch | TagMatch;	
	//	
	//AllMatch:
	//	"*";
	//	
	//ExactNameMatch:
	//	"name" "=" name=ID;
	//	
	//StartsWithNameMatch:
	//	"name" "=" name=ID "*";
	//	
	//EndsWithNameMatch:
	//	"name" "="  "*" name=ID;
	//	
	//TagMatch:
	//	"tag" "=" name=ID;
	//
	// * / AllConstraint:
	//	(hasDefault?="default" defaultValue=STRING)? (isFixed?="fixed" fixedValue=STRING)? ("minLen" minLen=INT)? ("maxLen"
	//	maxLen=INT)? ("fixeLen" fixeLen=INT)? ("paddle" paddle=STRING)? isId?="id"? nullable?="nullable"? (derived?="derived"
	//	writable?="writable"?)? isXSDAtt?="xsdA."?;
	public AllConstraintElements getAllConstraintAccess() {
		return (pAllConstraint != null) ? pAllConstraint : (pAllConstraint = new AllConstraintElements());
	}
	
	public ParserRule getAllConstraintRule() {
		return getAllConstraintAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
