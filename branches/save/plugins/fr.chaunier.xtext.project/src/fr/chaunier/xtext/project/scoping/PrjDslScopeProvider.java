/*
 * generated by Xtext
 */
package fr.chaunier.xtext.project.scoping;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import fr.chaunier.xtext.omc.omcDsl.Entity;
import fr.chaunier.xtext.project.prjDsl.TransformationGroup;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class PrjDslScopeProvider extends AbstractDeclarativeScopeProvider {
/*
	@Override
	public IScope getScope(EObject context, EReference reference) {
		System.out.println(
				"Prj: scope_" + reference.getEContainingClass().getName() + "_" + reference.getName()
				+ "(" + context.eClass().getName() + ", ..)"
			);
		return super.getScope(context, reference);
	}
*/
	
//Prj: scope_FileSpec_entity(FileSpec, ..)
	public TransformationGroup getTransformationGroup(EObject current) {
		current = current.eContainer() ;
		if ( current instanceof TransformationGroup )
			return (TransformationGroup)current ;
		else return getTransformationGroup(current) ;
	}

	/*
	public IScope scope_FileSpec_entity(FileSpec context,EReference reference) {
		TransformationGroup tg = getTransformationGroup(context);
		List<UseModel> uses=tg.getUses() ;
		Set<Entity> entities = new HashSet<Entity>();
		for ( UseModel um : uses) {
			entities.add(um.getModel().getEntityFrom());
			entities.add(um.getModel().getEntityTo());
		}
		return createScope(entities);
	}*/

	/**
	 * Utility method to turn a list of attributes into a SimpleScope.
	 */
	private IScope createScope(Set<Entity> entities) {
		List<IEObjectDescription> scopedElements = new ArrayList<IEObjectDescription>();
		for (Entity e : entities) {
			scopedElements.add(EObjectDescription.create(e.getName(), e));
		}
		return new SimpleScope(scopedElements);
	}
	

}
