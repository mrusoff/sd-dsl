/*
* generated by Xtext
*/
grammar InternalCstDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.chaunier.xtext.constraint.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.chaunier.xtext.constraint.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.chaunier.xtext.constraint.services.CstDslGrammarAccess;

}

@parser::members {
 
 	private CstDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CstDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomainModelConstraint
entryRuleDomainModelConstraint 
:
{ before(grammarAccess.getDomainModelConstraintRule()); }
	 ruleDomainModelConstraint
{ after(grammarAccess.getDomainModelConstraintRule()); } 
	 EOF 
;

// Rule DomainModelConstraint
ruleDomainModelConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainModelConstraintAccess().getGroup()); }
(rule__DomainModelConstraint__Group__0)
{ after(grammarAccess.getDomainModelConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleFileSpecification
entryRuleFileSpecification 
:
{ before(grammarAccess.getFileSpecificationRule()); }
	 ruleFileSpecification
{ after(grammarAccess.getFileSpecificationRule()); } 
	 EOF 
;

// Rule FileSpecification
ruleFileSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFileSpecificationAccess().getAlternatives()); }
(rule__FileSpecification__Alternatives)
{ after(grammarAccess.getFileSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFreeSpecification
entryRuleFreeSpecification 
:
{ before(grammarAccess.getFreeSpecificationRule()); }
	 ruleFreeSpecification
{ after(grammarAccess.getFreeSpecificationRule()); } 
	 EOF 
;

// Rule FreeSpecification
ruleFreeSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFreeSpecificationAccess().getGroup()); }
(rule__FreeSpecification__Group__0)
{ after(grammarAccess.getFreeSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractElementConstraint
entryRuleAbstractElementConstraint 
:
{ before(grammarAccess.getAbstractElementConstraintRule()); }
	 ruleAbstractElementConstraint
{ after(grammarAccess.getAbstractElementConstraintRule()); } 
	 EOF 
;

// Rule AbstractElementConstraint
ruleAbstractElementConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractElementConstraintAccess().getAlternatives()); }
(rule__AbstractElementConstraint__Alternatives)
{ after(grammarAccess.getAbstractElementConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard 
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
(rule__QualifiedNameWithWildCard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageConstraint
entryRulePackageConstraint 
:
{ before(grammarAccess.getPackageConstraintRule()); }
	 rulePackageConstraint
{ after(grammarAccess.getPackageConstraintRule()); } 
	 EOF 
;

// Rule PackageConstraint
rulePackageConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageConstraintAccess().getGroup()); }
(rule__PackageConstraint__Group__0)
{ after(grammarAccess.getPackageConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeConstraint
entryRuleTypeConstraint 
:
{ before(grammarAccess.getTypeConstraintRule()); }
	 ruleTypeConstraint
{ after(grammarAccess.getTypeConstraintRule()); } 
	 EOF 
;

// Rule TypeConstraint
ruleTypeConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeConstraintAccess().getAlternatives()); }
(rule__TypeConstraint__Alternatives)
{ after(grammarAccess.getTypeConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataTypeConstraint
entryRuleDataTypeConstraint 
:
{ before(grammarAccess.getDataTypeConstraintRule()); }
	 ruleDataTypeConstraint
{ after(grammarAccess.getDataTypeConstraintRule()); } 
	 EOF 
;

// Rule DataTypeConstraint
ruleDataTypeConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getGroup()); }
(rule__DataTypeConstraint__Group__0)
{ after(grammarAccess.getDataTypeConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntityConstraint
entryRuleEntityConstraint 
:
{ before(grammarAccess.getEntityConstraintRule()); }
	 ruleEntityConstraint
{ after(grammarAccess.getEntityConstraintRule()); } 
	 EOF 
;

// Rule EntityConstraint
ruleEntityConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntityConstraintAccess().getGroup()); }
(rule__EntityConstraint__Group__0)
{ after(grammarAccess.getEntityConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureConstraint
entryRuleFeatureConstraint 
:
{ before(grammarAccess.getFeatureConstraintRule()); }
	 ruleFeatureConstraint
{ after(grammarAccess.getFeatureConstraintRule()); } 
	 EOF 
;

// Rule FeatureConstraint
ruleFeatureConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureConstraintAccess().getGroup()); }
(rule__FeatureConstraint__Group__0)
{ after(grammarAccess.getFeatureConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeConstraint
entryRuleAttributeConstraint 
:
{ before(grammarAccess.getAttributeConstraintRule()); }
	 ruleAttributeConstraint
{ after(grammarAccess.getAttributeConstraintRule()); } 
	 EOF 
;

// Rule AttributeConstraint
ruleAttributeConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeConstraintAccess().getAttributeAssignment()); }
(rule__AttributeConstraint__AttributeAssignment)
{ after(grammarAccess.getAttributeConstraintAccess().getAttributeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getAlternatives()); }
(rule__Constraint__Alternatives)
{ after(grammarAccess.getConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolConstraint
entryRuleBoolConstraint 
:
{ before(grammarAccess.getBoolConstraintRule()); }
	 ruleBoolConstraint
{ after(grammarAccess.getBoolConstraintRule()); } 
	 EOF 
;

// Rule BoolConstraint
ruleBoolConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolConstraintAccess().getConstraintAssignment()); }
(rule__BoolConstraint__ConstraintAssignment)
{ after(grammarAccess.getBoolConstraintAccess().getConstraintAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringConstraint
entryRuleStringConstraint 
:
{ before(grammarAccess.getStringConstraintRule()); }
	 ruleStringConstraint
{ after(grammarAccess.getStringConstraintRule()); } 
	 EOF 
;

// Rule StringConstraint
ruleStringConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup()); }
(rule__StringConstraint__Group__0)
{ after(grammarAccess.getStringConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateTimeConstraint
entryRuleDateTimeConstraint 
:
{ before(grammarAccess.getDateTimeConstraintRule()); }
	 ruleDateTimeConstraint
{ after(grammarAccess.getDateTimeConstraintRule()); } 
	 EOF 
;

// Rule DateTimeConstraint
ruleDateTimeConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getGroup()); }
(rule__DateTimeConstraint__Group__0)
{ after(grammarAccess.getDateTimeConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecimalConstraint
entryRuleDecimalConstraint 
:
{ before(grammarAccess.getDecimalConstraintRule()); }
	 ruleDecimalConstraint
{ after(grammarAccess.getDecimalConstraintRule()); } 
	 EOF 
;

// Rule DecimalConstraint
ruleDecimalConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalConstraintAccess().getGroup()); }
(rule__DecimalConstraint__Group__0)
{ after(grammarAccess.getDecimalConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationConstraint
entryRuleEnumerationConstraint 
:
{ before(grammarAccess.getEnumerationConstraintRule()); }
	 ruleEnumerationConstraint
{ after(grammarAccess.getEnumerationConstraintRule()); } 
	 EOF 
;

// Rule EnumerationConstraint
ruleEnumerationConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getGroup()); }
(rule__EnumerationConstraint__Group__0)
{ after(grammarAccess.getEnumerationConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberConstraint
entryRuleNumberConstraint 
:
{ before(grammarAccess.getNumberConstraintRule()); }
	 ruleNumberConstraint
{ after(grammarAccess.getNumberConstraintRule()); } 
	 EOF 
;

// Rule NumberConstraint
ruleNumberConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup()); }
(rule__NumberConstraint__Group__0)
{ after(grammarAccess.getNumberConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAllConstraint
entryRuleAllConstraint 
:
{ before(grammarAccess.getAllConstraintRule()); }
	 ruleAllConstraint
{ after(grammarAccess.getAllConstraintRule()); } 
	 EOF 
;

// Rule AllConstraint
ruleAllConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup()); }
(rule__AllConstraint__Group__0)
{ after(grammarAccess.getAllConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule EnumUsage
ruleEnumUsage
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumUsageAccess().getAlternatives()); }
(rule__EnumUsage__Alternatives)
{ after(grammarAccess.getEnumUsageAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__FileSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileSpecificationAccess().getFormatAssignment_0()); }
(rule__FileSpecification__FormatAssignment_0)
{ after(grammarAccess.getFileSpecificationAccess().getFormatAssignment_0()); }
)

    |(
{ before(grammarAccess.getFileSpecificationAccess().getDTDKeyword_1()); }

	'DTD' 

{ after(grammarAccess.getFileSpecificationAccess().getDTDKeyword_1()); }
)

    |(
{ before(grammarAccess.getFileSpecificationAccess().getFLATKeyword_2()); }

	'FLAT' 

{ after(grammarAccess.getFileSpecificationAccess().getFLATKeyword_2()); }
)

    |(
{ before(grammarAccess.getFileSpecificationAccess().getGroup_3()); }
(rule__FileSpecification__Group_3__0)
{ after(grammarAccess.getFileSpecificationAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getFileSpecificationAccess().getDBKeyword_4()); }

	'DB' 

{ after(grammarAccess.getFileSpecificationAccess().getDBKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElementConstraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementConstraintAccess().getPackageConstraintParserRuleCall_0()); }
	rulePackageConstraint
{ after(grammarAccess.getAbstractElementConstraintAccess().getPackageConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractElementConstraintAccess().getDataTypeConstraintParserRuleCall_1()); }
	ruleDataTypeConstraint
{ after(grammarAccess.getAbstractElementConstraintAccess().getDataTypeConstraintParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractElementConstraintAccess().getEntityConstraintParserRuleCall_2()); }
	ruleEntityConstraint
{ after(grammarAccess.getAbstractElementConstraintAccess().getEntityConstraintParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeConstraintAccess().getEntityConstraintParserRuleCall_0()); }
	ruleEntityConstraint
{ after(grammarAccess.getTypeConstraintAccess().getEntityConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeConstraintAccess().getDataTypeConstraintParserRuleCall_1()); }
	ruleDataTypeConstraint
{ after(grammarAccess.getTypeConstraintAccess().getDataTypeConstraintParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getBoolConstraintParserRuleCall_0()); }
	ruleBoolConstraint
{ after(grammarAccess.getConstraintAccess().getBoolConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getStringConstraintParserRuleCall_1()); }
	ruleStringConstraint
{ after(grammarAccess.getConstraintAccess().getStringConstraintParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getDateTimeConstraintParserRuleCall_2()); }
	ruleDateTimeConstraint
{ after(grammarAccess.getConstraintAccess().getDateTimeConstraintParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getDecimalConstraintParserRuleCall_3()); }
	ruleDecimalConstraint
{ after(grammarAccess.getConstraintAccess().getDecimalConstraintParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getEnumerationConstraintParserRuleCall_4()); }
	ruleEnumerationConstraint
{ after(grammarAccess.getConstraintAccess().getEnumerationConstraintParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumUsage__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0()); }
(	'as String' 
)
{ after(grammarAccess.getEnumUsageAccess().getAsStringEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_1()); }
(	'as Value' 
)
{ after(grammarAccess.getEnumUsageAccess().getAsValueEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DomainModelConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModelConstraint__Group__0__Impl
	rule__DomainModelConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModelConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelConstraintAccess().getImportsAssignment_0()); }
(rule__DomainModelConstraint__ImportsAssignment_0)*
{ after(grammarAccess.getDomainModelConstraintAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModelConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModelConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModelConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelConstraintAccess().getElementsAssignment_1()); }
(rule__DomainModelConstraint__ElementsAssignment_1)*
{ after(grammarAccess.getDomainModelConstraintAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FileSpecification__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileSpecification__Group_3__0__Impl
	rule__FileSpecification__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileSpecification__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileSpecificationAccess().getCSVKeyword_3_0()); }

	'CSV' 

{ after(grammarAccess.getFileSpecificationAccess().getCSVKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileSpecification__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileSpecification__Group_3__1__Impl
	rule__FileSpecification__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FileSpecification__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileSpecificationAccess().getDelimiterKeyword_3_1()); }

	'delimiter' 

{ after(grammarAccess.getFileSpecificationAccess().getDelimiterKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileSpecification__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileSpecification__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileSpecification__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileSpecificationAccess().getDelimiterAssignment_3_2()); }
(rule__FileSpecification__DelimiterAssignment_3_2)
{ after(grammarAccess.getFileSpecificationAccess().getDelimiterAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FreeSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeSpecification__Group__0__Impl
	rule__FreeSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeSpecificationAccess().getLineKeyword_0()); }

	'line' 

{ after(grammarAccess.getFreeSpecificationAccess().getLineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeSpecificationAccess().getLinesAssignment_1()); }
(rule__FreeSpecification__LinesAssignment_1)*
{ after(grammarAccess.getFreeSpecificationAccess().getLinesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__0__Impl
	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackageConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group__0__Impl
	rule__PackageConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageConstraintAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group__1__Impl
	rule__PackageConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getPackageDeclarationAssignment_1()); }
(rule__PackageConstraint__PackageDeclarationAssignment_1)
{ after(grammarAccess.getPackageConstraintAccess().getPackageDeclarationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group__2__Impl
	rule__PackageConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getGroup_2()); }
(rule__PackageConstraint__Group_2__0)
{ after(grammarAccess.getPackageConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group__3__Impl
	rule__PackageConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getGroup_3()); }
(rule__PackageConstraint__Group_3__0)
{ after(grammarAccess.getPackageConstraintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group__4__Impl
	rule__PackageConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getPackageConstraintAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group__5__Impl
	rule__PackageConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getTypesAssignment_5()); }
(rule__PackageConstraint__TypesAssignment_5)*
{ after(grammarAccess.getPackageConstraintAccess().getTypesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getPackageConstraintAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__PackageConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group_2__0__Impl
	rule__PackageConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getPrefixKeyword_2_0()); }

	'prefix' 

{ after(grammarAccess.getPackageConstraintAccess().getPrefixKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getPrefixAssignment_2_1()); }
(rule__PackageConstraint__PrefixAssignment_2_1)
{ after(grammarAccess.getPackageConstraintAccess().getPrefixAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackageConstraint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group_3__0__Impl
	rule__PackageConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getNamespaceKeyword_3_0()); }

	'namespace' 

{ after(grammarAccess.getPackageConstraintAccess().getNamespaceKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageConstraint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getNamespaceAssignment_3_1()); }
(rule__PackageConstraint__NamespaceAssignment_3_1)
{ after(grammarAccess.getPackageConstraintAccess().getNamespaceAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeConstraint__Group__0__Impl
	rule__DataTypeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getDatatypeKeyword_0()); }

	'datatype' 

{ after(grammarAccess.getDataTypeConstraintAccess().getDatatypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeConstraint__Group__1__Impl
	rule__DataTypeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getDataTypeAssignment_1()); }
(rule__DataTypeConstraint__DataTypeAssignment_1)
{ after(grammarAccess.getDataTypeConstraintAccess().getDataTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeConstraint__Group__2__Impl
	rule__DataTypeConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getConstraintAssignment_2()); }
(rule__DataTypeConstraint__ConstraintAssignment_2)?
{ after(grammarAccess.getDataTypeConstraintAccess().getConstraintAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getDescriptionAssignment_3()); }
(rule__DataTypeConstraint__DescriptionAssignment_3)?
{ after(grammarAccess.getDataTypeConstraintAccess().getDescriptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EntityConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityConstraint__Group__0__Impl
	rule__EntityConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getEntityKeyword_0()); }

	'entity' 

{ after(grammarAccess.getEntityConstraintAccess().getEntityKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityConstraint__Group__1__Impl
	rule__EntityConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getEntityAssignment_1()); }
(rule__EntityConstraint__EntityAssignment_1)
{ after(grammarAccess.getEntityConstraintAccess().getEntityAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityConstraint__Group__2__Impl
	rule__EntityConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getDescriptionAssignment_2()); }
(rule__EntityConstraint__DescriptionAssignment_2)?
{ after(grammarAccess.getEntityConstraintAccess().getDescriptionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityConstraint__Group__3__Impl
	rule__EntityConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getEntityConstraintAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityConstraint__Group__4__Impl
	rule__EntityConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getFeaturesAssignment_4()); }
(rule__EntityConstraint__FeaturesAssignment_4)*
{ after(grammarAccess.getEntityConstraintAccess().getFeaturesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityConstraint__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getEntityConstraintAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FeatureConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureConstraint__Group__0__Impl
	rule__FeatureConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureConstraintAccess().getAttributeConstraintParserRuleCall_0()); }
	ruleAttributeConstraint
{ after(grammarAccess.getFeatureConstraintAccess().getAttributeConstraintParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureConstraint__Group__1__Impl
	rule__FeatureConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureConstraintAccess().getConstraintAssignment_1()); }
(rule__FeatureConstraint__ConstraintAssignment_1)?
{ after(grammarAccess.getFeatureConstraintAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureConstraintAccess().getDescriptionAssignment_2()); }
(rule__FeatureConstraint__DescriptionAssignment_2)?
{ after(grammarAccess.getFeatureConstraintAccess().getDescriptionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__0__Impl
	rule__StringConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintAssignment_0()); }
(rule__StringConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getStringConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__1__Impl
	rule__StringConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintRefAssignment_1()); }
(rule__StringConstraint__ConstraintRefAssignment_1)
{ after(grammarAccess.getStringConstraintAccess().getConstraintRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getGroup_2()); }
(rule__StringConstraint__Group_2__0)?
{ after(grammarAccess.getStringConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_2__0__Impl
	rule__StringConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getRegexpKeyword_2_0()); }

	'regexp' 

{ after(grammarAccess.getStringConstraintAccess().getRegexpKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getRegularExpressionAssignment_2_1()); }
(rule__StringConstraint__RegularExpressionAssignment_2_1)
{ after(grammarAccess.getStringConstraintAccess().getRegularExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateTimeConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group__0__Impl
	rule__DateTimeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getConstraintAssignment_0()); }
(rule__DateTimeConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getDateTimeConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateTimeConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group__1__Impl
	rule__DateTimeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDataTypeAssignment_1()); }
(rule__DateTimeConstraint__DataTypeAssignment_1)
{ after(grammarAccess.getDateTimeConstraintAccess().getDataTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateTimeConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getGroup_2()); }
(rule__DateTimeConstraint__Group_2__0)?
{ after(grammarAccess.getDateTimeConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DateTimeConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group_2__0__Impl
	rule__DateTimeConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getHasDefaultAssignment_2_0()); }
(rule__DateTimeConstraint__HasDefaultAssignment_2_0)
{ after(grammarAccess.getDateTimeConstraintAccess().getHasDefaultAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateTimeConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDefaultValueAssignment_2_1()); }
(rule__DateTimeConstraint__DefaultValueAssignment_2_1)
{ after(grammarAccess.getDateTimeConstraintAccess().getDefaultValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DecimalConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__0__Impl
	rule__DecimalConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintAssignment_0()); }
(rule__DecimalConstraint__ConstraintAssignment_0)
{ after(grammarAccess.getDecimalConstraintAccess().getConstraintAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintRefAssignment_1()); }
(rule__DecimalConstraint__ConstraintRefAssignment_1)
{ after(grammarAccess.getDecimalConstraintAccess().getConstraintRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group__0__Impl
	rule__EnumerationConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumerationConstraintAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group__1__Impl
	rule__EnumerationConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getUsageAssignment_1()); }
(rule__EnumerationConstraint__UsageAssignment_1)
{ after(grammarAccess.getEnumerationConstraintAccess().getUsageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group__2__Impl
	rule__EnumerationConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getGroup_2()); }
(rule__EnumerationConstraint__Group_2__0)?
{ after(grammarAccess.getEnumerationConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getGroup_3()); }
(rule__EnumerationConstraint__Group_3__0)?
{ after(grammarAccess.getEnumerationConstraintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumerationConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group_2__0__Impl
	rule__EnumerationConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getFixeLenKeyword_2_0()); }

	'fixeLen' 

{ after(grammarAccess.getEnumerationConstraintAccess().getFixeLenKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getFixeLenAssignment_2_1()); }
(rule__EnumerationConstraint__FixeLenAssignment_2_1)
{ after(grammarAccess.getEnumerationConstraintAccess().getFixeLenAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationConstraint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group_3__0__Impl
	rule__EnumerationConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getHasDefaultAssignment_3_0()); }
(rule__EnumerationConstraint__HasDefaultAssignment_3_0)
{ after(grammarAccess.getEnumerationConstraintAccess().getHasDefaultAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationConstraint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringAssignment_3_1()); }
(rule__EnumerationConstraint__DefaultValueAsStringAssignment_3_1)
{ after(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__0__Impl
	rule__NumberConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_0()); }
(rule__NumberConstraint__Group_0__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__1__Impl
	rule__NumberConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_1()); }
(rule__NumberConstraint__Group_1__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__2__Impl
	rule__NumberConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_2()); }
(rule__NumberConstraint__Group_2__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__3__Impl
	rule__NumberConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_3()); }
(rule__NumberConstraint__Group_3__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__4__Impl
	rule__NumberConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_4()); }
(rule__NumberConstraint__Group_4__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__5__Impl
	rule__NumberConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_5()); }
(rule__NumberConstraint__Group_5__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__6__Impl
	rule__NumberConstraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_6()); }
(rule__NumberConstraint__Group_6__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__7__Impl
	rule__NumberConstraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_7()); }
(rule__NumberConstraint__Group_7__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__8__Impl
	rule__NumberConstraint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getIsIdAssignment_8()); }
(rule__NumberConstraint__IsIdAssignment_8)?
{ after(grammarAccess.getNumberConstraintAccess().getIsIdAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__9__Impl
	rule__NumberConstraint__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getNullableAssignment_9()); }
(rule__NumberConstraint__NullableAssignment_9)?
{ after(grammarAccess.getNumberConstraintAccess().getNullableAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__10__Impl
	rule__NumberConstraint__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getGroup_10()); }
(rule__NumberConstraint__Group_10__0)?
{ after(grammarAccess.getNumberConstraintAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getIsXSDAttAssignment_11()); }
(rule__NumberConstraint__IsXSDAttAssignment_11)?
{ after(grammarAccess.getNumberConstraintAccess().getIsXSDAttAssignment_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__NumberConstraint__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_0__0__Impl
	rule__NumberConstraint__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getHasDefaultAssignment_0_0()); }
(rule__NumberConstraint__HasDefaultAssignment_0_0)
{ after(grammarAccess.getNumberConstraintAccess().getHasDefaultAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getDefaultValueAssignment_0_1()); }
(rule__NumberConstraint__DefaultValueAssignment_0_1)
{ after(grammarAccess.getNumberConstraintAccess().getDefaultValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_1__0__Impl
	rule__NumberConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getIsFixedAssignment_1_0()); }
(rule__NumberConstraint__IsFixedAssignment_1_0)
{ after(grammarAccess.getNumberConstraintAccess().getIsFixedAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getFixedValueAssignment_1_1()); }
(rule__NumberConstraint__FixedValueAssignment_1_1)
{ after(grammarAccess.getNumberConstraintAccess().getFixedValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_2__0__Impl
	rule__NumberConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMinValKeyword_2_0()); }

	'minVal' 

{ after(grammarAccess.getNumberConstraintAccess().getMinValKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMinValueAssignment_2_1()); }
(rule__NumberConstraint__MinValueAssignment_2_1)
{ after(grammarAccess.getNumberConstraintAccess().getMinValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_3__0__Impl
	rule__NumberConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMaxValKeyword_3_0()); }

	'maxVal' 

{ after(grammarAccess.getNumberConstraintAccess().getMaxValKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMaxValueAssignment_3_1()); }
(rule__NumberConstraint__MaxValueAssignment_3_1)
{ after(grammarAccess.getNumberConstraintAccess().getMaxValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_4__0__Impl
	rule__NumberConstraint__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMinLenKeyword_4_0()); }

	'minLen' 

{ after(grammarAccess.getNumberConstraintAccess().getMinLenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMinLenAssignment_4_1()); }
(rule__NumberConstraint__MinLenAssignment_4_1)
{ after(grammarAccess.getNumberConstraintAccess().getMinLenAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_5__0__Impl
	rule__NumberConstraint__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMaxLenKeyword_5_0()); }

	'maxLen' 

{ after(grammarAccess.getNumberConstraintAccess().getMaxLenKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMaxLenAssignment_5_1()); }
(rule__NumberConstraint__MaxLenAssignment_5_1)
{ after(grammarAccess.getNumberConstraintAccess().getMaxLenAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_6__0__Impl
	rule__NumberConstraint__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getFixeLenKeyword_6_0()); }

	'fixeLen' 

{ after(grammarAccess.getNumberConstraintAccess().getFixeLenKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getFixeLenAssignment_6_1()); }
(rule__NumberConstraint__FixeLenAssignment_6_1)
{ after(grammarAccess.getNumberConstraintAccess().getFixeLenAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_7__0__Impl
	rule__NumberConstraint__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getPaddleKeyword_7_0()); }

	'paddle' 

{ after(grammarAccess.getNumberConstraintAccess().getPaddleKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getPaddleAssignment_7_1()); }
(rule__NumberConstraint__PaddleAssignment_7_1)
{ after(grammarAccess.getNumberConstraintAccess().getPaddleAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberConstraint__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_10__0__Impl
	rule__NumberConstraint__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getDerivedAssignment_10_0()); }
(rule__NumberConstraint__DerivedAssignment_10_0)
{ after(grammarAccess.getNumberConstraintAccess().getDerivedAssignment_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConstraint__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberConstraint__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getWritableAssignment_10_1()); }
(rule__NumberConstraint__WritableAssignment_10_1)?
{ after(grammarAccess.getNumberConstraintAccess().getWritableAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__0__Impl
	rule__AllConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup_0()); }
(rule__AllConstraint__Group_0__0)?
{ after(grammarAccess.getAllConstraintAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__1__Impl
	rule__AllConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup_1()); }
(rule__AllConstraint__Group_1__0)?
{ after(grammarAccess.getAllConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__2__Impl
	rule__AllConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup_2()); }
(rule__AllConstraint__Group_2__0)?
{ after(grammarAccess.getAllConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__3__Impl
	rule__AllConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup_3()); }
(rule__AllConstraint__Group_3__0)?
{ after(grammarAccess.getAllConstraintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__4__Impl
	rule__AllConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup_4()); }
(rule__AllConstraint__Group_4__0)?
{ after(grammarAccess.getAllConstraintAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__5__Impl
	rule__AllConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup_5()); }
(rule__AllConstraint__Group_5__0)?
{ after(grammarAccess.getAllConstraintAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__6__Impl
	rule__AllConstraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getIsIdAssignment_6()); }
(rule__AllConstraint__IsIdAssignment_6)?
{ after(grammarAccess.getAllConstraintAccess().getIsIdAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__7__Impl
	rule__AllConstraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getNullableAssignment_7()); }
(rule__AllConstraint__NullableAssignment_7)?
{ after(grammarAccess.getAllConstraintAccess().getNullableAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__8__Impl
	rule__AllConstraint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getGroup_8()); }
(rule__AllConstraint__Group_8__0)?
{ after(grammarAccess.getAllConstraintAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getIsXSDAttAssignment_9()); }
(rule__AllConstraint__IsXSDAttAssignment_9)?
{ after(grammarAccess.getAllConstraintAccess().getIsXSDAttAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__AllConstraint__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_0__0__Impl
	rule__AllConstraint__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getHasDefaultAssignment_0_0()); }
(rule__AllConstraint__HasDefaultAssignment_0_0)
{ after(grammarAccess.getAllConstraintAccess().getHasDefaultAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getDefaultValueAssignment_0_1()); }
(rule__AllConstraint__DefaultValueAssignment_0_1)
{ after(grammarAccess.getAllConstraintAccess().getDefaultValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_1__0__Impl
	rule__AllConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getIsFixedAssignment_1_0()); }
(rule__AllConstraint__IsFixedAssignment_1_0)
{ after(grammarAccess.getAllConstraintAccess().getIsFixedAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getFixedValueAssignment_1_1()); }
(rule__AllConstraint__FixedValueAssignment_1_1)
{ after(grammarAccess.getAllConstraintAccess().getFixedValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_2__0__Impl
	rule__AllConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getMinLenKeyword_2_0()); }

	'minLen' 

{ after(grammarAccess.getAllConstraintAccess().getMinLenKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getMinLenAssignment_2_1()); }
(rule__AllConstraint__MinLenAssignment_2_1)
{ after(grammarAccess.getAllConstraintAccess().getMinLenAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllConstraint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_3__0__Impl
	rule__AllConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getMaxLenKeyword_3_0()); }

	'maxLen' 

{ after(grammarAccess.getAllConstraintAccess().getMaxLenKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getMaxLenAssignment_3_1()); }
(rule__AllConstraint__MaxLenAssignment_3_1)
{ after(grammarAccess.getAllConstraintAccess().getMaxLenAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllConstraint__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_4__0__Impl
	rule__AllConstraint__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getFixeLenKeyword_4_0()); }

	'fixeLen' 

{ after(grammarAccess.getAllConstraintAccess().getFixeLenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getFixeLenAssignment_4_1()); }
(rule__AllConstraint__FixeLenAssignment_4_1)
{ after(grammarAccess.getAllConstraintAccess().getFixeLenAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllConstraint__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_5__0__Impl
	rule__AllConstraint__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getPaddleKeyword_5_0()); }

	'paddle' 

{ after(grammarAccess.getAllConstraintAccess().getPaddleKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getPaddleAssignment_5_1()); }
(rule__AllConstraint__PaddleAssignment_5_1)
{ after(grammarAccess.getAllConstraintAccess().getPaddleAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AllConstraint__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_8__0__Impl
	rule__AllConstraint__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getDerivedAssignment_8_0()); }
(rule__AllConstraint__DerivedAssignment_8_0)
{ after(grammarAccess.getAllConstraintAccess().getDerivedAssignment_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllConstraint__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllConstraint__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getWritableAssignment_8_1()); }
(rule__AllConstraint__WritableAssignment_8_1)?
{ after(grammarAccess.getAllConstraintAccess().getWritableAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DomainModelConstraint__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelConstraintAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getDomainModelConstraintAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModelConstraint__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelConstraintAccess().getElementsAbstractElementConstraintParserRuleCall_1_0()); }
	ruleAbstractElementConstraint{ after(grammarAccess.getDomainModelConstraintAccess().getElementsAbstractElementConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FileSpecification__FormatAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileSpecificationAccess().getFormatXSDKeyword_0_0()); }
(
{ before(grammarAccess.getFileSpecificationAccess().getFormatXSDKeyword_0_0()); }

	'XSD' 

{ after(grammarAccess.getFileSpecificationAccess().getFormatXSDKeyword_0_0()); }
)

{ after(grammarAccess.getFileSpecificationAccess().getFormatXSDKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FileSpecification__DelimiterAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileSpecificationAccess().getDelimiterSTRINGTerminalRuleCall_3_2_0()); }
	RULE_STRING{ after(grammarAccess.getFileSpecificationAccess().getDelimiterSTRINGTerminalRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FreeSpecification__LinesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeSpecificationAccess().getLinesSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getFreeSpecificationAccess().getLinesSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildCard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__PackageDeclarationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getPackageDeclarationPackageDeclarationCrossReference_1_0()); }
(
{ before(grammarAccess.getPackageConstraintAccess().getPackageDeclarationPackageDeclarationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPackageConstraintAccess().getPackageDeclarationPackageDeclarationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getPackageConstraintAccess().getPackageDeclarationPackageDeclarationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__PrefixAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getPrefixQualifiedNameParserRuleCall_2_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageConstraintAccess().getPrefixQualifiedNameParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__NamespaceAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getNamespaceSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getPackageConstraintAccess().getNamespaceSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageConstraint__TypesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageConstraintAccess().getTypesTypeConstraintParserRuleCall_5_0()); }
	ruleTypeConstraint{ after(grammarAccess.getPackageConstraintAccess().getTypesTypeConstraintParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstraint__DataTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getDataTypeConstraintAccess().getDataTypeDataTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDataTypeConstraintAccess().getDataTypeDataTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDataTypeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstraint__ConstraintAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getConstraintConstraintParserRuleCall_2_0()); }
	ruleConstraint{ after(grammarAccess.getDataTypeConstraintAccess().getConstraintConstraintParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstraint__DescriptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeConstraintAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getDataTypeConstraintAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__EntityAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getEntityEntityCrossReference_1_0()); }
(
{ before(grammarAccess.getEntityConstraintAccess().getEntityEntityIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEntityConstraintAccess().getEntityEntityIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getEntityConstraintAccess().getEntityEntityCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__DescriptionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getEntityConstraintAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityConstraint__FeaturesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityConstraintAccess().getFeaturesFeatureConstraintParserRuleCall_4_0()); }
	ruleFeatureConstraint{ after(grammarAccess.getEntityConstraintAccess().getFeaturesFeatureConstraintParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureConstraint__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureConstraintAccess().getConstraintConstraintParserRuleCall_1_0()); }
	ruleConstraint{ after(grammarAccess.getFeatureConstraintAccess().getConstraintConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureConstraint__DescriptionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureConstraintAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getFeatureConstraintAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeConstraint__AttributeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeConstraintAccess().getAttributeAttributeCrossReference_0()); }
(
{ before(grammarAccess.getAttributeConstraintAccess().getAttributeAttributeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getAttributeConstraintAccess().getAttributeAttributeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getAttributeConstraintAccess().getAttributeAttributeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstraint__ConstraintAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0()); }
(
{ before(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0()); }

	'boolean' 

{ after(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0()); }
)

{ after(grammarAccess.getBoolConstraintAccess().getConstraintBooleanKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }

	'string' 

{ after(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }
)

{ after(grammarAccess.getStringConstraintAccess().getConstraintStringKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__ConstraintRefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getConstraintRefAllConstraintParserRuleCall_1_0()); }
	ruleAllConstraint{ after(grammarAccess.getStringConstraintAccess().getConstraintRefAllConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstraint__RegularExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstraintAccess().getRegularExpressionSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringConstraintAccess().getRegularExpressionSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }
(
{ before(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }

	'datetime' 

{ after(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }
)

{ after(grammarAccess.getDateTimeConstraintAccess().getConstraintDatetimeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__DataTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDateTimeConstraintAccess().getDataTypeDataTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__HasDefaultAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
(
{ before(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }

	'default' 

{ after(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
)

{ after(grammarAccess.getDateTimeConstraintAccess().getHasDefaultDefaultKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeConstraint__DefaultValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getDateTimeConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__ConstraintAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }

	'decimal' 

{ after(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }
)

{ after(grammarAccess.getDecimalConstraintAccess().getConstraintDecimalKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalConstraint__ConstraintRefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalConstraintAccess().getConstraintRefNumberConstraintParserRuleCall_1_0()); }
	ruleNumberConstraint{ after(grammarAccess.getDecimalConstraintAccess().getConstraintRefNumberConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__UsageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getUsageEnumUsageEnumRuleCall_1_0()); }
	ruleEnumUsage{ after(grammarAccess.getEnumerationConstraintAccess().getUsageEnumUsageEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__FixeLenAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getFixeLenINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getEnumerationConstraintAccess().getFixeLenINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__HasDefaultAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_3_0_0()); }
(
{ before(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_3_0_0()); }

	'default' 

{ after(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_3_0_0()); }
)

{ after(grammarAccess.getEnumerationConstraintAccess().getHasDefaultDefaultKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationConstraint__DefaultValueAsStringAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumerationConstraintAccess().getDefaultValueAsStringIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__HasDefaultAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }
(
{ before(grammarAccess.getNumberConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }

	'default' 

{ after(grammarAccess.getNumberConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }
)

{ after(grammarAccess.getNumberConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__DefaultValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_0_1_0()); }
	RULE_STRING{ after(grammarAccess.getNumberConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__IsFixedAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }
(
{ before(grammarAccess.getNumberConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }

	'fixed' 

{ after(grammarAccess.getNumberConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }
)

{ after(grammarAccess.getNumberConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__FixedValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getFixedValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getNumberConstraintAccess().getFixedValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__MinValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMinValueINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getNumberConstraintAccess().getMinValueINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__MaxValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMaxValueINTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getNumberConstraintAccess().getMaxValueINTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__MinLenAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMinLenINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getNumberConstraintAccess().getMinLenINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__MaxLenAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getMaxLenINTTerminalRuleCall_5_1_0()); }
	RULE_INT{ after(grammarAccess.getNumberConstraintAccess().getMaxLenINTTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__FixeLenAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getFixeLenINTTerminalRuleCall_6_1_0()); }
	RULE_INT{ after(grammarAccess.getNumberConstraintAccess().getFixeLenINTTerminalRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__PaddleAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getPaddleSTRINGTerminalRuleCall_7_1_0()); }
	RULE_STRING{ after(grammarAccess.getNumberConstraintAccess().getPaddleSTRINGTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__IsIdAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getIsIdIdKeyword_8_0()); }
(
{ before(grammarAccess.getNumberConstraintAccess().getIsIdIdKeyword_8_0()); }

	'id' 

{ after(grammarAccess.getNumberConstraintAccess().getIsIdIdKeyword_8_0()); }
)

{ after(grammarAccess.getNumberConstraintAccess().getIsIdIdKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__NullableAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getNullableNullableKeyword_9_0()); }
(
{ before(grammarAccess.getNumberConstraintAccess().getNullableNullableKeyword_9_0()); }

	'nullable' 

{ after(grammarAccess.getNumberConstraintAccess().getNullableNullableKeyword_9_0()); }
)

{ after(grammarAccess.getNumberConstraintAccess().getNullableNullableKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__DerivedAssignment_10_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getDerivedDerivedKeyword_10_0_0()); }
(
{ before(grammarAccess.getNumberConstraintAccess().getDerivedDerivedKeyword_10_0_0()); }

	'derived' 

{ after(grammarAccess.getNumberConstraintAccess().getDerivedDerivedKeyword_10_0_0()); }
)

{ after(grammarAccess.getNumberConstraintAccess().getDerivedDerivedKeyword_10_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__WritableAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getWritableWritableKeyword_10_1_0()); }
(
{ before(grammarAccess.getNumberConstraintAccess().getWritableWritableKeyword_10_1_0()); }

	'writable' 

{ after(grammarAccess.getNumberConstraintAccess().getWritableWritableKeyword_10_1_0()); }
)

{ after(grammarAccess.getNumberConstraintAccess().getWritableWritableKeyword_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConstraint__IsXSDAttAssignment_11
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberConstraintAccess().getIsXSDAttXsdAKeyword_11_0()); }
(
{ before(grammarAccess.getNumberConstraintAccess().getIsXSDAttXsdAKeyword_11_0()); }

	'xsdA.' 

{ after(grammarAccess.getNumberConstraintAccess().getIsXSDAttXsdAKeyword_11_0()); }
)

{ after(grammarAccess.getNumberConstraintAccess().getIsXSDAttXsdAKeyword_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__HasDefaultAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }
(
{ before(grammarAccess.getAllConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }

	'default' 

{ after(grammarAccess.getAllConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }
)

{ after(grammarAccess.getAllConstraintAccess().getHasDefaultDefaultKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__DefaultValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_0_1_0()); }
	RULE_STRING{ after(grammarAccess.getAllConstraintAccess().getDefaultValueSTRINGTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__IsFixedAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }
(
{ before(grammarAccess.getAllConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }

	'fixed' 

{ after(grammarAccess.getAllConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }
)

{ after(grammarAccess.getAllConstraintAccess().getIsFixedFixedKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__FixedValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getFixedValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getAllConstraintAccess().getFixedValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__MinLenAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getMinLenINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getAllConstraintAccess().getMinLenINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__MaxLenAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getMaxLenINTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getAllConstraintAccess().getMaxLenINTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__FixeLenAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getFixeLenINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getAllConstraintAccess().getFixeLenINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__PaddleAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getPaddleSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getAllConstraintAccess().getPaddleSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__IsIdAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getIsIdIdKeyword_6_0()); }
(
{ before(grammarAccess.getAllConstraintAccess().getIsIdIdKeyword_6_0()); }

	'id' 

{ after(grammarAccess.getAllConstraintAccess().getIsIdIdKeyword_6_0()); }
)

{ after(grammarAccess.getAllConstraintAccess().getIsIdIdKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__NullableAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getNullableNullableKeyword_7_0()); }
(
{ before(grammarAccess.getAllConstraintAccess().getNullableNullableKeyword_7_0()); }

	'nullable' 

{ after(grammarAccess.getAllConstraintAccess().getNullableNullableKeyword_7_0()); }
)

{ after(grammarAccess.getAllConstraintAccess().getNullableNullableKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__DerivedAssignment_8_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getDerivedDerivedKeyword_8_0_0()); }
(
{ before(grammarAccess.getAllConstraintAccess().getDerivedDerivedKeyword_8_0_0()); }

	'derived' 

{ after(grammarAccess.getAllConstraintAccess().getDerivedDerivedKeyword_8_0_0()); }
)

{ after(grammarAccess.getAllConstraintAccess().getDerivedDerivedKeyword_8_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__WritableAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getWritableWritableKeyword_8_1_0()); }
(
{ before(grammarAccess.getAllConstraintAccess().getWritableWritableKeyword_8_1_0()); }

	'writable' 

{ after(grammarAccess.getAllConstraintAccess().getWritableWritableKeyword_8_1_0()); }
)

{ after(grammarAccess.getAllConstraintAccess().getWritableWritableKeyword_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllConstraint__IsXSDAttAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllConstraintAccess().getIsXSDAttXsdAKeyword_9_0()); }
(
{ before(grammarAccess.getAllConstraintAccess().getIsXSDAttXsdAKeyword_9_0()); }

	'xsdA.' 

{ after(grammarAccess.getAllConstraintAccess().getIsXSDAttXsdAKeyword_9_0()); }
)

{ after(grammarAccess.getAllConstraintAccess().getIsXSDAttXsdAKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


