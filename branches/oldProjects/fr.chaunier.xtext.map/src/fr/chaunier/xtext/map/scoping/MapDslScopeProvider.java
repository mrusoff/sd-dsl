/*
 * generated by Xtext
 */
package fr.chaunier.xtext.map.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import fr.chaunier.xtext.map.mapDsl.FuctionIn;
import fr.chaunier.xtext.map.mapDsl.FuctionOut;
import fr.chaunier.xtext.map.mapDsl.MappingModule;
import fr.chaunier.xtext.map.mapDsl.NestedTransformationParameter;
import fr.chaunier.xtext.omcst.om.omcstDsl.Attribute;
import fr.chaunier.xtext.omcst.om.omcstDsl.Entity;
import fr.chaunier.xtext.omcst.om.omcstDsl.Feature;
import fr.chaunier.xtext.omcst.om.omcstDsl.StructuralFeature;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class MapDslScopeProvider extends AbstractDeclarativeScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		System.out.println(
				"Map: scope_" + reference.getEContainingClass().getName() + "_" + reference.getName()
				+ "(" + context.eClass().getName() + ", ..)"
			);
		return super.getScope(context, reference);
	}

	/**
	 * Returns all attributes for an entity including the attributes of all
	 * super classes.
	 * 
	 * @param entity
	 * @return
	 */
	private List<Attribute> getAttributesForEntity(Entity entity) {
		List<Attribute> result = new ArrayList<Attribute>();
		if (entity.getSuperType() != null) {
			result.addAll(getAttributesForEntity(entity.getSuperType()));
		}
		for (Feature feature : entity.getFeatures()) {
			if ( feature instanceof Attribute )
				result.add((Attribute)feature);
		}
//		result.addAll(entity.getAttributeContainer().getAttributes());
		return result;
	}

	/**
	 * Utility method to turn a list of attributes into a SimpleScope.
	 */
	private IScope createScope(List<Attribute> attributes) {
		List<IEObjectDescription> scopedElements = new ArrayList<IEObjectDescription>();
		for (Attribute attr : attributes) {
			scopedElements.add(EObjectDescription.create(attr.getName(), attr));
		}
		return new SimpleScope(scopedElements);
	}
	

	/**
	 * Filter a scope to only contain attributes of the provided Entity type
	 * 
	 * @param attributes
	 * @param filter
	 * @return
	 */
	private IScope createFilteredScope(List<Attribute> attributes, Entity filter) {
		List<IEObjectDescription> scopedElements = new ArrayList<IEObjectDescription>();
		for (Attribute attr : attributes) {
			if (attr.getType().getReferenced() instanceof Entity) {
				/*
				 * Only add attributes of which the entity type matches the
				 * filter
				 */
				if (((Entity) attr.getType().getReferenced()).equals(filter)) {
					scopedElements.add(EObjectDescription.create(attr.getName(), attr));
				}
			}
		}
		return new SimpleScope(scopedElements);
	}

	
	public IScope scope_FeatureMap_attributeSource(MappingModule context, EReference reference) {
//		System.out.println("scope_FeatureMap_attributeTarget");	
		return createScope(getAttributesForEntity(context.getEntitySource()));
	}
	
	public IScope scope_FeatureMap_attributeSources(MappingModule context, EReference reference) {
		return createScope(getAttributesForEntity(context.getEntitySource()));
	}
	
	public IScope scope_FeatureMap_attributeTarget(MappingModule context, EReference reference) {
//		System.out.println("scope_FeatureMap_attributeTarget");	
		return createScope(getAttributesForEntity(context.getEntityTarget()));
	}

//scope_FeatureMap_attributeSources(FeatureMap, ..)	
	/**
	 * Returns a list of attributes for the 'attribute' of a
	 * NestedFunctionParamater based on it parent FunctionParameter.
	 */
	

	public IScope scope_NestedTransformationParameter_refAttribute(
			NestedTransformationParameter context, EReference reference) {

//		System.out.println("scope_NestedTransformationParameter_refAttribute");	
	
		Attribute attr = null;
		// Determine if the Target is a NestedFunctionParamter of a regular one 
		if (context.getTarget() instanceof NestedTransformationParameter) {
			StructuralFeature st = ((NestedTransformationParameter)context.getTarget()).getRefAttribute() ;
			if ( st instanceof Attribute )
				attr = (Attribute)st;
		} else {
			attr = context.getTarget().getAttributeTarget();
		}
		
		if ( attr == null )  
			return IScope.NULLSCOPE;
		
//		System.out.println("attr " + attr.getClass() + " " + attr.getType().getReferenced().getClass());	

		if ( attr.getType().getReferenced() instanceof Entity ) {
			Entity entity = (Entity)attr.getType().getReferenced() ;
			return createScope(getAttributesForEntity(entity));
		} else return IScope.NULLSCOPE;
			
	}
	
	
	public IScope scope_FuctionIn_inAttribute(FuctionIn context, EReference reference) {
		return createScope(getAttributesForEntity(context.getInEntity()));
	}

	public IScope scope_FuctionOut_outAttribute(FuctionOut context, EReference reference) {
		return createScope(getAttributesForEntity(context.getOutEntity()));
	}
}
