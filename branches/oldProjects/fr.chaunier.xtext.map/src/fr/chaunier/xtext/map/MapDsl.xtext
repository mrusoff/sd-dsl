grammar fr.chaunier.xtext.map.MapDsl with org.eclipse.xtext.common.Terminals

generate mapDsl "http://www.chaunier.fr/xtext/map/MapDsl"

import  "platform:/resource/fr.chaunier.xtext.omcst.om/src-gen/fr/chaunier/xtext/omcst/om/OmcstDsl.ecore" as mm 

Model:

	'model' name=ID (documentation=STRING)?
	imports+=Import*
	rules+=Rule*
	fuctions+=Fuction*
	mappingModules+=MappingModule*
	roots = RootModule
;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;


RootModule: 
	'root' rootRef=[MappingModule] (documentation=STRING)?
;

Rule:
	'define rule' name=ID ('op' operation=STRING)? ( 'args' args+=STRING*)? 
	//(documentation=STRING)?
;

Fuction: 
	'define fonction' name=ID 
		in+=FuctionIn* 
		out+=FuctionOut*
		(documentation=STRING)?
;

FuctionIn: 
	'in' inEntity=[mm::Entity|QualifiedName]'['  
	(inAttribute=[mm::Attribute] ({NestedInTransformationParameter.target=current} '.' inRefAttribute=[mm::Attribute])*)?
	']'  
;

FuctionOut: 
	'out' outEntity=[mm::Entity|QualifiedName]'['  
	(outAttribute=[mm::Attribute] ({NestedOutTransformationParameter.target=current} '.' outRefAttribute=[mm::Attribute])*)? 
	']'  
;

MappingModule: 
	'module' name=ID 
	'source' entitySource=[mm::Entity|QualifiedName] 
	'target' entityTarget=[mm::Entity|QualifiedName] 
	(documentation=STRING)?
	'{'
		(mappedFeatures += FeatureMap ';'?)*
	'}';

FeatureMap :

//	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*
//	( 'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
//			(( 'whith' withModule=[MappingModule]) | ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*) ('default' default=STRING)?		
//	( 'map' attributeSource=[mm::Attribute] '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute]  )*		

//	|  'map' attributeSources+=[mm::Attribute] (','attributeSources+=[mm::Attribute])* '->' attributeTarget=[mm::Attribute] 
//		({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*  ('whith' withModule=[MappingModule])? 

	( 
	   'fuction' fuctionMap=[Fuction] 
	|  'map atribute' attributeSource=[mm::Attribute]  '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*  
	|  'map module' withModule=[MappingModule] attributeSources+=[mm::Attribute]  '->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*  
	| 'set <-' attributeSource=[mm::Attribute] '=' expr=Expression
	| 'set ->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])* '=' expr=Expression
	| 'ignore <-' attributeSource=[mm::Attribute]   
	| 'ignore ->' attributeTarget=[mm::Attribute] ({NestedTransformationParameter.target=current} '.' refAttribute=[mm::Attribute])*
//	| 'call module' module=[MappingModule] 
	) 
	('rule' rule=[Rule])? (documentation=STRING)?
	;

Expression:
	 value=STRING | intValue=INT;

