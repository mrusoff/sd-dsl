/*
 * generated by Xtext
 */
package fr.chaunier.xtext.constraint.generator


import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import fr.chaunier.xtext.om.omDsl.*
import fr.chaunier.xtext.constraint.cstDsl.*
import com.google.inject.Inject
import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*


class CstDslGenerator implements IGenerator {
	
  def fileName(PackageDeclaration p) {
  	p.name + '.omcst'
  }

  override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    val Iterable<PackageConstraint> packageCtsS = resource.allContentsIterable.filter(typeof(PackageConstraint));
    for(packageCts: packageCtsS ) {
        fsa.generateFile(packageCts.packageDeclaration.fileName, packageCts.compile)
    }
  }

  def compile(PackageConstraint e) '''
  	«val constraintManager = new ConstraintManager()»
  	«appendLink(constraintManager,e)»
  	package «e.packageDeclaration.name» prefix «e.prefix» namespace "«e.namespace»" {
  		 
    «val body = body(constraintManager,e.packageDeclaration)»
    «body»
    }
  '''

  def appendLink(ConstraintManager constraintManager,PackageConstraint p) {
  	  if ( p != null && p.types != null ) {
	      for ( pc : p.types.filter(typeof(DataTypeConstraint))) {
	      	 constraintManager.append(pc)
	      }
	      for ( ec : p.types.filter(typeof(EntityConstraint))) {
	      	 constraintManager.append(ec)
	      }
	      for ( ec : p.types.filter(typeof(EnumerationConstraint))) {
	      	 constraintManager.append(ec)
	      }
	 }
  }

  def appendLink(EntityManager entityManager,EntityConstraint e) {
  	  if ( e != null && e.features != null ) {
      for ( pc : e.features.filter(typeof(AttributeConstraint))) {
      	 entityManager.append(pc)
      }
  	  }	
  }
	
  def body(ConstraintManager constraintManager,PackageDeclaration p) '''
      «FOR t:p.elements.filter(typeof(DataType))»
        «type(constraintManager,t)»
      «ENDFOR»

      «FOR t:p.elements.filter(typeof(Enumeration))»
        «type(constraintManager,t)»
      «ENDFOR»

      «FOR t:p.elements.filter(typeof(Entity))»	
        «type(constraintManager,t)»
      «ENDFOR»
  '''

  def dispatch type(ConstraintManager constraintManager,Entity e) '''
    «val EntityConstraint ec = constraintManager.getEntityConstraint(e)»
  	«val entityManager = new EntityManager()»
  	«appendLink(entityManager,ec)»
  entity «e.name» 	
	«IF e.superType != null»extends «e.superType.name» «e.description»«ENDIF»{
    «FOR f:e.features.filter(typeof(Attribute))»
       «feature(entityManager,e,f)»
    «ENDFOR»
  }
  '''

  def dispatch type(ConstraintManager constraintManager,DataType d) '''
    «val DataTypeConstraint dtc = constraintManager.getDataTypeConstraint(d)»
    datatype «d.name» «setConstraint(dtc)»
  '''
//    datatype «d.name» «setConstraint(dtc)»

	def setConstraint(DataTypeConstraint dtc) {
		if ( dtc != null && dtc.constraint != null )
			writeConstraint(dtc.constraint)
	}	
	
// 	enumeration O_N [ N = 0 ; O = 1 ; ]									// enumération de type key,value

  def dispatch type(ConstraintManager constraintManager,Enumeration en) '''
    «val EnumerationConstraint dtc = constraintManager.getEnumerationConstraint(en)»
    enumeration «en.name» [
    «FOR l:en.enumerationLiterals»
       «l.name» = «l.persistedValue» ; 
    «ENDFOR»
    ] 
  '''

  def dispatch feature(EntityManager entityManager,Entity e,Attribute a) '''
    «val AttributeConstraint ac = entityManager.getAtrtibuteConstraint(a)»
    «a.name» : «a.type.referenced.name»  «setConstraint(ac)»
  '''

	def setConstraint(AttributeConstraint dtc) {
		if ( dtc != null && dtc.constraint != null )
			writeConstraint(dtc.constraint)
	}	

  def dispatch feature(ConstraintManager constraintManager,Entity e,Reference ref) '''
  '''

  def writeConstraint(Constraint constraint) {
	if (constraint != null) {
	  	switch constraint {
	  		StringConstraint : writeConstraint(constraint.constraintRef) 
	  		DecimalConstraint : writeConstraint(constraint.constraintRef)
	  		EnumConstraint : writeConstraint(constraint) 
	  	}
	}
  }

//  def writeConstraint(AttributeConstraint constraint) 

	
  def writeConstraint(AllConstraint constraint) '''
    «IF constraint != null»«IF constraint.fixeLen != 0» fixeLen «constraint.fixeLen»«ENDIF»«IF constraint.maxLen != 0» maxLen «constraint.maxLen»«ENDIF»«IF constraint.minLen != 0» minLen «constraint.minLen»«ENDIF»
	«ENDIF»  	  	
  ''' 
  		
  def writeConstraint(NumberConstraint constraint) '''
    decimal «IF constraint != null»«IF constraint.fixeLen != 0» fixeLen «constraint.fixeLen»«ENDIF»«IF constraint.maxLen != 0» maxLen «constraint.maxLen»«ENDIF»«IF constraint.minValue != 0» minVal «constraint.minValue»«ENDIF»«IF constraint.maxValue != 0» maxVal «constraint.maxValue»«ENDIF»«IF constraint.minLen != 0» minLen «constraint.minLen»«ENDIF»
	«ENDIF»  	  	
  ''' 

  def writeConstraint(EnumConstraint constraint) '''
    string «IF constraint != null»«IF constraint.fixeLen != 0» fixeLen «constraint.fixeLen»«ENDIF»«IF constraint.usage != null» usage «constraint.usage»«ENDIF»
	«ENDIF»  	  	
  ''' 
}
