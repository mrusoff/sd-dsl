/*
* generated by Xtext
*/

package fr.chaunier.xtext.instance.om.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class InstanceDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FactoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootNewObjectParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		
		//Factory:
		//	imports+=Import* //	(annotations+=Annotation)*
		//	root=NewObject;
		public ParserRule getRule() { return rule; }

		//imports+=Import* //	(annotations+=Annotation)*
		//root=NewObject
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		////	(annotations+=Annotation)*
		//root=NewObject
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }

		//NewObject
		public RuleCall getRootNewObjectParserRuleCall_1_0() { return cRootNewObjectParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEFeatureStructuralFeatureCrossReference_0_0 = (CrossReference)cEFeatureAssignment_0.eContents().get(0);
		private final RuleCall cEFeatureStructuralFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cEFeatureStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsManyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsManyPlusSignEqualsSignKeyword_1_0_0 = (Keyword)cIsManyAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		/// *
		//Annotation:
		//	NameMapping
		//;
		//
		//NameMapping:
		//	GlobalNameMapping | CustomNameMapping
		//;
		//
		//GlobalNameMapping:
		//	"@Name" "{" nameFeature=ID "}"
		//;
		//
		//CustomNameMapping:
		//	"@Name" "{" eClass=[mm::Entity] "=" nameFeature=[mm::Attribute] "}"
		//;
		// * / Feature:
		//	eFeature=[mm::StructuralFeature] (isMany?="+=" | "=") value=Value;
		public ParserRule getRule() { return rule; }

		//eFeature=[mm::StructuralFeature] (isMany?="+=" | "=") value=Value
		public Group getGroup() { return cGroup; }

		//eFeature=[mm::StructuralFeature]
		public Assignment getEFeatureAssignment_0() { return cEFeatureAssignment_0; }

		//[mm::StructuralFeature]
		public CrossReference getEFeatureStructuralFeatureCrossReference_0_0() { return cEFeatureStructuralFeatureCrossReference_0_0; }

		//ID
		public RuleCall getEFeatureStructuralFeatureIDTerminalRuleCall_0_0_1() { return cEFeatureStructuralFeatureIDTerminalRuleCall_0_0_1; }

		//isMany?="+=" | "="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isMany?="+="
		public Assignment getIsManyAssignment_1_0() { return cIsManyAssignment_1_0; }

		//"+="
		public Keyword getIsManyPlusSignEqualsSignKeyword_1_0_0() { return cIsManyPlusSignEqualsSignKeyword_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class NewObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEClassEntityCrossReference_0_0 = (CrossReference)cEClassAssignment_0.eContents().get(0);
		private final RuleCall cEClassEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEClassEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NewObject:
		//	eClass=[mm::Entity] name=ID? "{" features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//eClass=[mm::Entity] name=ID? "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//eClass=[mm::Entity]
		public Assignment getEClassAssignment_0() { return cEClassAssignment_0; }

		//[mm::Entity]
		public CrossReference getEClassEntityCrossReference_0_0() { return cEClassEntityCrossReference_0_0; }

		//ID
		public RuleCall getEClassEntityIDTerminalRuleCall_0_0_1() { return cEClassEntityIDTerminalRuleCall_0_0_1; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContainmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	TerminalExpression | Reference | Containment;
		public ParserRule getRule() { return rule; }

		//TerminalExpression | Reference | Containment
		public Alternatives getAlternatives() { return cAlternatives; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }

		//Containment
		public RuleCall getContainmentParserRuleCall_2() { return cContainmentParserRuleCall_2; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueEObjectCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueEObjectIDTerminalRuleCall_0_1 = (RuleCall)cValueEObjectCrossReference_0.eContents().get(1);
		
		//Reference:
		//	value=[ecore::EObject];
		public ParserRule getRule() { return rule; }

		//value=[ecore::EObject]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[ecore::EObject]
		public CrossReference getValueEObjectCrossReference_0() { return cValueEObjectCrossReference_0; }

		//ID
		public RuleCall getValueEObjectIDTerminalRuleCall_0_1() { return cValueEObjectIDTerminalRuleCall_0_1; }
	}

	public class ContainmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Containment");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNewObjectParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Containment:
		//	value=NewObject;
		public ParserRule getRule() { return rule; }

		//value=NewObject
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NewObject
		public RuleCall getValueNewObjectParserRuleCall_0() { return cValueNewObjectParserRuleCall_0; }
	}

	public class EnumAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueEnumerationLiteralCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueEnumerationLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cValueEnumerationLiteralCrossReference_1_0.eContents().get(1);
		
		////enum Type:
		////	void | integer | real | boolean | string;
		////Attribute:
		////	(EnumAttribute | StringAttribute | IntegerAttribute  | BooleanAttribute | DoubleAttribute | DateAttribute | NullAttribute)
		////;
		//EnumAttribute:
		//	":" value=[mm::EnumerationLiteral];
		public ParserRule getRule() { return rule; }

		//":" value=[mm::EnumerationLiteral]
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//value=[mm::EnumerationLiteral]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[mm::EnumerationLiteral]
		public CrossReference getValueEnumerationLiteralCrossReference_1_0() { return cValueEnumerationLiteralCrossReference_1_0; }

		//ID
		public RuleCall getValueEnumerationLiteralIDTerminalRuleCall_1_0_1() { return cValueEnumerationLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cThisAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cThisThisParserRuleCall_0_0 = (RuleCall)cThisAssignment_0.eContents().get(0);
		private final Assignment cNewAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNewNewParserRuleCall_1_0 = (RuleCall)cNewAssignment_1.eContents().get(0);
		private final Assignment cIntAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntInteroParserRuleCall_2_0 = (RuleCall)cIntAssignment_2.eContents().get(0);
		private final Assignment cStringAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringStringaParserRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		private final Assignment cNullAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNullNulloParserRuleCall_4_0 = (RuleCall)cNullAssignment_4.eContents().get(0);
		
		/// *
		//StringAttribute :
		//	value=STRING
		//;
		//
		//IntegerAttribute:
		//	 value=LONG
		//;
		//	
		//DoubleAttribute:
		//	 value=DOUBLE
		//;
		//
		//DateAttribute:
		//	 value=DATE
		//;
		//
		//NullAttribute:
		//	value = "NULL"
		//;
		//
		//	
		//BooleanAttribute:
		//	 value?="true" |  "false" {BooleanAttribute}
		//;	
		//
		// * / //terminal INT returns ecore::EInt : ('-')?  ('0'..'9')+;
		////terminal LONG returns ecore::ELong : ('-')?  ('0'..'9')+;
		////terminal DOUBLE returns ecore::EDouble : ('-')?  ('0'..'9')+ '.'  ('0'..'9')+;
		////terminal DATE returns ecore::EDate : ('0'..'1') '0'..'9' '.' '0'..'3' '0'..'9' '.'  '0'..'9' '0'..'9' '0'..'9' '0'..'9';
		//TerminalExpression:
		//	this=This | //   variable = Variable |
		//	new=New | //   cast = Cast |
		//	//   original = Original |
		//	int=Intero | string=Stringa | null=Nullo;
		public ParserRule getRule() { return rule; }

		//this=This | //   variable = Variable |
		//new=New | //   cast = Cast |
		////   original = Original |
		//int=Intero | string=Stringa | null=Nullo
		public Alternatives getAlternatives() { return cAlternatives; }

		//this=This
		public Assignment getThisAssignment_0() { return cThisAssignment_0; }

		//This
		public RuleCall getThisThisParserRuleCall_0_0() { return cThisThisParserRuleCall_0_0; }

		////   variable = Variable |
		//new=New
		public Assignment getNewAssignment_1() { return cNewAssignment_1; }

		//New
		public RuleCall getNewNewParserRuleCall_1_0() { return cNewNewParserRuleCall_1_0; }

		////   cast = Cast |
		////   original = Original |
		//int=Intero
		public Assignment getIntAssignment_2() { return cIntAssignment_2; }

		//Intero
		public RuleCall getIntInteroParserRuleCall_2_0() { return cIntInteroParserRuleCall_2_0; }

		//string=Stringa
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }

		//Stringa
		public RuleCall getStringStringaParserRuleCall_3_0() { return cStringStringaParserRuleCall_3_0; }

		//null=Nullo
		public Assignment getNullAssignment_4() { return cNullAssignment_4; }

		//Nullo
		public RuleCall getNullNulloParserRuleCall_4_0() { return cNullNulloParserRuleCall_4_0; }
	}

	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "This");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVariableThisKeyword_0 = (Keyword)cVariableAssignment.eContents().get(0);
		
		//This:
		//	variable="this";
		public ParserRule getRule() { return rule; }

		//variable="this"
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//"this"
		public Keyword getVariableThisKeyword_0() { return cVariableThisKeyword_0; }
	}

	public class NewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "New");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEntityCrossReference_1_0.eContents().get(1);
		
		////Variable: (parameter=[Parameter]) | (fieldRef = [FieldRef]);
		////'(' (args+=Argument (',' args+=Argument)*)? ')';
		//New:
		//	"new" type=[mm::Entity];
		public ParserRule getRule() { return rule; }

		//"new" type=[mm::Entity]
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=[mm::Entity]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[mm::Entity]
		public CrossReference getTypeEntityCrossReference_1_0() { return cTypeEntityCrossReference_1_0; }

		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_1_0_1() { return cTypeEntityIDTerminalRuleCall_1_0_1; }
	}

	public class InteroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Intero");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////Cast: ('(' '(' type=[Class] ')' expression=Expression) ')'; // | ('(''(' type=[Class] ')' expression=TerminalExpression ')');
		////Original: {Original} 'original' '('(par+=[Parameter] (',' par+=[Parameter])*)? ')';
		//Intero:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stringa");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Stringa:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NulloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nullo");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNullKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Nullo:
		//	value="null";
		public ParserRule getRule() { return rule; }

		//value="null"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"null"
		public Keyword getValueNullKeyword_0() { return cValueNullKeyword_0; }
	}
	
	
	private FactoryElements pFactory;
	private ImportElements pImport;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private QualifiedNameElements pQualifiedName;
	private FeatureElements pFeature;
	private NewObjectElements pNewObject;
	private ValueElements pValue;
	private ReferenceElements pReference;
	private ContainmentElements pContainment;
	private EnumAttributeElements pEnumAttribute;
	private TerminalExpressionElements pTerminalExpression;
	private ThisElements pThis;
	private NewElements pNew;
	private InteroElements pIntero;
	private StringaElements pStringa;
	private NulloElements pNullo;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public InstanceDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Factory:
	//	imports+=Import* //	(annotations+=Annotation)*
	//	root=NewObject;
	public FactoryElements getFactoryAccess() {
		return (pFactory != null) ? pFactory : (pFactory = new FactoryElements());
	}
	
	public ParserRule getFactoryRule() {
		return getFactoryAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	/// *
	//Annotation:
	//	NameMapping
	//;
	//
	//NameMapping:
	//	GlobalNameMapping | CustomNameMapping
	//;
	//
	//GlobalNameMapping:
	//	"@Name" "{" nameFeature=ID "}"
	//;
	//
	//CustomNameMapping:
	//	"@Name" "{" eClass=[mm::Entity] "=" nameFeature=[mm::Attribute] "}"
	//;
	// * / Feature:
	//	eFeature=[mm::StructuralFeature] (isMany?="+=" | "=") value=Value;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//NewObject:
	//	eClass=[mm::Entity] name=ID? "{" features+=Feature* "}";
	public NewObjectElements getNewObjectAccess() {
		return (pNewObject != null) ? pNewObject : (pNewObject = new NewObjectElements());
	}
	
	public ParserRule getNewObjectRule() {
		return getNewObjectAccess().getRule();
	}

	//Value:
	//	TerminalExpression | Reference | Containment;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Reference:
	//	value=[ecore::EObject];
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Containment:
	//	value=NewObject;
	public ContainmentElements getContainmentAccess() {
		return (pContainment != null) ? pContainment : (pContainment = new ContainmentElements());
	}
	
	public ParserRule getContainmentRule() {
		return getContainmentAccess().getRule();
	}

	////enum Type:
	////	void | integer | real | boolean | string;
	////Attribute:
	////	(EnumAttribute | StringAttribute | IntegerAttribute  | BooleanAttribute | DoubleAttribute | DateAttribute | NullAttribute)
	////;
	//EnumAttribute:
	//	":" value=[mm::EnumerationLiteral];
	public EnumAttributeElements getEnumAttributeAccess() {
		return (pEnumAttribute != null) ? pEnumAttribute : (pEnumAttribute = new EnumAttributeElements());
	}
	
	public ParserRule getEnumAttributeRule() {
		return getEnumAttributeAccess().getRule();
	}

	/// *
	//StringAttribute :
	//	value=STRING
	//;
	//
	//IntegerAttribute:
	//	 value=LONG
	//;
	//	
	//DoubleAttribute:
	//	 value=DOUBLE
	//;
	//
	//DateAttribute:
	//	 value=DATE
	//;
	//
	//NullAttribute:
	//	value = "NULL"
	//;
	//
	//	
	//BooleanAttribute:
	//	 value?="true" |  "false" {BooleanAttribute}
	//;	
	//
	// * / //terminal INT returns ecore::EInt : ('-')?  ('0'..'9')+;
	////terminal LONG returns ecore::ELong : ('-')?  ('0'..'9')+;
	////terminal DOUBLE returns ecore::EDouble : ('-')?  ('0'..'9')+ '.'  ('0'..'9')+;
	////terminal DATE returns ecore::EDate : ('0'..'1') '0'..'9' '.' '0'..'3' '0'..'9' '.'  '0'..'9' '0'..'9' '0'..'9' '0'..'9';
	//TerminalExpression:
	//	this=This | //   variable = Variable |
	//	new=New | //   cast = Cast |
	//	//   original = Original |
	//	int=Intero | string=Stringa | null=Nullo;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//This:
	//	variable="this";
	public ThisElements getThisAccess() {
		return (pThis != null) ? pThis : (pThis = new ThisElements());
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}

	////Variable: (parameter=[Parameter]) | (fieldRef = [FieldRef]);
	////'(' (args+=Argument (',' args+=Argument)*)? ')';
	//New:
	//	"new" type=[mm::Entity];
	public NewElements getNewAccess() {
		return (pNew != null) ? pNew : (pNew = new NewElements());
	}
	
	public ParserRule getNewRule() {
		return getNewAccess().getRule();
	}

	////Cast: ('(' '(' type=[Class] ')' expression=Expression) ')'; // | ('(''(' type=[Class] ')' expression=TerminalExpression ')');
	////Original: {Original} 'original' '('(par+=[Parameter] (',' par+=[Parameter])*)? ')';
	//Intero:
	//	value=INT;
	public InteroElements getInteroAccess() {
		return (pIntero != null) ? pIntero : (pIntero = new InteroElements());
	}
	
	public ParserRule getInteroRule() {
		return getInteroAccess().getRule();
	}

	//Stringa:
	//	value=STRING;
	public StringaElements getStringaAccess() {
		return (pStringa != null) ? pStringa : (pStringa = new StringaElements());
	}
	
	public ParserRule getStringaRule() {
		return getStringaAccess().getRule();
	}

	//Nullo:
	//	value="null";
	public NulloElements getNulloAccess() {
		return (pNullo != null) ? pNullo : (pNullo = new NulloElements());
	}
	
	public ParserRule getNulloRule() {
		return getNulloAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
